<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

module_load_include('inc', 'ebms', 'includes/ebms.fields');

function ebms_install() {
    _ebms_configure_editor();
}

function ebms_enable() {
    _ebms_install_add_event_fields();

    _ebms_install_create_recent_activity();
}
$GLOBALS['recent_activity_types'] = array(
    'activity_new_articles' => '{
            "name" : "activity_new_articles",
            "description" : "New Articles",
            "argument_keys" : [],
            "argument" : [],
            "category" : "message_type",
            "data" : { "purge" : { "override" : 0, "enabled" : 0, "quota" : "", "days" : "" } },
            "language" : "",
            "arguments" : null,
            "message_text" : { "und" : [
                {
                  "value" : "New [message:board] articles posted.  [message:timestamp:custom:m\/d\/Y]",
                  "format" : "plain_text",
                  "safe_value" : "\u003Cp\u003ENew [message:board] articles posted.  [message:timestamp:custom:m\/d\/Y]\u003C\/p\u003E\n"
                }
              ]
            }
          }',
    'activity_new_event' => '{
            "name" : "activity_new_event",
            "description" : "New Event",
            "argument_keys" : [],
            "argument" : [],
            "category" : "message_type",
            "data" : { "purge" : { "override" : 0, "enabled" : 0, "quota" : "", "days" : "" } },
            "language" : "",
            "arguments" : null,
            "message_text" : { "und" : [
                {
                  "value" : "New event [message:field_title] posted.  [message:timestamp:custom:m\/d\/Y]",
                  "format" : "plain_text",
                  "safe_value" : "\u003Cp\u003ENew event [message:field_title] posted.  [message:timestamp:custom:m\/d\/Y]\u003C\/p\u003E\n"
                }
              ]
            }
          }',
    'activity_cancelled_event' => '{
            "name" : "activity_cancelled_event",
            "description" : "Cancelled Event",
            "argument_keys" : [],
            "argument" : [],
            "category" : "message_type",
            "data" : { "purge" : { "override" : 0, "enabled" : 0, "quota" : "", "days" : "" } },
            "language" : "",
            "arguments" : null,
            "message_text" : { "und" : [
                {
                  "value" : "Event [message:field_title] cancelled.  [message:timestamp:custom:m\/d\/Y]",
                  "format" : "plain_text",
                  "safe_value" : "\u003Cp\u003EEvent [message:field_title] cancelled.  [message:timestamp:custom:m\/d\/Y]\u003C\/p\u003E\n"
                }
              ]
            }
          }',
    'activity_changed_event' => '{
            "name" : "activity_changed_event",
            "description" : "Changed Event",
            "argument_keys" : [],
            "argument" : [],
            "category" : "message_type",
            "data" : { "purge" : { "override" : 0, "enabled" : 0, "quota" : "", "days" : "" } },
            "language" : "",
            "arguments" : null,
            "message_text" : { "und" : [
                {
                  "value" : "[message:field_title] time updated.  [message:timestamp:custom:m\/d\/Y]",
                  "format" : "plain_text",
                  "safe_value" : "\u003Cp\u003ENew event [message:field_title] posted.  [message:timestamp:custom:m\/d\/Y]\u003C\/p\u003E\n"
                }
              ]
            }
          }',
    'activity_agenda_published' => '{
        "name" : "activity_agenda_published",
        "description" : "Agenda Published",
        "argument_keys" : [],
        "argument" : [],
        "category" : "message_type",
        "data" : { "purge" : { "override" : 0, "enabled" : 0, "quota" : "", "days" : "" } },
        "language" : "",
        "arguments" : null,
        "message_text" : { "und" : [
            {
              "value" : "Agenda published for [message:field_title]. [message:timestamp:custom:m\/d\/Y]",
              "format" : "plain_text",
              "safe_value" : "\u003Cp\u003EAgenda published for [message:field_title]. [message:timestamp:custom:m\/d\/Y]\u003C\/p\u003E\n"
            }
          ]
        }
    }',
    'activity_event_type' => '{
        "name" : "activity_event_type",
        "description" : "Event Type Changed",
        "argument_keys" : [],
        "argument" : [],
        "category" : "message_type",
        "data" : { "purge" : { "override" : 0, "enabled" : 0, "quota" : "", "days" : "" } },
        "language" : "",
        "arguments" : null,
        "message_text" : { "und" : [
            {
              "value" : "[message:field_title] changed to [message:field_event_type].  [message:timestamp:custom:m\/d\/Y]",
              "format" : "plain_text",
              "safe_value" : "\u003Cp\u003E[message:field_title] changed to [message:field_event_type].  [message:timestamp:custom:m\/d\/Y]\u003C\/p\u003E\n"
            }
          ]
        }
    }',
    'activity_new_packet' =>'{
            "name" : "activity_new_packet",
            "description" : "New Packet",
            "argument_keys" : [],
            "argument" : [],
            "category" : "message_type",
            "data" : { "purge" : { "override" : 0, "enabled" : 0, "quota" : "", "days" : "" } },
            "language" : "",
            "arguments" : null,
            "message_text" : { "und" : [
                {
                  "value" : "[message:field_title] literature posted.  [message:timestamp:custom:m\/d\/Y]",
                  "format" : "plain_text",
                  "safe_value" : "\u003Cp\u003E[message:field_title] literature posted.  [message:timestamp:custom:m\/d\/Y]\u003C\/p\u003E\n"
                }
              ]
            }
        }',
    'activity_new_summary' => '{
        "name" : "activity_new_summary",
        "description" : "New Summary",
        "argument_keys" : [],
        "argument" : [],
        "category" : "message_type",
        "data" : { "purge" : { "override" : 0, "enabled" : 0, "quota" : "", "days" : "" } },
        "language" : "",
        "arguments" : null,
        "message_text" : { "und" : [
            {
              "value" : "[message:user:name] posted [message:field_title].  [message:timestamp:custom:m\/d\/Y]",
              "format" : "plain_text",
              "safe_value" : "\u003Cp\u003E[message:user:name] posted [message:field_title].  [message:timestamp:custom:m\/d\/Y]\u003C\/p\u003E\n"
            }
          ]
        }
    }',
);

$GLOBALS['ebms_editor_config_string'] = 'a:20:{s:7:"default";i:1;s:11:"user_choose";i:0;s:11:"show_toggle";i:1;s:5:"theme";s:8:"advanced";s:8:"language";s:2:"en";s:7:"buttons";a:2:{s:7:"default";a:21:{s:4:"Bold";i:1;s:6:"Italic";i:1;s:9:"Underline";i:1;s:12:"BulletedList";i:1;s:12:"NumberedList";i:1;s:4:"Undo";i:1;s:4:"Redo";i:1;s:4:"Link";i:1;s:6:"Unlink";i:1;s:5:"Image";i:1;s:10:"Blockquote";i:1;s:3:"Cut";i:1;s:4:"Copy";i:1;s:5:"Paste";i:1;s:9:"PasteText";i:1;s:13:"PasteFromWord";i:1;s:10:"ShowBlocks";i:1;s:12:"RemoveFormat";i:1;s:9:"SelectAll";i:1;s:12:"SpellChecker";i:1;s:5:"Scayt";i:1;}s:11:"drupal_path";a:1:{s:4:"Link";i:1;}}s:11:"toolbar_loc";s:3:"top";s:13:"toolbar_align";s:4:"left";s:8:"path_loc";s:6:"bottom";s:8:"resizing";i:1;s:11:"verify_html";i:1;s:12:"preformatted";i:0;s:22:"convert_fonts_to_spans";i:1;s:17:"remove_linebreaks";i:1;s:23:"apply_source_formatting";i:0;s:27:"paste_auto_cleanup_on_paste";i:0;s:13:"block_formats";s:32:"p,address,pre,h2,h3,h4,h5,h6,div";s:11:"css_setting";s:5:"theme";s:8:"css_path";s:0:"";s:11:"css_classes";s:0:"";}';

function _ebms_install_create_recent_activity() {

    // create the 'recent activity' category type
    $category = message_type_category_load('recent_activity');
    if (!$category) {
        $category = message_type_category_create('recent_activity');
        $category->save();
    }

    // check for each message type and import if missing
    global $recent_activity_types;
    foreach ($recent_activity_types as $id => $export) {
        $type = message_type_load($id);
        if (!$type) {
            $type = entity_import('message_type', $export);
            $type->save();
        }
    }

    global $ebms_entity_fields;
    _ebms_enable_fields($ebms_entity_fields);



    return;

    // example of creating a message and adding field data
    $message = message_create('activity_new_articles');
    $message->save();

    $wrapper = entity_metadata_wrapper('message', $message);
    $wrapper->field_boards->set(array(1, 2));
    $wrapper->save();

    $message = message_load($message->mid);
}

function _ebms_install_add_event_fields() {
    global $ebms_node_fields;

    node_types_rebuild();
    _ebms_enable_fields($ebms_node_fields);
}

/**
 *
 * @param type $fields
 * @return boolean 
 */
function _ebms_enable_fields($fields) {
    try {
        foreach ($fields as $field) {
            $field_info = _ebms_field_info($field);
            field_read_field($field_info['field_name']) == FALSE ? field_create_field($field_info)
                        : field_update_field($field_info);
            //Add an instance of this field to each of the content types that use it.
            foreach ($field['bundles'] as $bundle) {
                $instance_info = _ebms_instance_info($field, $bundle);

                if ($instance_info) {
                    field_read_instance($instance_info['entity_type'],
                            $instance_info['field_name'],
                            $instance_info['bundle']) == FALSE ? field_create_instance($instance_info)
                                : field_update_instance($instance_info);
                } else {
                    watchdog('error',
                        t('There was a problem creating a field instance.'));
                }
            }
        }
        return TRUE;
    } catch (Exception $e) {
        watchdog_exception('EBMS - enable', $e);
        return FALSE;
    }
}

/**
 *
 * @param type $field
 * @return type 
 */
function _ebms_field_info($field = array()) {

    if (empty($field))
        return;
    // Variables
    $field_info = array();

    // Create the fields
    //Required field properties
    $field_info['field_name'] = $field['field_name'];
    $field_info['type'] = $field['type'];
    //Optional field properties
    if (array_key_exists('cardinality', $field))
        $field_info['cardinality'] = $field['cardinality'];

    if (array_key_exists('label', $field))
        $field_info['label'] = $field['label'];

    if (array_key_exists('description', $field))
        $field_info['description'] = $field['description'];

    if (array_key_exists('settings', $field))
        $field_info['settings'] = $field['settings'];

    if (array_key_exists('instance_settings', $field))
        $field_info['instance_settings'] = $field['instance_settings'];

    if (array_key_exists('default_widget', $field))
        $field_info['default_widget'] = $field['default_widget'];

    if (array_key_exists('default_formatter', $field))
        $field_info['default_formatter'] = $field['default_formatter'];

    if (array_key_exists('locked', $field))
        $field_info['locked'] = $field['locked'];

    if (array_key_exists('no_ui', $field))
        $field_info['no_ui'] = $field['no_ui'];

    // Return the fields
    return $field_info;
}

/**
 *
 * @param type $field
 * @param type $bundle
 * @return type 
 */
function _ebms_instance_info($field = array(), $bundle = FALSE) {

    if (empty($field) || !$bundle) {
        return;
    }

    $instance_info = array();

    //required instance fields
    $instance_info['field_name'] = $field['field_name'];
    $instance_info['entity_type'] = $field['entity_type'];
    $instance_info['bundle'] = $bundle;

    //optional instance fields
    if (array_key_exists('label', $field))
        $instance_info['label'] = $field['label'];

    if (array_key_exists('description', $field))
        $instance_info['description'] = $field['description'];

    if (array_key_exists('required', $field))
        $instance_info['required'] = $field['required'];

    if (array_key_exists('default_value_function', $field))
        $instance_info['default_value_function'] = $field['default_value_function'];

    if (array_key_exists('default_value', $field))
        $instance_info['default_value'] = $field['default_value'];

    if (array_key_exists('settings', $field))
        $instance_info['settings'] = $field['settings'];

    if (array_key_exists('widget', $field))
        $instance_info['widget'] = $field['widget'];

    if (array_key_exists('display', $field))
        $instance_info['display'] = $field['display'];

    return $instance_info;
}

function ebms_enable_test() {
    drupal_set_message('Cycling ebms + ebms_forums modules.');
    module_disable(array('ebms'));
    $ret = module_enable(array('ebms_forums'));
    if ($ret)
        $ret = module_enable(array('ebms_webforms'));

    if ($ret)
        drupal_set_message('Module enabled!');
    else
        drupal_set_message('Enable failed, check dependencies.');

    return array();
}

function _ebms_configure_editor() {
    global $ebms_editor_config_string;
    
    $key = array(
        'format' => 'filtered_html',
    );

    $fields = array(
        'editor' => 'ckeditor',
        'settings' => $ebms_editor_config_string,
    );

    db_merge('wysiwyg')
        ->key($key)
        ->fields($fields)
        ->execute();
}
?>
