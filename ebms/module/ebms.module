<?php

// $Id$

/**
 *
 * @file
 *
 * Portal for PDQ Board members.
 *
 * "Editorial Board Management Site" (EBMS).
 *
 * Supported functionality includes:
 *   - literature review
 *   - PDQ Summary document exchange
 *   - calendar of events
 *   - meeting support information
 *   - announcements
 *   - threaded discussions
 *   - rosters and other reports
 *   - request forms (e.g., hotel reservations, reimbursements)
 */
require_once('common.inc');
require_once('not_for_production.inc'); // XXX drop when we're done developing.

module_load_include('inc', 'ebms', 'includes/ebms.nodes');

/**
 * Permissions granted to EBMS users.  Implementation of hook_permission().
 */
function ebms_permission() {
    return array(
            /* Administer EBMS vs Administer:
              The Administer permission below should be changed to be something
              other than "administer" since that permission is not really
              an admin type permission.  'administer ebms' will be used for managing
              board membership, subgroup membership, and adhoc membership.  Also
              this permission will grant access to all EBMS content.
              --BryanP 12/16/2012
             *
             */
            'administer ebms' => array(
                    'title' => t('Administer EBMS'),
                    'description' => t('Manage EBMS Membership and Users.  Note: Also enables access to all EBMS content.')
            ),
            'administer' => array(
                    'title' => t('Perform Administrative Tasks'),
                    'description' =>
                    t('Post documents, manage groups, send messages, etc.'),
            ),
            'manage citations' => array(
                    'title' => t('Manage Citations'),
                    'description' =>
                    t('Import and screen journal articles, and set their statuses'),
            ),
            'manage boards' => array(
                    'title' => t('Manage Boards'),
                    'description' =>
                    t('Make final determination of status for journal articles, ' .
                        'and assign literature for review'),
            ),
            'review literature' => array(
                    'title' => t('Review Literature'),
                    'description' =>
                    t('Review journal articles on cancer and make recommendations ' .
                        'for incorporation information from those articles into ' .
                        'PDQ\xc2\xae Cancer Summaries'),
            ),
            'view all events' => array(
                    'title' => t('View All Events'),
                    'description' =>
                    t('Determines if the user can access all events views in the ' .
                        'calendar. Note: This will also show all board events in ' .
                        "the user's filtered view. ")
            ),
            'record print responses' => array(
                    'title' => t('Record Print Responses'),
                    'description' =>
                    t('Determines if the user can input print responses on ' .
                        'behalf of board members.')
            ),

    );
}

/**
 *
 * Implements hook_menu.
 *
 * Creates our custom menus and other addressable pages.
 *
 * The Drupal Menu API is only being used for routing and the first
 * layer of permission checking.  We are unable to use that API
 * for construction of the rendered menu itself.  This is because
 * we are required to implement fly-out dynamic submenus, and the
 * contributed Drupal module generally used for this functionality
 * has a bug which prevents it from honoring the permissions
 * callback function registered with the API.  In the end it
 * turned out to be more efficient to handle menu building in our
 * own Menu class, implemented in common.inc.  As it turned out,
 * is was less trouble to wrap the jquery Superfish package with
 * our own theming, so we were able to dispense with the use of
 * the Drupal Superfish module altogether.
 */
function ebms_menu() {
    return array(
            // CUSTOM LOGIN PAGE
            'login' => array(
                    'page callback' => 'pdq_ebms_login',
                    'access callback' => true,
                    'type' => MENU_CALLBACK,
            ),
            // REQUEST FOR NEW PASSWORD
            'password' => array(
                    'page callback' => 'pdq_ebms_password',
                    'access callback' => true,
                    'type' => MENU_CALLBACK,
            ),
            // FORM FOR MANAGING USER'S PROFILE
            'profile' => array(
                    'page callback' => 'pdq_ebms_profile',
                    'file' => 'profile.inc',
                    'access callback' => 'user_is_logged_in',
                    'type' => MENU_CALLBACK,
            ),
            // LANDING PAGE
            'home' => array(
                    'page callback' => 'pdq_ebms_home',
                    'file' => 'home.inc',
                    'access callback' => true,
                    'type' => MENU_CALLBACK,
            ),
            // CITATION MANAGEMENT
            'citations' => array(
                    'page callback' => 'pdq_ebms_citations',
                    'file' => 'citations.inc',
                    'access arguments' => array('manage citations'),
                    'type' => MENU_CALLBACK,
            ),
            // CITATION IMPORT
            'citations/import' => array(
                    'page callback' => 'pdq_ebms_import',
                    'file' => 'import.inc',
                    'access arguments' => array('manage citations'),
                    'type' => MENU_CALLBACK,
            ),
            // PUBLISH CITATIONS
            'citations/publish' => array(
                    'page callback' => 'pdq_ebms_publish',
                    'file' => 'publish.inc',
                    'access arguments' => array('manage citations'),
                    'type' => MENU_CALLBACK,
            ),
            // AJAX CALLBACK FOR THE PUBLISH PAGE
            'publish-checkbox-ajax' => array(
                    'page callback' => 'pdq_ebms_publish_checkbox_ajax',
                    'file' => 'publish.inc',
                    'access callback' => true,
                    'type' => MENU_CALLBACK,
            ),
            // UPLOAD FULL-TEXT PDF FOR ARTICLES
            'citations/fulltext' => array(
                    'page callback' => 'pdq_ebms_fulltext',
                    'file' => 'fulltext.inc',
                    'access callback' => 'pdq_ebms_is_admin_assistant',
                    'type' => MENU_CALLBACK,
            ),
            // SEARCH DATABASE
            'citations/search' => array(
                    'page callback' => 'pdq_ebms_search',
                    'file' => 'search.inc',
                    'access arguments' => array('manage citations'),
                    'type' => MENU_CALLBACK,
            ),
            // SEARCH DATABASE
            'citations/review' => array(
                    'page callback' => 'pdq_ebms_citations',
                    'page arguments' => array(1),
                    'file' => 'citations.inc',
                    'access arguments' => array('manage citations'),
                    'type' => MENU_CALLBACK,
            ),
            // SEARCH DATABASE
            'citations/add' => array(
                    'page callback' => 'pdq_ebms_citations',
                    'page arguments' => array(1),
                    'file' => 'citations.inc',
                    'access arguments' => array('manage citations'),
                    'type' => MENU_CALLBACK,
            ),
            // SYSTEM HELP
        'help' => array(
            'page callback' => 'pdq_ebms_help',
            'file' => 'help.inc',
            'access callback' => 'user_is_logged_in',
            'type' => MENU_CALLBACK,
        ),
            'citations/help' => array(
                    'page callback' => 'pdq_ebms_citations',
                    'page arguments' => array(1),
                    'file' => 'citations.inc',
                    'access arguments' => array('manage citations'),
                    'type' => MENU_CALLBACK,
            ),
            // CITATIONS ADMIN
            'citations/admin' => array(
                    'page callback' => 'pdq_ebms_citations',
                    'page arguments' => array(1),
                    'file' => 'citations.inc',
                    'access arguments' => array('manage citations'),
                    'type' => MENU_CALLBACK,
            ),
            // CITATIONS NOT LIST
            'citations/not-list' => array(
                    'page callback' => 'pdq_ebms_citations',
                    'page arguments' => array(1),
                    'file' => 'citations.inc',
                    'access arguments' => array('manage citations'),
                    'type' => MENU_CALLBACK,
            ),
            // FULL CITATION PAGE
            'citations/full' => array(
                    'page callback' => 'pdq_ebms_citations',
                    'page arguments' => array(1, 2),
                    'file' => 'citations.inc',
                    'access arguments' => array('manage citations'),
                    'type' => MENU_CALLBACK,
            ),
            'citations/%ctools_js/add_tag' => array(
                    'title' => 'Add Tag',
                    'page callback' => '_ajax_modal_add_tag',
                    'page arguments' => array(1, 3, 4),
                    'file' => 'citations.inc',
                    'access callback' => TRUE,
                    'type' => MENU_CALLBACK,
            ),
            'citations/%ctools_js/view_abstract/%' => array(
                    'title' => 'View Abstract',
                    'page callback' => '_ajax_modal_view_abstract',
                    'page arguments' => array(1, 3),
                    'file' => 'citations.inc',
                    'access callback' => TRUE,
                    'type' => MENU_CALLBACK,
            ),
            // CALENDAR
            /* 'calendar' => array(
              'page callback' => 'pdq_ebms_calendar',
              'file' => 'calendar.inc',
              'access callback' => 'user_is_logged_in',
              'type' => MENU_CALLBACK,
              ),

              // CREATE EVENT
              'calendar/create' => array(
              'page callback' => 'pdq_ebms_calendar',
              'file' => 'calendar.inc',
              'access arguments' => array('manage citations'),
              'type' => MENU_CALLBACK,
              ),

              // EDIT EVENT
              'calendar/edit/%' => array(
              'page callback' => 'ebms_calendar_edit_event',
              'page arguments' => array(2),
              'file' => 'calendar.inc',
              'access arguments' => array('manage citations'),
              'type' => MENU_CALLBACK,
              ), */

            // LITERATURE REVIEW
            'review' => array(
                    'page callback' => 'pdq_ebms_review',
                    'file' => 'review.inc',
                    'access callback' => 'user_is_logged_in',
                    'type' => MENU_CALLBACK,
            ),
            // ASSIGNED PACKETS
            'review/assigned' => array(
                    'page callback' => 'pdq_ebms_review',
                    'file' => 'review.inc',
                    'access callback' => 'user_is_logged_in',
                    'type' => MENU_CALLBACK,
            ),
            // CREATE PACKET
            'review/create' => array(
                    'page callback' => 'pdq_ebms_review',
                    'file' => 'review.inc',
                    'access arguments' => array('manage citations'),
                    'type' => MENU_CALLBACK,
            ),
            // SUMMARIES
            'summaries' => array(
                    'page callback' => 'pdq_ebms_summaries',
                    'file' => 'summaries.inc',
                    'access callback' => 'user_is_logged_in',
                    'type' => MENU_CALLBACK,
            ),
            /* // TRAVEL
              'travel' => array(
              'page callback' => 'pdq_ebms_travel',
              'file' => 'travel.inc',
              'access callback' => 'user_is_logged_in',
              'type' => MENU_CALLBACK,
              ),

              // TRAVEL INFO
              'travel/info' => array(
              'page callback' => 'pdq_ebms_travel',
              'file' => 'travel.inc',
              'access callback' => 'user_is_logged_in',
              'type' => MENU_CALLBACK,
              ),

              // HOTEL REQUEST
              'travel/hotel' => array(
              'page callback' => 'pdq_ebms_travel',
              'file' => 'travel.inc',
              'access callback' => 'user_is_logged_in',
              'type' => MENU_CALLBACK,
              ),

              // REIMBURSEMENT REQUEST
              'travel/reimbursement' => array(
              'page callback' => 'pdq_ebms_travel',
              'file' => 'travel.inc',
              'access callback' => 'user_is_logged_in',
              'type' => MENU_CALLBACK,
              ),

              // TRAVEL REPORTS
              'travel/reports' => array(
              'page callback' => 'pdq_ebms_travel',
              'file' => 'travel.inc',
              'access arguments' => array('manage citations'),
              'type' => MENU_CALLBACK,
              ), */

            // FORUMS
            'forum' => array(
                    'page callback' => 'pdq_ebms_forum',
                    'file' => 'forum.inc',
                    'access callback' => 'user_is_logged_in',
                    'type' => MENU_CALLBACK,
            ),
            // ABOUT
            'about' => array(
                    'page callback' => 'pdq_ebms_about',
                    'file' => 'about.inc',
                    'access callback' => 'user_is_logged_in',
                    'type' => MENU_CALLBACK,
            ),
            // GENERAL INFORMATION ABOUT EBMS
            'about/info' => array(
                    'page callback' => 'pdq_ebms_about',
                    'file' => 'about.inc',
                    'access callback' => 'user_is_logged_in',
                    'type' => MENU_CALLBACK,
            ),
            // Information on PDQ Boards
            'about#pdq-boards' => array(
                    'page callback' => 'pdq_ebms_about',
                    'file' => 'about.inc',
                    'access callback' => 'user_is_logged_in',
                    'type' => MENU_CALLBACK,
            ),
            // POSTING DOCUMENTS
            'docs' => array(
                    'page callback' => 'pdq_ebms_docs',
                    'file' => 'docs.inc',
                    'access arguments' => array('administer'),
                    'type' => MENU_CALLBACK,
            ),
            // REPORTS
            'reports' => array(
                    'page callback' => 'pdq_ebms_reports',
                    'file' => 'reports.inc',
                    'access arguments' => array('administer'),
                    'type' => MENU_CALLBACK,
            ),
            // AD-HOC GROUPS
            'groups' => array(
                    'page callback' => 'pdq_ebms_groups',
                    'file' => 'groups.inc',
                    'access arguments' => array('administer'),
                    'type' => MENU_CALLBACK,
            ),
            // CUSTOM 403 PAGE
            'access-denied' => array(
                    'title' => 'Access Denied',
                    'page callback' => 'pdq_ebms_403',
                    'access callback' => true,
                    'type' => MENU_CALLBACK,
            ),
            // CUSTOM 404 PAGE
            'not-found' => array(
                    'title' => 'Page Not Found',
                    'page callback' => 'pdq_ebms_404',
                    'access callback' => true,
                    'type' => MENU_CALLBACK,
            ),
            // REFRESH JOURNAL TABLE
            'admin/refresh-journals' => array(
                    'title' => 'Journal Table Refresh',
                    'page callback' => 'pdq_ebms_refresh_journals',
                    'access arguments' => array('administer'),
            ),
            /*
              // TESTING ARTICLE SEARCH
              'articlesearch' => array(
              'title' => 'Search for Articles',
              'page callback' => 'pdq_ebms_artsearch',
              'file' => 'art_search.inc',
              'access callback' => 'user_is_logged_in',
              'menu_name' => 'main-menu',
              'weight' => 6,
              ), */

            // TESTING FOR ALAN
            'alantest' => array(
                    'title' => 'Article API Testing',
                    'page callback' => 'pdq_ebms_alantest',
                    'file' => 'alan.inc',
                    'access callback' => true,
                    'theme callback' => 'pdq_ebms_tester_theme',
            //'menu_name' => 'main-menu',
            //'weight' => 20,
            ),
            // TESTING FOR ALAN
            'admin/apitest' => array(
                    'title' => 'AlanTest',
                    'page callback' => 'pdq_ebms_alantest',
                    'file' => 'alan.inc',
                    'access callback' => true,
                    'theme callback' => 'pdq_ebms_tester_theme',
            //'menu_name' => 'main-menu',
            //'weight' => 20,
            ),
            // TESTING FOR DAN
            'admin/ebms/enable' => array(
                    'title' => 'EBMS Enable',
                    'page callback' => 'ebms_enable_test',
                    'file' => 'ebms.install',
                    'access callback' => true,
                    'theme callback' => 'pdq_ebms_tester_theme',
            //'menu_name' => 'main-menu',
            //'weight' => 20,
            ),
            // AJAX CALLBACK FOR THE NEW PASSWORD FORM.
            'account-email-status' => array(
                    'page callback' => 'pdq_ebms_account_email_status',
                    'access callback' => true,
                    'type' => MENU_CALLBACK,
            ),
            // USED ONLY BY DEVELOPER.
            'upload-files' => array(
                    'title' => 'Upload Files',
                    'page callback' => 'pdq_ebms_upload_files',
                    'access callback' => true,
                    'type' => MENU_CALLBACK,
            ),
            // PLACEHOLDER DURING DEVELOPMENT
            'stub' => array(
                    'title' => 'Place Holder',
                    'page callback' => 'pdq_ebms_stub',
                    'access callback' => true,
                    'type' => MENU_CALLBACK,
            ),
            // TEMPLATE USED FOR PUTTING UP TEST FORMS
            'testform' => array(
                    'title' => 'Test Form',
                    'page callback' => 'pdq_ebms_testform',
                    'access callback' => true,
                    'type' => MENU_CALLBACK,
                    'file' => 'testform.inc',
            ),
            // CLEAR THEME CACHE
            'clear-theme-cache' => array(
                    'title' => 'Clear Theme Cache',
                    'page callback' => 'pdq_ebms_clear_theme_cache',
                    'access callback' => true,
                    'type' => MENU_CALLBACK,
            ),
            // CLEAR ALL CACHES
            'clear-all-caches' => array(
                    'title' => 'Clear Theme Cache',
                    'page callback' => 'pdq_ebms_clear_all_caches',
                    'access callback' => true,
                    'type' => MENU_CALLBACK,
            ),
    );
}

/**
 * Custom login page.  Page gets a second form for requesting a new
 * password.  This second form is hidden and is only displayed when
 * the user explicitly requests it (and only if Javascript is enabled).
 */
function pdq_ebms_login() {

    // First assemble the basic login form.
    $form = drupal_get_form('pdq_ebms_login_form');

    // Then fold in the hidden form for the password reset dialog.
    drupal_add_library('system', 'ui.dialog');
    $dialog = drupal_get_form('pdq_ebms_password_form');
    $dialog['#prefix'] = '<div id="forgot-password-form-js">';
    $dialog['#suffix'] = '</div>';
    $page = array('form' => $form, 'hidden-form' => $dialog);
    return $page;
}

/**
 * Custom login page.
 */
function pdq_ebms_login_form($form, &$form_state) {
    $url = 'password';
    $title = 'Forgot user name or password?';
    $id = 'forgot-password';
    $prompt = 'Can\'t access your account?';
    $pw_request = "<a href='$url' title='$title' id='$id'>$prompt</a>";
    return array(
            'name' => array(
                    '#type' => 'textfield',
                    '#title' => 'Username',
            ),
            'pass' => array(
                    '#type' => 'password',
                    '#title' => 'Password',
            ),
            'submit' => array(
                    '#type' => 'submit',
                    '#value' => 'LOGIN',
                    '#suffix' => $pw_request,
                    '#submit' => array('pdq_ebms_login_form_submit'),
            ),
            '#validate' => array('pdq_ebms_login_form_validate'),
    );
}

/**
 * Verify that the user credentials are present and valid.  Most of the
 * work done here is for thwarting hackers.
 */
function pdq_ebms_login_form_validate($form, &$form_state) {

    // Check for the simple stuff: empty user name and/or password field.
    $name = $form_state['values']['name'];
    $pass = $form_state['values']['pass'];
    $name_empty = empty($name);
    $pass_empty = empty($pass);
    if ($name_empty || $pass_empty) {
        if ($name_empty)
            form_set_error('name', 'Username field is required.');
        if ($pass_empty)
            form_set_error('pass', 'Password field is required.');
        return;
    }

    // Make sure the user hasn't been blocked.
    if (user_is_blocked($name)) {
        form_set_error('name', 'User account is blocked');
        return;
    }

    // Prevent flooding attacks from this IP address.
    $new_password_url = url('user/password');
    $new_password_text = 'request a new password';
    $new_password_link = "<a href='$new_password_url'>$new_password_text</a>";
    $try_later = "Please try again later or $new_password_link.";
    $attack_name = 'failed_login_attempt_ip';
    $limit = variable_get('user_failed_login_ip_limit', 50);
    $window = variable_get('user_failed_login_ip_window', 3600);
    if (!flood_is_allowed($attack_name, $limit, $window)) {
        $form_state['flood_control_triggered'] = 'ip';
        flood_register_event($attack_name, $window);
        $msg = 'Sorry, too many failed login attempts from this location.';
        form_set_error('name', "$msg $try_later.");
        return;
    }

    // Verify that this user name is valid.
    $pass = trim($pass);
    $uid = db_select('users', 'u')
        ->fields('u', array('uid'))
        ->condition('u.name', $name)
        ->execute()
        ->fetchField();
    $error = 'YOUR USERNAME AND/OR PASSWORD IS INCORRECT.<br />' .
        'Please try again (make sure your caps lock is off).';
    if (!$uid) {
        form_set_error('name', $error);
        watchdog('user', "Login attempt failed for $name.");
        return;
    }

    // Prevent flooding attacks for this account.
    if (variable_get('user_failed_login_identifier_uid_only', false))
        $identifier = $uid;
    else
        $identifier = $uid . '-' . ip_address();
    $form_state['flood_control_user_identifier'] = $identifier;
    $attack_name = 'failed_login_attempt_user';
    $limit = variable_get('user_failed_login_user_limit', 5);
    $window = variable_get('user_failed_login_user_window', 21600);
    if (!flood_is_allowed($attack_name, $limit, $window, $identifier)) {
        $form_state['flood_control_triggered'] = 'user';
        flood_register_event($attack_name, $window, $identifier);
        $msg = 'Sorry, too many failed login attempts for this account.';
        form_set_error('name', "$msg $try_later.");
        return;
    }

    // Validate password against the DB.
    $form_state['uid'] = user_authenticate($name, $pass);
    if (!$form_state['uid']) {
        form_set_error('name', $error);
        watchdog('user', "Login attempt failed for $name.");
        return;
    }

    // Clear flood control for this user.
    flood_clear_event($attack_name, $identifier);
}

/**
 * Record the login action and make sure the user is dropped on the home
 * page.  By the time we get here, the validation callback has already
 * taken care of actually logging the user in.
 */
function pdq_ebms_login_form_submit($form, &$form_state) {
    global $user;
    $user = user_load($form_state['uid']);
    $form_state['redirect'] = 'home';
    watchdog('user', "Session opened for {$user->name}.");

    $user->login = REQUEST_TIME;
    db_update('users')
        ->fields(array('login' => $user->login))
        ->condition('uid', $user->uid)
        ->execute();
    drupal_session_regenerate();
}

/**
 * Put up a page for requesting a new password.  This will only be
 * invoked by users without Javascript enabled.  Normally the form
 * will be displayed in a popup window hidden inside the login
 * page.
 */
function pdq_ebms_password() {
    return drupal_get_form('pdq_ebms_password_form');
}

/**
 * Ask the user what she has forgotten, and get her account's email address.
 */
function pdq_ebms_password_form() {
    return array(
            'forgot' => array(
                    '#type' => 'radios',
                    '#options' => array(
                            'username' => 'Username &nbsp; &nbsp;',
                            'password' => 'Password &nbsp; &nbsp;',
                            'both' => 'Both'),
                    '#title' => 'Forgot My',
            ),
            'email' => array(
                    '#type' => 'textfield',
                    '#suffix' => '<p>Please enter the email address associated with ' .
                    'your EBMS account.</p>',
            ),
            'submit' => array(
                    '#type' => 'submit',
                    '#value' => 'Submit',
            ),
    );
}

/**
 * Make sure the required fields have been taken care of, and that
 * the email address matches that of a current user.  On successful
 * validation, the account information will be loaded in the 'account'
 * value of the $form_state hash.
 */
function pdq_ebms_password_form_validate($form, &$form_state) {
    $address = $form_state['values']['email'];
    $form_state['account'] = null;
    $errors = 0;
    if (empty($form_state['values']['forgot'])) {
        form_set_error('forgot',
            'You must indicate which elements have been forgotten.');
        $errors++;
    }
    if (empty($address)) {
        form_set_error('email', 'Email address is required.');
        $errors++;
    } else {
        $account = user_load_by_mail($address);
        if (empty($account)) {
            form_set_error('email',
                'That email address is registered with no accounts.');
            $errors++;
        }
    }
    if (!$errors)
        $form_state['account'] = $account;
}

/**
 * Mail the user the information she has forgotten, replacing the old
 * password with a new one if the password was one of the things
 * forgotten.
 */
function pdq_ebms_password_form_submit($form, &$form_state) {
    global $language;
    $account = $form_state['account'];
    $forgot = $form_state['values']['forgot'];
    $subject = 'EBMS Account Information';
    $to = Ebms\Util::format_email_address($account->mail, $account->name);
    if ($forgot == 'username' || $forgot == 'both')
        $message = array("Your EBMS login name is {$account->name}.\n");
    if ($forgot == 'password' || $forgot == 'both') {
        $new_pw = user_password();
        $message[] = "Your new password is $new_pw.\n";
        $message[] = 'Please log in and change your password at your ';
        $message[] = "earliest convenience.\n";
        $user_id = $account->uid;
        user_save($account, array('pass' => $new_pw));
        $now = date('Y-m-d H:i:s');
        db_update('ebms_user')
            ->fields(array('password_changed' => $now))
            ->condition('user_id', $user_id)
            ->execute();
    }
    $message[] = url('login', array('absolute' => true)) . "\n";
    $message = array(implode($message));
    $params = array('body' => $message, 'subject' => $subject);
    $key = 'newpw';
    drupal_mail('ebms', $key, $to, $language, $params, Ebms\FROM);
    drupal_set_message('Further instructions have been mailed to you.');
    drupal_goto('login');
}

/**
 * Ajax callback to verify for the Javascript code that the email address
 * specified represents a valid, active account.
 */
function pdq_ebms_account_email_status() {
    $address = $_GET['email'];
    $name = 'nobody';
    $status = 'missing';
    if (!empty($address)) {
        $account = user_load_by_mail($address);
        if (!empty($account)) {
            if ($account->status != 1)
                $status = "blocked";
            else {
                $name = $account->name;
                $status = 'valid';
            }
        }
    }
    drupal_json_output(array('name' => $name, 'status' => $status));
}

/**
 * Our module's implementation of hook_mail().
 */
function ebms_mail($key, &$message, $params) {
    $message['subject'] = $params['subject'];
    $message['body'] = $params['body'];
    if (isset($params['reply-to']))
        $message['headers']['Reply-to'] = $params['reply-to'];
    if (isset($params['boundary'])) {
        $boundary = $params['boundary'];
        $message['headers']['MIME-Version'] = '1.0';
        $message['headers']['Content-Type'] =
            "multipart/alternative; boundary=\"$boundary\"";
        $message['headers']['Content-Transfer-Encoding'] = '8Bit';
        $message['headers']['X-Mailer'] = 'Drupal Mailer';
    }
}

/**
 * Custom page for pages the user isn't allowed to see.
 */
function pdq_ebms_403() {
    global $user;
    if (!user_is_logged_in()) {
        drupal_set_title('Please Log In');
        return drupal_get_form('pdq_ebms_login_form');
    }
    return '<p>Sorry, you are not authorized to visit this page.</p>';
}

/**
 * Message we show when a request comes in for a page that doesn't exist.
 */
function pdq_ebms_404() {
    global $user;
    if (!user_is_logged_in()) {
        drupal_set_title('Please Log In');
        return drupal_get_form('pdq_ebms_login_form');
    }
    return '<p>You have requested a page which does not exist.</p>';
}

/**
 * Register our callback to perform custom theming of the
 * data structures used to build our main menu and submenus.
 *
 * Implements hook_theme().
 */
function ebms_theme() {
    return array(
            'ebms_menu_item_list' => array(
                    'variables' => array(
                            'items' => array(),
                            'attributes' => array(),
                    ),
            ),
            'pdq_ebms_profile_email_form' => array(
                    'render element' => 'form',
            ),
    );
}

/**
 * Custom theming of the menu items.  Most of the work
 * is to enable the jQuery Superfish package to show
 * submenus dynamically.  This callback is registered
 * in ebms_theme() above.
 */
function theme_ebms_menu_item_list($variables) {
    $markup = array();
    $items = $variables['items'];
    if (!empty($items)) {
        if (!empty($variables['level']))
            $variables['attributes']['class'][] = 'ebms-submenu';
        $attributes = drupal_attributes($variables['attributes']);
        $num_items = count($items);
        $markup[] = "<ul$attributes>";
        foreach ($items as $i => $item) {
            $attributes = array();
            $children = array();
            $data = '';
            if (is_array($item)) {
                foreach ($item as $key => $value) {
                    switch ($key) {
                        case 'data':
                            $data = $value;
                            break;
                        case 'children':
                            $children = $value;
                            break;
                        default:
                            $attributes[$key] = $value;
                            break;
                    }
                }
            }
            else
                $data = $item;
            if (empty($variables['level'])) {
                $data .= '<div class="ebms-menu-left-divider"></div>';
                $data .= '<div class="ebms-menu-right-divider"></div>';
            }
            if (count($children) > 0) {
                $data .= '<div class="ebms-menu-border-blur"></div>';
                $data .= '<div class="ebms-menu-restore-pixel"></div>';
                $data .= theme_ebms_menu_item_list(
                    array(
                            'items' => $children,
                            'attributes' => $attributes,
                            'level' => 'child',
                    )
                );
            }
            if ($i == 0)
                $attributes['class'][] = 'first';
            if ($i == $num_items - 1)
                $attributes['class'][] = 'last';
            $attributes = drupal_attributes($attributes);
            $markup[] = "<li$attributes>$data</li>";
        }
        $markup[] = "</ul>";
    }
    $markup = implode($markup);
    return $markup;
}

/**
 * Populate the ebms_menu block.  See note above in the
 * comments for our implementation of hook_menu about
 * why we do this.
 */
function ebms_page_build(&$page) {
    $menus = Ebms\Menu::menus();
    $items = array();
    foreach ($menus as $m) $items[] = $m->render_array();
    $page['ebms_menu'] = array(
            '#attributes' => array(
                    'class' => array('sf-menu'),
                    'id' => 'ebms-menu',
            ),
            '#theme' => 'ebms_menu_item_list',
            '#items' => $items,
    );
}

/**
 * Load the libraries we'll need for advanced display
 * functionality, and populate the $user object with
 * information specific to the EBMS (i.e., board and
 * subgroup membership).
 *
 * Implementation of hook_init().
 */
function ebms_init() {
    global $user;
    if (!user_is_logged_in() && $_GET['q'] != 'login') {
        if (!function_exists('drush_main'))
            drupal_goto('login');
    }

    $sflib = libraries_get_path('superfish');
    drupal_add_js("$sflib/superfish.js");
    drupal_add_js("$sflib/supersubs.js");
    drupal_add_js(Ebms\JS_DIR . '/ebms.js');
    drupal_add_css("$sflib/css/superfish.css");

    // Going for the side effect of bringing the cycle table up to date.
    $default_cycle = Ebms\Util::get_default_cycle();

    if ($user->uid) {

        // $user->ebms_boards
        $result = db_select('ebms_board_member', 'm')
            ->fields('m', array('board_id'))
            ->condition('m.user_id', $user->uid)
            ->execute();
        $user->ebms_boards = array();
        foreach ($result as $record) $user->ebms_boards[] = $record->board_id;

        // $user->ebms_subgroups
        $result = db_select('ebms_subgroup_member', 'm')
            ->fields('m', array('sg_id'))
            ->condition('m.user_id', $user->uid)
            ->execute();
        $user->ebms_subgroups = array();
        foreach ($result as $record) $user->ebms_subgroups[] = $record->sg_id;

        // $user->ebms_ad_hoc_groups
        $result = db_select('ebms_ad_hoc_group_member', 'm')
            ->fields('m', array('group_id'))
            ->condition('m.user_id', $user->uid)
            ->execute();
        $user->ebms_ad_hoc_groups = array();
        foreach ($result as $record)
                $user->ebms_ad_hoc_groups[] = $record->group_id;
    }
}

/**
 * Add EBMS-specific information to the $user objects.  Implements
 * hook_user_load().  WARNING: The Drupal documentation doesn't say
 * this, but this hook isn't used when loading the global $user object.
 * It only happens when user_load($uid) is invoked directly!
 */
function ebms_user_load($users) {
    foreach ($users as $uid => $user) {
        $users[$uid]->password_changed = null;
        $results = db_select('ebms_board_member', 'm')
            ->fields('m', array('board_id'))
            ->condition('m.user_id', $uid)
            ->execute();
        $boards = array();
        foreach ($results as $result) $boards[] = $result->board_id;
        $users[$uid]->boards = $boards;

        $sgresults = db_select('ebms_subgroup_member', 'm')
            ->fields('m', array('sg_id'))
            ->condition('m.user_id', $uid)
            ->execute();
        $subgroups = array();
        foreach ($sgresults as $sgresult) $subgroups[] = $sgresult->sg_id;
        $users[$uid]->subgroups = $subgroups;

        $ahgresults = db_select('ebms_ad_hoc_group_member', 'm')
            ->fields('m', array('group_id'))
            ->condition('m.user_id', $uid)
            ->execute();
        $adhocgroups = array();
        foreach ($ahgresults as $ahgresult)
                $adhocgroups[] = $ahgresult->group_id;
        $users[$uid]->adhocgroups = $adhocgroups;
    }
    $results = db_select('ebms_user', 'u')
        ->fields('u', array('user_id', 'password_changed'))
        ->condition('u.user_id', array_keys($users), 'IN')
        ->execute();
    foreach ($results as $record)
            $users[$record->user_id]->password_changed = $record->password_changed;
}

/**
 * Added to restrict access to full text retrieval queue to Bonnie (see
 * bug report #2128).
 */
function pdq_ebms_is_admin_assistant() {
    global $user;
    return in_array('admin assistant', $user->roles);
}

/**
 * Syncs up the ebms_journal table with the latest information at the
 * National Library of Medicine.
 */
function pdq_ebms_refresh_journals() {
    $result = Ebms\Journal::refresh();
    $report = array();
    foreach ($result as $action => $count)
            $report[] = "$count journals $action";
    drupal_set_message('Refreshed: ' .
        variable_get('ebms_journals_refreshed'));
    return '<p>' . implode('; ', $report) . '</p>';
}

/**
 * Write debugging information to a file in the /tmp directory.  Only
 * does anything on the development and QA system.  Each log entry is
 * date/time stamped.
 *
 *  @param  string  $where  Label used at the top of the debug log
 *                          entry
 *  @param  any     $what   Arbitrary value, possibly an object or
 *                          structured array, to be dumped as part
 *                          of the log entry in human-readable format
 */
function pdq_ebms_debug($where, $what) {
    if (Ebms\DEV || Ebms\QA) {
        $now = date('c');
        file_put_contents(
            '/tmp/ebms.debug', "$now $where\n" . print_r($what, TRUE) . "\n",
            FILE_APPEND);
        drupal_chmod('/tmp/ebms.debug', 0644);
    }
}

function ebms_node_info() {
    global $ebms_event_nodes;

    $nodes = array();

    $nodes += $ebms_event_nodes;

    return $nodes;
}

/**
 * Implements hook_views_api().
 */
function ebms_views_api() {
    return array('api' => 2.0);
}

/**
 * Implementation of the Views query alter hook.
 *
 * @param type $view  The view object about to be processed.
 * @param type $query An object describing the query.
 */
function ebms_views_query_alter(&$view, &$query) {
    switch ($view->name) {
        case 'event_calendar':
        case 'recent_activity': //Using the same function - same functionality   
            require_once 'calendar.inc';
            _calendar_query_alter($view, $query);
            break;
    }
}

function ebms_form_node_form_alter(&$form, &$form_state, $form_id) {
    if ($form_id == 'ebms_event_node_form') {
        require_once 'calendar.inc';
        calendar_node_form_alter($form, $form_state);
        return;
    }
}

/**
 * Allowed values callback function for the EBMS Board Field.
 * 
 * @param type $field The field this is controlling.
 */
function ebms_board_allowed_values_callback($field) {
    // This leverages the existing dictionary of Boards as return by the Util static function.
    $boards = Ebms\Util::boards();
    return $boards;
}

/**
 * Allowed values callback function for the EBMS Subgroup Field.
 * 
 * @param type $field The field this is controlling.
 */
function ebms_subgroup_allowed_values_callback($field) {
    $results = db_select('ebms_subgroup', 'sg')
        ->fields('sg', array('sg_id', 'sg_name'))
        ->orderBy('sg.sg_name')
        ->execute();
    $subgroups = array();
    foreach ($results as $result) $subgroups[$result->sg_id] = $result->sg_name;
    return $subgroups;
}

/**
 * Allowed values callback function for the EBMS Ad-Hoc Group Field.
 * 
 * @param type $field The field this is controlling.
 */
function ebms_ad_hoc_group_allowed_values_callback($field) {
    $results = db_select('ebms_ad_hoc_group', 'g')
        ->fields('g', array('group_id', 'group_name'))
        ->orderBy('g.group_name')
        ->execute();
    $groups = array();
    foreach ($results as $result)
            $groups[$result->group_id] = $result->group_name;
    return $groups;
}

/**
 * Allowed values callback function for the EBMS Individuals Field.
 * 
 * @param type $field The field this is controlling.
 */
function ebms_individuals_allowed_values_callback($field) {

    // collect all non-anonymous users
    // TODO: prevent other roles from appearing as well?
    $roles = array();
    $roles[] = user_role_load_by_name('anonymous user')->rid;
    $roles[] = user_role_load_by_name('administrator')->rid;
    $roleResult = db_select('users_roles', 'ur')
            ->fields('ur', array('uid'))
            ->condition('rid', $roles, 'NOT IN')
            ->execute()->fetchCol();

    // use the UIDs to limit the query
    $query = new EntityFieldQuery();
    $uidResult = $query->entityCondition('entity_type', 'user')
        ->propertyCondition('status', '1')
        ->propertyCondition('uid', $roleResult)
        ->execute();

    if (isset($uidResult['user'])) {
        $users = user_load_multiple(array_keys($uidResult['user']));

        $userOptions = array();
        foreach ($users as $key => $user) {
            $userOptions[$key] = $user->name;
        }

        return $userOptions;
    }

    return array();
}

/**
 * Implementation of hook_node_presave.  Triggers appropriate recent activity
 * messages based on changes to event nodes.
 * 
 * @param node $node the node about to be saved
 */
function ebms_node_presave($node) {
    if ($node->type == 'ebms_event') {
        // if the node is published and either is new or was previously
        // unpublished
        if ($node->status && ($node->is_new || !$node->original->status)) {
            // note the publish activity
            \Ebms\Util::activityEventPublished($node);
        }

        // vice versa, if the node is not new and was previously published
        else if (!$node->status && !$node->is_new && $node->original->status) {
            // note the unpublish activity
            \Ebms\Util::activityEventCancelled($node);
        }

        // if the node is not new and the time has changed
        if (!$node->is_new && $node->status && $node->original->status) {
            // compare the two dates
            $origDate = field_get_items('node', $node->original,
                'field_datespan');
            $currentDate = field_get_items('node', $node, 'field_datespan');

            $diff = array_diff($origDate[0], $currentDate[0]);

            if (!empty($diff))
                \Ebms\Util::activityEventChanged($node);
        }
    }
}

function ebms_date_formats() {
    return array(
            array(
                    'format' => 'F j, Y',
                    'type' => 'ebms_date',
                    'locales' => array(),
            ),
            array(
                    'format' => 'g:i A',
                    'type' => 'ebms_time',
                    'locale' => array(),
            )
    );
}

function ebms_date_format_types() {
    $format_type = array();
    $format_type['ebms_date'] = t('Date Only');
    $format_type['ebms_time'] = t('Time Only');

    return $format_type;
}

function ebms_query_event_filter_alter(SelectQuery $query) {
    global $user;
    $account = user_load($user->uid);

    //If the user is UID 1 or an EBMS administrator, there is no filtering of
    //events
    if (user_access("administer ebms"))
        return;

    //Determine if we should show all board meetings or not
    $filter_boards = true;

    if (user_access("view all events")) {
        $filter_boards = false;
    }

    //Initialize an OR conditional for selects
    $or_conditions = db_or();

    //Boards:
    if (!$filter_boards || $account->boards) {
        //Add table to query
        $query->leftJoin('field_data_field_boards', 'b',
            'node.nid = b.entity_id AND b.bundle = :event AND b.deleted = 0',
            array(':event' => "ebms_event"));

        //Add where condition
        if (!$filter_boards) {
            $or_conditions->condition('b.field_boards_value', '', 'IS NOT NULL');
        } else {
            $or_conditions->condition('b.field_boards_value', $account->boards,
                'IN');
        }
    }

    //Subgroups:
    if ($account->subgroups) {
        //Add table to query
        $query->leftJoin('field_data_field_subgroups', 's',
            'node.nid = s.entity_id AND s.bundle = :event AND s.deleted = 0',
            array(':event' => "ebms_event"));

        //Add where condition
        $or_conditions->condition('s.field_subgroups_value',
            $account->subgroups, 'IN');
    }
    //Ad hoc groups:
    if ($account->adhocgroups) {
        //Add table to query
        $query->leftJoin('field_data_field_ad_hoc_groups', 'g',
            'node.nid = g.entity_id AND g.bundle = :event AND g.deleted = 0',
            array(':event' => "ebms_event"));

        //Add where condition
        $or_conditions->condition('g.field_ad_hoc_groups_value',
            $account->adhocgroups, 'IN');
    }

    //Individual Users:
    //Add table to query
    $query->leftJoin('field_data_field_individuals', 'i',
        'node.nid = i.entity_id AND i.bundle = :event AND i.deleted = 0',
        array(':event' => "ebms_event"));

    //Add where condition
    $or_conditions->condition('i.field_individuals_value', array($user->uid),
        'IN'); //Note the use of array here.  IN must have an array

    $query->condition($or_conditions);
}

 function ebms_calendar_event_validate($form, &$form_state) {
    // retrieve value of each timestamp
    $startValue = $form_state['values']['field_datespan']['und']['0']['value'];
    $endValue = $form_state['values']['field_datespan']['und']['0']['value2'];

    $startSplit = explode(' ', $startValue);
    $endSplit = explode(' ', $endValue);

    if (sizeof($startSplit) > 1)
        $startDate = $startSplit[0];
    else $startDate = date('Ymd', $startValue);
    if (sizeof($endSplit) > 1)
        $endDate = $endSplit[0];
    else $endDate = date('Ymd', $endValue);

    if ($startDate != $endDate)
        form_set_error('field_datespan',
            'Please ensure that the event is scheduled for a single day only.');
}

function ebms_redirect_handler($form, &$form_state) {
    // if the user won't be able to view the node after saving...
    $node = $form_state['node'];
    global $user;
    if (!user_access('bypass content access control') &&
        $node->status == 0 && $node->uid != $user->uid) {
        if ($node->type == 'ebms_event') {
            $form_state['redirect'] = 'calendar';
        } else {
            $form_state['redirect'] = '/';
        }
    }
}

function ebms_date_combo_process_alter(&$element, &$form_state, $context){
    $element['value']['#title'] = 'from:';
}