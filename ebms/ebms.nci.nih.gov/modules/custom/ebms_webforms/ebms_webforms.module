<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
module_load_include('inc', 'webform', 'components/select');


/**
* Implements hook_menu().
*/
function ebms_webforms_menu() {
 $items['add/%ctools_js/review'] = array(
   'page callback'    => 'ebms_webforms_ctools_modal_review',
   'page arguments'   => array(1),
     'access callback' => TRUE,
      'type' => MENU_NORMAL_ITEM,
 );
 return $items;
}

function ebms_webforms_menu_alter(&$items) {
    // We're going to override the page that generates the results.
    // This is not the cleanest way of doing it, but it works.
    $report_menu = 'node/%webform_menu/webform-results/table';
    $permission = 'access all webform results';
    $items[$report_menu]['page callback'] = '_ebms_webforms_results_table';
    $items[$report_menu]['file'] = '';

    // Prevent board members from seeing this on their left-nav menu
    // (TIR 2392).
    $items[$report_menu]['access callback'] = 'user_access';
    $items[$report_menu]['access arguments'] = array($permission);
}

function pdq_ebms_empty_travel_field($values) {
    foreach ($values as $value) {
        if (!empty($value['expense']) || !empty($value['mileage']))
            return false;
    }
    return true;
}

/**
 * Implements hook_webform_submission_render_alter for critical TIR
 * 2408, in which Robin asks that the email notification for a web
 * form submission show the name and date for the event instead of
 * the event's ID.
 *
 * OCEEBMS-116: Victoria wants more blank lines in the email message,
 * so we're adding an extra new line to the values for the Meeting
 * and the Type of Travel fields. Unfortunately, this pushes the
 * values for these fields onto a separate line from the label (the
 * webforms module appears to have decided that if we want a newline
 * at the end of the value we want one at the beginning, too). Best
 * we can do.
 */
function ebms_webforms_webform_submission_render_alter(&$renderable) {
    if (!empty($renderable['meeting'])) {
        $meeting_id = $renderable['meeting']['#value'][0];
        if ($meeting_id) {
            $display = _ebms_webform_meeting_display($meeting_id);
            $renderable['meeting']['#value'][0] = trim($display) . "\n";
        }
    }
    if (!empty($renderable['type_of_travel'])) {
        foreach ($renderable['type_of_travel']['#options'] as $k => $v)
            $renderable['type_of_travel']['#options'][$k] = "$v\n";
    }
    foreach (element_children($renderable) as $key) {
        //textfields
        if ($renderable[$key]['#value'] == '')
            unset($renderable[$key]);
        //select lists, checkboxes, etc.
        elseif ($key == 'transportation' || $key == 'parking_and_tolls') {
            if (pdq_ebms_empty_travel_field($renderable[$key]['#value']))
                unset($renderable[$key]);
        }
        elseif (is_array($renderable[$key]['#value'])) {
            if (empty($renderable[$key]['#value']) || empty($renderable[$key]['#value'][0]))
                unset($renderable[$key]);
        }
    }
}

/**
 * Implements hook_form_alter().
 *
 *
 * @TODO: In the future - should really create a field type for meetings...
 * Find form_key from cid and add JS.
 */
function ebms_webforms_form_alter(&$form, &$form_state, $form_id) {
  if (substr($form_id, 0, 19) != 'webform_client_form') {
        return;
    }
    $event_block = _ebms_travel_get_meeting_block($form);

    //add js file for show/hide.
    $css_path = drupal_get_path('module', 'ebms_webforms');
    $css_path .= "/includes/ebms_webform.css";
    drupal_add_css($css_path, array('type' => 'file'));
    $js_path = drupal_get_path('module', 'ebms_webforms');
    $js_path .= "/includes/ebms_webform.js";
    drupal_add_js($js_path, array('type' => 'file'));

    $form['preview'] = array(
        '#type' => 'submit',
        '#value' => 'Preview',
        '#submit' => array('preview_submission'),
        '#ajax' => array(
            'callback' => 'preview_submission',
            'wrapper' => 'preview-area',
            'method' => 'replace',
            'effect' => 'fade',
        )
    );

    $form['preview-container'] = array(
        '#prefix' => '<div id="preview-area">',
        '#suffix' => '</div>',
    );
    //check to see if this webform has a meeting select - if it does, populate it.
    ////"MUST BE NAMED MEETING".
    //@TODO: In the future - should really create a field type for meetings...
    if (is_array($form['submitted']) && array_key_exists('meeting',
            $form['submitted'])) {
        //test
        $view = views_get_view('event_calendar');
        if (!$view || !$view->access($event_block)) {
            return;
        }
        $view->preview($event_block, array());

        //Remove the placeholder option from the options list.
        array_pop($form['submitted']['meeting']['#options']);

        //add the available meetings for the current user.
        foreach ($view->result as $meeting) {
            $node = node_load($meeting->nid);
            $meeting_types = field_get_items('node', $node, 'field_event_type');
            $meeting_type = $meeting_types[0]['value'];
            if ($meeting_type == 'in_person') {
                $dates = field_get_items('node', $node, 'field_datespan');
                $start = $dates[0]['value'];
                $date = date('m/d/Y', $start);
                $title = "$meeting->node_title - $date";
                $form['submitted']['meeting']['#options'][$meeting->nid] = $title;
            }
        }

        if(empty($form['submitted']['meeting']['#options'])){
            $form['submitted']['meeting']['#empty_value'] = 0;
            $form['submitted']['meeting']['#empty_option'] = t('No available meetings');
        }
    }

    // toggle the mileage visibility appropriately
    if(isset($form_state['input']['submitted']['transportation'])) {
        foreach($form_state['input']['submitted']['transportation'] as
            $element => $value) {
            if(isset($value[0]['type'])) {
                foreach($value as $index => $value_set) {
                    $type_value = $value_set['type'];

                    $mileage_access = $type_value == 'private';

                    $form['submitted']['transportation'][$element]
                        [$index]['mileage']['#access'] = $mileage_access;
                    $form['submitted']['transportation'][$element]
                        [$index]['expense']['#access'] = !$mileage_access;
                }
            }
        }
    }

    // Add validation routine (OCEEBMS-6).
    $form['#validate'][] = 'ebms_webforms_form_validate';
}

// Validation added for JIRA ticket OCEEBMS-6 (TIR 2374).
function ebms_webforms_form_validate($form, &$form_state) {
    if (isset($form_state['values']['submitted']['check_in'])) {
        $check_in = $form_state['values']['submitted']['check_in'];
        $check_out = $form_state['values']['submitted']['check_out'];
        $in = Ebms\Util::fill_in_date($check_in);
        $out = Ebms\Util::fill_in_date($check_out);
        if ($out > '1901' && $in > $out)
            form_set_error('check_out',
                'Check-out cannont be earlier than check-in.');
    }
}

/**
 *Ajax callback for the preview button on webforms.
 *
 * @TODO: make sure this works for other field types.
 * @TODO: Make this into a component and hook for field views.
 * @param type $form
 * @param type $form_state
 * @return type
 */
 function preview_submission($form, $form_state){
     //load up select option values from the field definitions:


     //go through the webform components and get out our custom fields.
     $custom_fields = array();
     $select_fields = array();
     $file_fields = array();
     foreach($form_state['webform']['component_tree']['children'] as $component){
         if($component['type'] == 'ebms_travel'){
             //get the cid to access sub-array.
             $custom_fields[$component['form_key']] = $component['cid'];
             //take care of the select field.
              $keypairs = explode("\n",$component['extra']['items']);
                $options = array();
                foreach ($keypairs as $keypair) {
                    $tmp = explode('|', $keypair);
                    $options[$tmp[0]] = $tmp[1];
                }
                $select_fields[$component['form_key']] = $options;
         }
         //if the component is a select component - we want to get its
         //key-value pairs
         else if($component['type'] == 'select'){
            $keypairs = explode("\n",$component['extra']['items']);
            $options = array();
            foreach ($keypairs as $keypair) {
                $tmp = explode('|', $keypair);
                $options[$tmp[0]] = $tmp[1];
            }
            $select_fields[$component['form_key']] = $options;
         }
         //Take care of file fields
         else if($component['type'] == 'file'){
             $file_fields[$component['form_key']] = 'The '.$component['name'].' file have been uploaded.';
         }
         //else if ($component['type'] == 'date'){
         //    $test = $component;
         //    $date_fields[$component['form_key']] =
         //}

     }

     $output = array();
     //create the preview - shouldn't need to do anything special for regular fields.
     foreach($form_state['values']['submitted'] as $key => $sub_item){



         if(!is_array($sub_item) && !empty($sub_item)){
              $output[]='<strong>'.strtoupper($key).'</strong>';

              // Display meeting as event title - start date (TIR 2367).
              if ($key == 'meeting')
                  $output[] = _ebms_webform_meeting_display($sub_item);

              //take care of select types.
              elseif(!empty($select_fields[$key])){

                 $output[] = $select_fields[$key][$sub_item];
             }
             //take care of file fields
             else if(!empty($file_fields[$key])){
                 $output[] = $file_fields[$key];
             }
             //default
             else {
                 if ($key == 'amount' && ctype_digit(substr($sub_item, 0, 1)))
                     $output[] = '$' . $sub_item;
                 else
                     $output[] = $sub_item;
             }

         }
         //this is one of our custom fields.
         else if(array_key_exists ($key, $custom_fields) ) {
             $output[]='<strong>'.strtoupper($key).'</strong>';
             $cid = $custom_fields[$key];
             $field_name = 'ebms-travel-'.$cid.'-fieldset';
             foreach($sub_item[$field_name] as $ebms_travel_field){
                 //the ebms_travel field has 3 fields: Date, Select, Text

                 // branch on type
                 $claim = '';
                 if($ebms_travel_field['type'] == 'private') {
                     $claim = trim($ebms_travel_field['mileage']);
                     if (empty($claim))
                         continue;
                     if (ctype_digit(substr($claim, -1)))
                         $claim .= ' miles';
                 }
                 else {
                     $claim = trim($ebms_travel_field['expense']);
                     if (empty($claim))
                         continue;
                     if (ctype_digit(substr($claim, 0, 1)))
                         $claim = '$' . $claim;
                 }
                 $output[] = $select_fields[$key][$ebms_travel_field['type']] .' - '. implode('/',$ebms_travel_field['date']) . " - $claim";
             }
         }
         //Date fields are arrays...
         else if(is_array($sub_item) && array_key_exists('month', $sub_item) &&
                 !empty($sub_item['month']) &&
                 !empty($sub_item['day']) &&
                 !empty($sub_item['year'])){
             $output[]='<strong>'.strtoupper($key).'</strong>';
             $output[] = $sub_item['month'].'/'.$sub_item['day'].'/'.$sub_item['year'];
         }
     }

     $value = implode('<br />', $output);
     $form['preview-container']=array(
       '#prefix'=>'<div id="preview-area">',
         '#markup' => filter_xss_admin($value),
       '#suffix'=>'</div>',
   );

     return $form['preview-container'];
 }

 function _ebms_travel_get_meeting_block($form){
         // Determine if it's one of our special reports via URL
    if (isset($form['#node']->nid)) {
        $isReimbursementRequest = url('node/' . $form['#node']->nid) == '/travel/reimbursement-request';
        $isHotelRequest = url('node/' . $form['#node']->nid) == '/travel/hotel-request';
    } else {
        // This is actually most likely NOT true, but 'nid' doesn't exist when
        // there are no results, I think, so it SHOULDN'T matter.
        $isReimbursementRequest = FALSE;
        $isHotelRequest = FALSE;
    }

    $event_block = 'block_past';
    if($isHotelRequest)
        $event_block = 'block_inperson_upcoming';

    return $event_block;
 }

 function _ebms_travel_get_meetings($event_block){
    $view = views_get_view('event_calendar');
    if (!$view || !$view->access($event_block)) {
        return;
    }
    $view->preview($event_block, array());

    //add the available meetings for the current user.
    $pair = array();
    foreach($view->result as $meeting) {
        $pair[$meeting->nid] = $meeting->node_title;
    }
    return $pair;
 }

/**
* Page callback for modal review creation.
*/
function ebms_webforms_ctools_modal_review($js = FALSE) {

  $output = '<h1>' . t('Hello World') . '</h1>';

  if ($js) {
    ctools_include('ajax');
    ctools_include('modal');
    return ctools_modal_render($output); // this function exits.
//    exit;
  }
  else {
    return $output;
  }
}

/**
* Implements hook_webform_component_info().
*
* Creates a new (compound) component webform datatype for
* EBMS travel expenses reimbursement.
*/
function ebms_webforms_webform_component_info() {
    $components = array();
    $components['ebms_travel'] = array(
    'label' => t('EBMS Travel'),
    'description' => t('EBMS Travel Form.'),
    'features' => array(
        'csv' => TRUE,
        'email' => TRUE,
        'email_address' => FALSE,
        'email_name' => FALSE,
        'required' => TRUE,
        'conditional' => TRUE,
        'title_display' => TRUE,
        'title_inline' => TRUE,
        'private' => TRUE,
        'group' => FALSE,
        'spam_analysis' => FALSE,
        'attachment' => FALSE,
        ),
    );
    return $components;
}

/**
* Implements _webform_defaults_component().
*
* Provides information used in constructing the GUI form for
* administering an instance of the new ebms_travel component in
* an instance of a webform definition.
*/
function _webform_defaults_ebms_travel() {
    return array(
    'name' => '',
    'form_key' => NULL,
    'pid' => 0,
    'weight' => 0,
    'value' => '',
    'mandatory' => TRUE,
    'extra' => array(
        'items' => '',
        'size' => '',
        'maxlength' => '250',
        'disabled' => 0,
        'unique' => FALSE,
        'title_display' => 0,
        'date_description' => t('Please select the date on which this expense occured.'),
        'select_description' => t('Please select an option from the list above.'),
        'text_description' => t('Please enter the cost of the expense. Please submit a receipt for any expense over $75.00.'),
        'text_prefix', t(''),
        'attributes' => array(),
        'private' => FALSE,
        'choices' => '10',
        'num_trans' => '1',
        //add this to make the default webform select validator happy.
        'options_source' => '',

        ),
    );
}
/**
* Implements _webform_edit_component().
*
* Creates the form that lets an administrator configure an
* instance of our ebms_travel component.
*/
function _webform_edit_ebms_travel($component) {
    $form = array();

    $form['display']['size'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#default_value' => $component['extra']['size'],
    '#description' => t('Width of the textfield.') . ' ' . t('Leaving blank will use the default size.'),
    '#size' => 5,
    '#maxlength' => 10,
    '#weight' => 0,
    '#parents' => array('extra', 'size'),
    );
    $form['validation']['unique'] = array(
    '#type' => 'checkbox',
    '#title' => t('Unique'),
    '#return_value' => 1,
    '#description' => t('Check that all entered values for this field are unique. The same value is not allowed to be used twice.'),
    '#weight' => 1,
    '#default_value' => $component['extra']['unique'],
    '#parents' => array('extra', 'unique'),
    );
    $form['validation']['maxlength'] = array(
    '#type' => 'textfield',
    '#title' => t('Maxlength'),
    '#default_value' => $component['extra']['maxlength'],
    '#description' => t('Maximum length of the textfield value.'),
    '#size' => 5,
    '#maxlength' => 10,
    '#weight' => 2,
    '#parents' => array('extra', 'maxlength'),
    );
    $form['validation']['num_trans'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of Transporation Forms to show by default'),
    '#default_value' => $component['extra']['num_trans'],
    '#description' => t('Maximum length of the textfield value.'),
    '#size' => 5,
    '#maxlength' => 10,
    '#weight' => 2,
    '#parents' => array('extra', 'maxlength'),
    );
    $form['extra']['items'] = array(
      '#type' => 'textarea',
      '#title' => t('Options'),
      '#default_value' => $component['extra']['items'],
      '#description' => t('<strong>Key-value pairs MUST be specified as "safe_key|Some readable option"</strong>. Use of only alphanumeric characters and underscores is recommended in keys. One option per line. Option groups may be specified with &lt;Group Name&gt;. &lt;&gt; can be used to insert items at the root of the menu after specifying a group.') . theme('webform_token_help'),
      '#cols' => 60,
      '#rows' => 5,
      '#weight' => 0,
      '#required' => TRUE,
      '#wysiwyg' => FALSE,
      '#element_validate' => array('_webform_edit_validate_select'),
    );
    $form['extra']['date_description'] = array(
      '#type' => 'textfield',
      '#title' => t('Date Description'),
      '#default_value' => $component['extra']['date_description'],
      '#description' => t(''),
      '#size' => 100,
    '#maxlength' => 250,
    '#weight' => 2,
    );
    $form['extra']['select_description'] = array(
      '#type' => 'textfield',
      '#title' => t('Select Description'),
      '#default_value' => $component['extra']['select_description'],
      '#description' => t(''),
      '#size' => 100,
    '#maxlength' => 250,
    '#weight' => 2,
    );
    $form['extra']['text_description'] = array(
      '#type' => 'textfield',
      '#title' => t('Text Description'),
      '#default_value' => $component['extra']['text_description'],
      '#description' => t(''),
     '#size' => 100,
     '#maxlength' => 250,
     '#weight' => 2,
    );
    $form['extra']['text_prefix'] = array(
      '#type' => 'textfield',
      '#title' => t('Text Prefix'),
      '#default_value' => $component['extra']['text_description'],
      '#description' => t('Please enter a prefix for this field if one is required. ie. $'),
     '#size' => 10,
     '#maxlength' => 250,
     '#weight' => 2,
    );
    return $form;
}



/**
 * Implements _webform_submission_presave()
 *
 * Because we 1) added dynamic form elements and 2) have a compound field and all of the
 * data is going to be stored in a single key value pair in the database - we need to
 * serialize the data so that it can stored and accessed easily.
 *
 * TODO:
 * 1) Serialize the data
 * 2) Ensure it is saved correctly
 *
 * Nice to Haves (should be implemented in the future)
 * 1) Make this field type generic.
 * @param type $node
 * @param type $submission
 */
function ebms_webforms_webform_submission_presave($node, &$submission) {
  $data = $submission;

  //Incase we have several of these types of fields we should take care of
  //all of them here.
  foreach($submission->data as $index => $value){
      //$value = $value_arr['value'];
      if(!empty($value) && count($value) > 1){
          //we only want to serialize the first part of the array, the second part are the buttons.
          $serial = serialize(array_shift($value));
          $submission->data[$index] = array($serial);
      }
  }





}

/**
 * Render a Webform component to be part of a form.  Implements a hook
 * with a very strange name.  See http://drupalcontrib.org/api/drupal/contributions!webform!webform.api.php/function/_webform_render_component/7
 *
 * Defines the subfields for this component that appear on the travel
 * reimbursement form shown to the Board Member.
 */
function _webform_render_ebms_travel($component, $value=NULL, $filter=TRUE) {

  //If this is an edit for, unserialize the value.
  $count = 0;
  $val_array = array();
  if (is_array($value)) {
    $val_array = unserialize($value[0]);
    $count = count($val_array);
  }

  $options = _webform_select_options($component, false, $filter);
  $id = 'ebms-travel-'.$component['cid'];
  $fieldset = $id.'-fieldset';

  //Setup a fieldet that we will be adding dynamic fields too.
  $form[$fieldset] = array(
    '#type' => 'fieldset',
    '#title' => $component['name'],
    // Set up the wrapper so that AJAX can replace the fieldset.
    '#prefix' => '<div id="'.$id.'-fieldset-wrapper">',
    '#suffix' => '</div>',
  );

  // If we don't do this, webforms divides our weights by 1000!
  $form['#weight'] = $component['weight'];

  // Build the fieldset with the proper number of names. We'll use
  // $form_state['num_names'] to determine the number of textfields to build.
  if (empty($component['extra']['num_trans'])) {
    $component['extra']['num_trans'] = 1;
  }
  else if($count){
       $component['extra']['num_trans'] = $count;
  }
  for ($i = 0; $i < $component['extra']['num_trans']; $i++) {
      $val = '';
      if(count($val_array) > $i)
      {
          $val = $val_array[$i];
      }
    $form[$fieldset][$i]['date'] = array(
        '#type' => 'date-popup',
        '#datepicker' => 1,
        '#theme' => 'webform_date',
        '#start_date' => '-2 years',
        '#end_date' => '+1 years',
        '#process' => array('webform_expand_date'),
        '#timezone' => 'site',
        '#year_textfield' => 0,
        '#title' => 'Date of Expense',
        '#title_display' => $component['extra']['title_display'] ? $component['extra']['title_display'] : 'before',
        '#default_value' => $val ? $val['date'] : $component['value'],
        '#required' => $component['mandatory'],
        '#weight' => $component['weight']-1,
        '#description' => $filter ? _webform_filter_descriptions($component['extra']['date_description']) : $component['extra']['date_description'],
        '#attributes' => $component['extra']['attributes'],
        '#theme_wrappers' => array('webform_element'),
        '#webform_component' => $component,
        '#multiple' => false,
    );
    $form[$fieldset][$i]['type'] = array(
        '#type' => 'select',
        '#title' => 'Expense Type',
        '#default_value' => $val ? $val['type'] : $component['value'],
        '#required' => $component['mandatory'],
        '#weight' => $component['weight']-1 ,
        '#description' => $filter ? _webform_filter_descriptions($component['extra']['select_description']) : $component['extra']['select_description'],
        '#attributes' => $component['extra']['attributes'],
        '#theme_wrappers' => array('webform_element'),
        '#webform_component' => $component,
        '#multiple' => false,   // Set the component options.
        '#options' => $options,
    );
    $form[$fieldset][$i]['expense'] = array(
       '#type' => 'textfield',
        '#title' => 'Amount',
        '#title_display' => $component['extra']['title_display'] ? $component['extra']['title_display'] : 'before',
        '#default_value' => $val ? $val['expense'] : $component['value'],
        '#required' => $component['mandatory'],
        '#weight' => $component['weight']+1,
        '#description' => $filter ? _webform_filter_descriptions($component['extra']['text_description']) : $component['extra']['text_description'],
        '#attributes' => $component['extra']['attributes'],
        '#theme_wrappers' => array('webform_element'),
        '#webform_component' => $component,
        '#multiple' => false,
        //'#field_prefix'=> $component['extra']['text_prefix'] ?$component['extra']['text_prefix'] : '' ,
        '#access' => TRUE,
    );
    if($component['form_key'] == 'transportation'){
        $form[$fieldset][$i]['type']['#ajax'] = array(
            'callback' => 'ebms_webforms_travel_type_select',
            'wrapper' => $id . '-fieldset-wrapper',
            'instance' => $component['cid'],
            'callback_val' => $id . '-fieldset',
        );

        $form[$fieldset][$i]['mileage'] = array(
           '#type' => 'textfield',
            '#title' => 'Mileage',
            '#title_display' => $component['extra']['title_display'] ? $component['extra']['title_display'] : 'before',
            '#default_value' => $val ? $val['mileage'] : $component['value'],
            '#required' => $component['mandatory'],
            '#weight' => $component['weight']+2,
            '#description' => 'Please enter the mileage driven.',//$filter ? _webform_filter_descriptions($component['extra']['text_description']) : $component['extra']['text_description'],
            '#attributes' => $component['extra']['attributes'],
            '#theme_wrappers' => array('webform_element'),
            '#webform_component' => $component,
            '#multiple' => false,
            //'#field_prefix'=> $component['extra']['text_prefix'] ?$component['extra']['text_prefix'] : '' ,
            '#access' => FALSE,
        );
    }
  }
  $form['trans_add_rem'][$fieldset]['add_trans'] = array(
    '#type' => 'submit',
    '#value' => t('Add Another Expense'),
    '#submit' => array('ebms_webforms_add_one'),
      '#name' => $id,
    // See the examples in ajax_example.module for more details on the
    // properties of #ajax.
      '#limit_validation_errors' => array(),
    '#ajax' => array(
      'callback' => 'ebms_webforms_add_more_callback',
      'wrapper' => $id.'-fieldset-wrapper',
        'instance' => $component['cid'],
          'callback_val' => $id . '-fieldset',
    ),
  );
  if ($component['extra']['num_trans'] > 1) {
    $form['trans_add_rem'][$fieldset]['remove_trans'] = array(
      '#type' => 'submit',
      '#value' => t('Remove one'),
      '#submit' => array('ebms_webforms_remove_one'),
      '#ajax' => array(
        'callback' => 'ebms_webforms_add_more_callback',
        'wrapper' => $id.'-fieldset-wrapper',
          'instance' => $component['cid'],
          'callback_val' => $id . '-fieldset',
      ),
    );
  }

    $element = $form;

    // Enforce uniqueness.
   // if ($component['extra']['unique']) {
    //$element['#element_validate'][] = 'webform_imei_validate_imei_unique';
    //}
    // Change the 'width' option to the correct 'size' option.
    if ($component['extra']['size'] > 0) {
    //$element['#size'] = $component['extra']['size'];
    }
    if ($component['extra']['maxlength'] > 0) {
    //$element['#maxlength'] = $component['extra']['maxlength'];
    }

    //$element = drupal_get_form('ajax_example_add_more');
    return $element;

}

/**
 * Callback for both ajax-enabled buttons.
 *
 * Selects and returns the fieldset with the names in it.
 */
function ebms_webforms_add_more_callback($form, $form_state) {
  $component = $form_state['clicked_button']['#ajax']['callback_val'];
  $element = $form_state['clicked_button']['#parents'][1];
  return $form['submitted'][$element][$component];
}


/**
 * Callback for both ajax-enabled buttons.
 *
 * Selects and returns the fieldset with the names in it.
 */
function ebms_webforms_travel_type_select($form, $form_state) {
    $component = $form_state['triggering_element']['#ajax']['callback_val'];
    $element = $form_state['triggering_element']['#parents'][1];

    return $form['submitted'][$element][$component];
}

/**
 * Submit handler for the "add-one-more" button.
 *
 * Increments the max counter and causes a rebuild.
 */
function ebms_webforms_add_one($form, &$form_state) {
  $component = $form_state['clicked_button']['#ajax']['instance'];
  $form_state['build_info']['args'][0]->webform['components'][$component]['extra']['num_trans']++;
  $form_state['rebuild'] = TRUE;
}

/**
 * Submit handler for the "remove one" button.
 *
 * Decrements the max counter and causes a form rebuild.
 */
function ebms_webforms_remove_one($form, &$form_state) {
  if ($form_state['build_info']['args'][0]->webform['components'][7]['extra']['num_trans'] > 1) {
   $form_state['build_info']['args'][0]->webform['components'][7]['extra']['num_trans']--;

  }
  $form_state['rebuild'] = TRUE;
}

/**
 * @} End of "defgroup ajax_degradation_example".
 */


/**
* Display the result of a submission for a component.
*/
function _webform_display_ebms_travel($component, $value, $format = 'html') {
    return array(
    '#title' => $component['name'],
    '#weight' => $component['weight'],
    '#theme' => 'webform_display_ebms_travel',
    '#theme_wrappers' => $format == 'html' ? array('webform_element') : array('webform_element_text'),
    '#post_render' => array('webform_element_wrapper'),
    '#component' => $component,
    '#format' => $format,
    '#value' => isset($value[0]) ? webform_ebms_travel_display_format($value[0]) : '',
    '#webform_component' => $component,
    );
}
/**
* Module specific instance of hook_theme().
*
* This allows each Webform component to add information into hook_theme().
*/
function _webform_theme_ebms_travel() {
    return array(
        'webform_display_ebms_travel' => array(
        'render element' => 'element',
        ),
    );
}

/**
* Format the serialized data that we stored in the database into a list
    * of transportation expenses that a user entered.
*/
function webform_ebms_travel_display_format($value) {
    $newVal = unserialize($value);
    foreach($newVal as $value_pair){
        $output[] = $value_pair;
        //$output[] = $value_pair['type'] .' - '. implode('/',$value_pair['date']) . ' - ' . $value_pair['expense'];
    }
    $value = $output;//implode('<br>', $output);
    return $value;
}


/**
 * Format the output of data for this component.
 *
 * @TODO:
 * 1) Make the delimiter and output order of this widget configurable.
 *
 * This function controls what goes to the travel specialist via email.
 */
function theme_webform_display_ebms_travel($variables) {
    $element = $variables['element'];
    $component = $element['#webform_component'];
    // Flatten the list of options so we can get values easily.
    $keypairs = explode("\n",$component['extra']['items']);
    $options = array();
    foreach ($keypairs as $keypair) {
        $tmp = explode('|', $keypair);
        $options[$tmp[0]] = $tmp[1];
    }

    //set the format for out complex field.
    //Item 1 - Select list
    //Item 2 - Date
    //Item 3 - Text
     $items = array();
    foreach ($element['#value'] as $value_pair) {
        // branch on type
        $claim = '';
        if ($value_pair['type'] == 'private') {
            $claim = trim($value_pair['mileage']);
            if (empty($claim))
                continue;
            if (ctype_digit(substr($claim, -1)))
                $claim .= ' miles';
        } else {
            $claim = trim($value_pair['expense']);
            if (empty($claim))
                continue;
            if (ctype_digit(substr($claim, 0, 1)))
                $claim = '$' . $claim;
        }

        $items[] = $options[$value_pair['type']] .' - '. implode('/',$value_pair['date']) . " - $claim";
    }

    // Victoria wants empty lines around the individual expenses.
    if (empty($items))
        return '';
    return "\n" . implode("\n\n", $items) . "\n";
}
/**
* Return the result of a component value for display in a table.
*/
function _webform_table_ebms_travel($component, $value) {
     $keypairs = explode("\n",$component['extra']['items']);
    $options = array();
    foreach ($keypairs as $keypair) {
        $tmp = explode('|', $keypair);
        $options[$tmp[0]] = $tmp[1];
    }

    //set the format for out complex field.
    //Item 1 - Select list
    //Item 2 - Date
    //Item 3 - Text
    $value = unserialize($value[0]);
     $items = array();
    foreach($value as $value_pair){
        // branch on type
        $claim = '';
        if ($value_pair['type'] == 'private') {
            $claim = trim($value_pair['mileage']);
            if (empty($claim))
                continue;
            if (ctype_digit(substr($claim, -1)))
                $claim .= ' miles';
        } else {
            $claim = trim($value_pair['expense']);
            if (empty($claim))
                continue;
            if (ctype_digit(substr($claim, 0, 1)))
                $claim = '$' . $claim;
        }

        $items[] = $options[$value_pair['type']] .' - '. implode('/',$value_pair['date']) . " - $claim";
    }


    $value = implode('<br>', $items);
    return $value !== '' ? $value : ' ';
}
/**
* Return the heading for this component to be displayed in a CSV file.
*/
function _webform_csv_headers_ebms_travel($component, $export_options) {
    $header = array();
    $header[0] = '';
    $header[1] = '';
    $header[2] = $component['name'];
    return $header;
}
/**
* Format the submitted data of a component for CSV downloading.
*/
function _webform_csv_data_ebms_travel($component, $export_options, $value) {
    return !isset($value[0]) ? '' : webform_ebms_travel_display_format($value[0]);
}

/**
 * Loads the user's filtering parameters for the report on hotel requests.
 * If no filtering has been requested, a default set of values is returned.
 * We extract the report request's ID from the URL.  We also extract from
 * the URL the node ID for the webform node used for the hotel request form.
 *
 * 2013-11-29: new requirement for filtering of the reimbursement report
 * form (OCEEBMS-111).
 *
 *  @return  array   filtering parameters, plus the hotel request form ID
 */
function _ebms_webforms_report_params() {
    $path_components = explode('/', request_path());
    $node_id = $path_components[1];
    if (count($path_components) == 5)
        $params = EbmsReports::fetch_report_request($path_components[4]);
    else
        $params = array(
            'board' => 0,
            'meeting' => 0,
            'date-start' => array('date' => ''),
            'date-end' => array('date' => ''),
            'node' => $node_id,
        );
    return $params;
}

/**
 * Ask the database for the timestamp equivalent of a standard ISO
 * date/time string.  We first make sure the string hasn't been
 * tampered with by a malicious intruder.
 *
 *  @return  integer    UNIX timestamp (number of seconds since start of 1970)
 */
function _ebms_webforms_unix_timestamp($string) {

    // Guard against unsafe data from form.
    if (!preg_match('/\d{4}-\d{2}-\d{2}( \d{2}:\d{2}(:\d{2})?)?/', $string))
        return 0;
    return db_query("SELECT UNIX_TIMESTAMP('$string')")->fetchField();
}

/**
 * See webform_results_table() in webform.report.inc
 *
 * This is the function that controls the travel reports.
 * For formatting of the email notifications to NCI staff when
 * a travel request is submitted, see the hook implementation
 * theme_webform_display_ebms_travel() above.
 *
 * @param type $node
 * @param type $pager_count
 * @return type
 */
function _ebms_webforms_results_table($node, $pager_count=0) {

    // We need report functionality from the EBMS module.
    module_load_include('inc', 'ebms', 'reports');

    // Add our custom CSS to this page
    drupal_add_css(drupal_get_path('module', 'ebms_webforms') .
        '/includes/ebms_webform.css');

    // Determine if it's one of our special reports via URL
    $isReimbursementRequest = $isHotelRequest = false;
    if (array_key_exists('nid', $node->webform)) {
        $url = url('node/' . $node->nid);
        switch ($url) {
            case '/travel/reimbursement-request':
                $isReimbursementRequest = true;
                $report = 'Reimbursement Requests';
                break;
            case '/travel/hotel-request':
                $isHotelRequest = true;
                $report = 'Hotel Requests';
                break;
        }
    }

    // If it's a non-special report, return the default function
    if (!$isReimbursementRequest && !$isHotelRequest) {
        //module_load_include('inc', 'webform', 'includes/webform.report');
        $default = webform_results_table($node, $pager_count);
        return $default;
    }

    // Load the left nav for reports
    $left_nav = EbmsReports::build_left_nav();

    // From here down is somewhat copied and modified from the default
    // webform_results_table.
    if (isset($_GET['results']) && is_numeric($_GET['results'])) {
        $pager_count = $_GET['results'];
    }

    // We shouldn't need this, since we're going to construct the headers
    // array by hand, but the theme call is required (presumably for some
    // undocumented side effect), because without it, PHP complains that
    // the webform_get_submissions function doesn't exist!
    $header = theme('webform_results_table_header', array('node' => $node));

    // TIR 2366: Robin has asked that we modify the reimbursement
    // request report to support sorting by the Meeting column.  The
    // webform module doesn't expose its filtering query to alteration,
    // so instead we collect the submission records ourselves for that
    // report, handling paging and sorting ourselves.
    // 2013-10-14: TIR#2218 (JIRA::OCEEBMS-47) now requires that we
    // build the results table for the hotel request report as well,
    // in order to support filtering.
    $query = db_select('webform_submissions', 's');
    $query->join('webform_component', 'c', 'c.nid = s.nid');
    $query->join('webform_submitted_data', 'd',
                 'd.nid = s.nid AND d.sid = s.sid AND d.cid = c.cid');
    $query->join('node', 'n', 'n.nid = d.data');
    $query->join('field_data_field_datespan', 'f', 'f.entity_id = n.nid');
    $query->join('users', 'u', 'u.uid = s.uid');
    $query->condition('c.form_key', 'meeting');
    $query->condition('s.nid', $node->nid);

    // Fetch any filtering parameters used for the report.
    $params = _ebms_webforms_report_params();

    // Filtering for the report request form.
    if ($params['meeting'])
        $query->condition('d.data', $params['meeting']);
    elseif ($params['board']) {

        // New requirement 2014-08-04 (OCEEBMS-199): include subgroups and ad-hoc
        // groups when filtering hotel request report by board.
        $board_id = (int)$params['board'];
        if ($isHotelRequest) {
            $query->leftJoin('field_data_field_boards', 'b', 'b.deleted = 0 AND ' .
                             'b.entity_id = d.data AND b.bundle = \'ebms_event\' AND ' .
                             'b.entity_type = \'node\' AND ' .
                             'b.field_boards_value = ' . $board_id);
            $query->leftJoin('field_data_field_subgroups', 'sg',
            'sg.entity_id = d.data AND sg.deleted = 0 AND ' .
            'sg.bundle = \'ebms_event\' and sg.entity_type = \'node\'');
            $query->leftJoin('ebms_subgroup', 'sgb',
                             'sgb.sg_id = sg.field_subgroups_value AND ' .
                             'sgb.board_id = ' . $board_id);
            $query->leftJoin('field_data_field_ad_hoc_groups', 'ahg',
            'ahg.entity_id = d.data AND ahg.deleted = 0 AND ' .
            'ahg.bundle = \'ebms_event\' and ahg.entity_type = \'node\'');
            $query->leftJoin('ebms_ad_hoc_group_board', 'ahgb',
                             'ahgb.group_id = ahg.field_ad_hoc_groups_value AND ' .
                             'ahgb.board_id = ' . $board_id);
            $query->condition(
                db_or()
                ->isNotNull('b.entity_id')
                ->isNotNull('sgb.sg_id')
                ->isNotNull('ahgb.group_id')
            );
        }
        else {
            $query->join('field_data_field_boards', 'b',
                         'b.entity_id = d.data');
            $query->condition('b.deleted', 0);
            $query->condition('b.field_boards_value', $params['board']);
            $query->condition('b.bundle', 'ebms_event');
            $query->condition('b.entity_type', 'node');
        }
    }
    if ($params['date-start']['date']) {
        $start_date = $params['date-start']['date'];
        $start_date = _ebms_webforms_unix_timestamp($start_date);
        $query->condition('s.submitted', $start_date, '>=');
    }
    if ($params['date-end']['date']) {
        $end_date = $params['date-end']['date'] . ' 23:59:59';
        $end_date = _ebms_webforms_unix_timestamp($end_date);
        $query->condition('s.submitted', $end_date, '<=');
    }

    // Side trip to get the total number of rows for the report.
    $total_count = $query->countQuery()->execute()->fetchField();

    // Override the $header variable set above.
    if ($isReimbursementRequest)
        $header = array(
            array('data' => 'Submitted', 'field' => 's.submitted'),
            array('data' => 'User', 'field' => 'u.name'),
            array('data' => 'Meeting', 'field' => 'meeting_with_date'),
            'Type of Travel',
            'Transportation', 'Parking and Tolls', 'Hotel', 'Amount',
            'Meals and Incidentals', 'Honorarium',
            'Reimbursement', 'Comments',
        );
    else
        $header = array(
            array('data' => 'Submitted', 'field' => 's.submitted'),
            array('data' => 'User', 'field' => 'u.name'),
            array('data' => 'Meeting', 'field' => 'meeting_with_date'),
            'Check-In', 'Check-Out', 'Preferred Hotel', 'Comments',
        );

    // Robin said she needs the Meeting sort to do sub-sorting by
    // meeting date within meetings which have the same title.
    // Drupal's table extender mechanism prevents us from doing
    // this the standard SQL way, using two column expressions
    // separated by a comma, because Drupal strips out commas from
    // the order by expression.
    // http://api.drupal.org/api/drupal/includes!tablesort.inc/function/TableSort%3A%3AorderByHeader/7
    $query->addExpression('CONCAT(n.title, CHAR(9), ' .
            "FROM_UNIXTIME(f.field_datespan_value, '%Y-%m-%d %h:%i:%s'))",
            'meeting_with_date');
    $query = $query->extend('TableSort');
    $query->orderByHeader($header);
    $query->fields('s', array('sid'));
    if ($pager_count) {
        $query = $query->extend('PagerDefault');
        $query->limit($pager_count);
    }

    // Collect the submission IDs we want in the right order.
    $results = $query->execute();
    $sids = array();
    foreach ($results as $result)
        $sids[] = $result->sid;

    // Use the webform module to get the data.
    $submissions = array();
    if (count($sids)) {
        $temp_submissions = webform_get_submissions(array('sid' => $sids));

        // Put the rows back in the order we want.
        foreach ($sids as $sid) {
            if (array_key_exists($sid, $temp_submissions))
                $submissions[$sid] = $temp_submissions[$sid];
        }
    }

    // Assemble the table's rows for display.
    $format = 'Y-m-d H:i';
    $rows = array();
    foreach ($submissions as $sid => $submission) {

        $cell[] = format_date($submission->submitted, 'custom', $format);
        $cell[] = theme('username', array('account' => $submission));

        // Generate a cell for each component.
        foreach ($node->webform['components'] as $component) {

            // Not all fields are included in the report.
            if ($isReimbursementRequest) {
                $skip = array('certify', 'arrival_date', 'departure_date',
                        'total_amount_requested', 'confirmation_email');
                if (in_array($component['form_key'], $skip))
                    continue;
            }
            $data = isset($submission->data[$component['cid']])
                ? $submission->data[$component['cid']] : NULL;
            $submission_output = webform_component_invoke($component['type'],
                                 'table', $component, $data);

            if ($submission_output !== NULL) {

                if ($component['form_key'] == 'meeting') {
                    $nodeComponent = node_load($submission_output);
                    if ($nodeComponent) {
                        $dates = field_get_items('node', $nodeComponent,
                                 'field_datespan');
                        $start = $dates[0]['value'];
                        $date = date('Y-m-d', $start);
                        $title = "$nodeComponent->title - $date";
                        $url = 'node/' . $nodeComponent->nid;
                        $cell[] = l($title, $url);
                    }
                    else
                        $cell[] = 'N/A';
                }
                else
                    $cell[] = $submission_output;
            }
        }

        $rows[] = $cell;
        unset($cell);
    }

    if (count($rows) == 0) {
        $placeholder = array('!url' => url('node/' . $node->nid));
        $data = t('There are no relevant submissions for this form. ' .
                '<a href="!url">View this form</a>.', $placeholder);
        $rows[] = array(array('data' => $data, 'colspan' => 4));
    }

    // Since all webforms are likely to go in the reports section, let's
    // make that breadcrumb universal
    drupal_set_breadcrumb(array(
        l('Reports', 'reports'),
        l('Board Management Reports', 'reports/board'),
        drupal_get_title() . 's',
    ));

    // Set the top navigation to be Reports
    module_load_include('inc', 'ebms', 'common');
    Ebms\Menu::$active = 'Reports';

    $output = '';

    // Build Left Nav, if appropriate
    $left_nav = EbmsReports::build_left_nav('Board Management', $report);
    $output .= render($left_nav);

    // Add the title and add the -right class
    $output .= '<div id="webform-table-right">';
    $output .= '<h2>'.$node->title.'s ('.$total_count.')</h2>';

    // Hotel report now needs filtering (OCEEBMS-47).  Build the form which
    // lets the user specify which requests should appear in the report.
    // 2013-11-29; now both reports need filtering (OCEEBMS-111).
    $form = drupal_get_form('ebms_webforms_report_form', $params, $report);
    $output .= drupal_render($form);

    // Both reports have enough columns now that they need more width.
    $output .= '<br></div><div id="webform-table-long-right">';

    // Add the results table
    $output .= theme('table', array('header' => $header, 'rows' => $rows));

    // Add the pager
    if ($pager_count) {
        $output .= theme('pager');
    }

    // Close the -right class
    $output .= '</div>';

    return $output;
}

/**
 * Get the meetings for the picklist on the hotel request report
 * filtering form.  Only in-person meetings are included, and if
 * the request form has specific a particular PDQ board, only
 * include the meetings associated with that board.  Prepend the
 * array with an option for having no board specified.  New
 * requirement from Robin (2013-11-05): only include meetings
 * which have at least one hotel request, and remove the constraint
 * to show only in-person meetings (in other words, if a meeting
 * used to be an in-person meeting, during which time at least one
 * board member submitted a request for a hotel reservation for
 * that meeting, include the meeting on the dropdown list even
 * if the meeting was later switched to webex).
 *
 * New requirement from Robin (OCEEBMS-111): use the same logic
 * for filtering reimbursement request reports.
 *
 *  @param  integer  $board_id    if not zero, represents the ID of a
 *                                PDQ board
 *  @param  integer  $webform_id  primary key for node used for the form
 *                                whose requests are being reported
 *
 *  @return array                 display labels and integers for the
 *                                meetings picklist
 */
function _ebms_webforms_report_meetings($board_id, $webform_id) {
    $query = db_select('node', 'n')
        ->condition('n.type', 'ebms_event')
        ->fields('n', array('nid', 'title'));
    $query->join('webform_submitted_data', 'd', 'd.data = n.nid');
    $query->condition('d.nid', $webform_id);
    $query->join('webform_component', 'c', 'c.cid = d.cid AND c.nid = d.nid');
    $query->condition('c.nid', $webform_id);
    $query->condition('c.form_key', 'meeting');
    $query->join('field_data_field_datespan', 'f', 'f.entity_id = n.nid');
    $query->condition('f.entity_type', 'node');
    $query->orderBy('f.field_datespan_value', 'DESC');
    $query->orderBy('n.title');
    $expression = 'FROM_UNIXTIME(f.field_datespan_value, \'%Y-%m-%d\')';
    $query->addExpression($expression, 'meeting_date');
    if ($board_id) {
        $url = url('node/' . $webform_id);
        $isHotelRequest = $url == '/travel/hotel-request';
        if ($isHotelRequest) {
            $query->leftJoin('field_data_field_boards', 'b',
                'b.deleted = 0 AND ' .
                'b.entity_id = d.data AND b.bundle = \'ebms_event\' AND ' .
                'b.entity_type = \'node\' AND ' .
                'b.field_boards_value = ' . $board_id);
            $query->leftJoin('field_data_field_subgroups', 'sg',
                'sg.entity_id = d.data AND sg.deleted = 0 AND ' .
                'sg.bundle = \'ebms_event\' and sg.entity_type = \'node\'');
            $query->leftJoin('ebms_subgroup', 'sgb',
                'sgb.sg_id = sg.field_subgroups_value AND ' .
                'sgb.board_id = ' . $board_id);
            $query->leftJoin('field_data_field_ad_hoc_groups', 'ahg',
                'ahg.entity_id = d.data AND ahg.deleted = 0 AND ' .
                'ahg.bundle = \'ebms_event\' and ahg.entity_type = \'node\'');
            $query->leftJoin('ebms_ad_hoc_group_board', 'ahgb',
                'ahgb.group_id = ahg.field_ad_hoc_groups_value AND ' .
                'ahgb.board_id = ' . $board_id);
            $query->condition(
                db_or()
                ->isNotNull('b.entity_id')
                ->isNotNull('sgb.sg_id')
                ->isNotNull('ahgb.group_id')
            );
        }
        else {
            $query->join('field_data_field_boards', 'b',
                'b.entity_id = n.nid and b.entity_type = \'node\'');
            $query->condition('b.field_boards_value', $board_id);
        }
    }
    $query->distinct();
    $results = $query->execute();
    $meetings = array();
    foreach ($results as $result) {
        $label = $result->title . ' - ' . $result->meeting_date;
        $meetings[$result->nid] = $label;
    }
    return array(0 => '') + $meetings;
}
/*
        if ($isHotelRequest) {
        }
        else {
            $query->join('field_data_field_boards', 'b',
                         'b.entity_id = d.data');
            $query->condition('b.deleted', 0);
            $query->condition('b.field_boards_value', $params['board']);
            $query->condition('b.bundle', 'ebms_event');
            $query->condition('b.entity_type', 'node');
        }
    }
*/
/**
 * Drupal form API callback which generates the form used to control which
 * requests are to be displayed on the report of hotel reservation requests.
 * Uses AJAX to dynamically populate the meetings picklist based on which
 * PDQ board has been selected (if any).  If no board has been selected,
 * shows all the in-person meetings.  Modified 2013-11-05: now shows only
 * meetings for which at least one hotel request has been submitted.
 * 2013-12-04: Merged hotel and reimbursement report filtering forms together.
 *
 *  @param  array   $form         Structured array containing the
 *                                elements and properties of the form
 *  @param  array   &$form_state  Modifiable structured array
 *                                containing the current values
 *                                of the form, as well as other
 *                                form state information
 *  @param  array   $params       array of parameters used to filter
 *                                the report
 *  @param  string  $report       name of the report (e.g., 'Hotel Requests')
 *
 *  @return array                 Array containing specification
 *                                of the fields to appear on the
 *                                form, as well as other markup
 */
function ebms_webforms_report_form($form, &$form_state, $params, $report) {
    $boards = array(0 => '') + Ebms\Util::boards();
    $board_id = $params['board'];
    $meeting_id = $params['meeting'];
    if (isset($form_state['values'])) {
        $board_id = $form_state['values']['board'];
    }
    if (empty($board_id))
        $board_id = Ebms\Util::get_custom_user_field_value(
            'dft_editorial_board');
    $meetings = _ebms_webforms_report_meetings($board_id, $params['node']);
    if ($meeting_id && !array_key_exists($meeting_id, $meetings))
        $meeting_id = $form_state['values']['meeting'] = 0;
    return array(
        'node' => array(
            '#type' => 'hidden',
            '#value' => $params['node'],
        ),
        'report' => array(
            '#type' => 'hidden',
            '#value' => $report,
        ),
        'board' => array(
            '#type' => 'select',
            '#title' => 'Editorial Board',
            '#title_display' => 'after',
            '#options' => $boards,
            '#default_value' => $board_id,
            '#attributes' => array('class' => array('fixed-width')),
            '#ajax' => array(
                'callback' => 'ebms_webforms_report_ajax',
                'wrapper' => 'board-dependent',
            ),
        ),
        'meeting-wrapper' => array(
            '#type' => 'container',
            '#attributes' => array('id' => 'board-dependent'),
            'meeting' => array(
                '#type' => 'select',
                '#title' => 'Meeting',
                '#title_display' => 'after',
                '#options' => $meetings,
                '#default_value' => $meeting_id,
                '#attributes' => array('class' => array('fixed-width')),
            ),
        ),
        'date-requested-line' =>
        Ebms\Util::date_range_field('DATE REQUESTED', 'date',
                                    $params['date-start']['date'],
                                    $params['date-end']['date'], '-2:+1'),
        /*
        'remember' => array(
            '#type' => 'checkbox',
            '#title' => 'Remember Board',
            '#attributes' => array('class' => array('fixed-width')),
        ),
        */
        'submit' => array(
            '#type' => 'submit',
            '#value' => 'Submit',
        ),
    );
}

/**
 * Serialize the values specified in the hotel request report form,
 * store them in the database, and navigate to the URL representing
 * the request.
 * 2013-12-04: modified to handle reimbursement reports as well.
 *
 *  @param  array   $form         Structured array containing the
 *                                elements and properties of the form
 *  @param  array   &$form_state  Modifiable structured array
 *                                containing the current values
 *                                of the form, as well as other
 *                                form state information
 *
 *  @return     none
 */
function ebms_webforms_report_form_submit($form, &$form_state) {
    $values = $form_state['values'];
    $report = $values['report'];
    if (!empty($values['remember'])) {
        global $user;
        $value = $values['board'];
        if (!$value)
            $value = null;
        $opts = array('dft_editorial_board' => $value);
        Ebms\Util::set_custom_user_field_values($opts, $user->uid);
    }
    $request_id = EbmsReports::save_report_request($values, $report);
    $node_id = $values['node'];
    $url = "node/$node_id/webform-results/table/$request_id";
    drupal_goto($url);
}

/**
 * Return the portion of a request report form dynamically
 * controlled by the selection of a particular PDQ board.
 *
 *  @param  array   $form         Structured array containing the
 *                                elements and properties of the form
 *  @param  array   &$form_state  Structured array containing the
 *                                current values of the form, as well
 *                                as other form state information
 *
 *  @return array                 render array for the meeting list
 */
function ebms_webforms_report_ajax($form, $form_state) {
    return $form['meeting-wrapper'];
}

/* http://www.metachunk.com/blog/adding-module-path-drupal-7-theme-registry */

function ebms_webforms_theme_registry_alter(&$theme_registry) {
    $mod_path = drupal_get_path('module', 'ebms_webforms');
    $mod_path .= '/templates';
    $theme_registry_copy = $theme_registry;       // munge on a copy
    _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'ebmstheme', $mod_path);
    $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
    $hooks = array('node', 'block',); // 'forums', 'forum_list', 'forum_topic_list', 'forum_icon', 'forum_submitted', 'forum_form');
    foreach ($hooks as $h) {

        _ebms_forums_insert_after_first_element($theme_registry[$h]['theme paths'], $mod_path);
    }

}

/**
 * Adding breadcrumbs to travel page
 *
 * @param type $vars
 */
function ebms_webforms_preprocess_page(&$vars) {
    $url = $_GET['q'];
    $alias = url($url);
    if (strstr($alias, 'travel')) {

        // Set the breadcrumb
        if ($alias == '/travel') {
            // TIR#2333 - Travel landing page should not have breadcrumb
            drupal_set_breadcrumb(l('Travel', 'travel'));
        } else {
            drupal_set_breadcrumb(array(
                l('Travel', 'travel'),
                //l('Board Management Reports', 'reports/board'),
                drupal_get_title(),
            ));
        }

        // Set the top nav
        // This is not the most elegant way... but it works
        drupal_add_js("(function ($) { $(document).ready(function() {
                $('#ebms-menu').children().each(function () {
                    if ($(this).children('a:first').html() == 'Travel') {
                        $(this).addClass('active');
                    }
                });
            }); }) (jQuery);", 'inline');
    }
}

/**
 * Format display for a meeting as event title - YYYY-MM-DD.
 *
 *  @param  int     $event_id     Primary key of meeting event node
 *
 *  @return string                Formatted display for meeting event
 */
function _ebms_webform_meeting_display($event_id) {
    if ($event_id) {
        $events = entity_load('node', array($event_id));
        foreach ($events as $event) {
            $event_date = field_get_items('node', $event, 'field_datespan');
            $start_date = date('Y-m-d', $event_date[0]['value']);
            $title = htmlspecialchars($event->title);
            return "$title - $start_date";
        }
    }
    throw new \Exception("Internal error formatting meeting display");
}
