<?php // -*- php -*-

// $Id$

/**
 * Portal for PDQ Board members.
 *
 * "Electronic Board Member Site" (EBMS).
 *
 * Supported functionality includes:
 *   - literature review
 *   - calendar of meetings, other events
 *   - announcements
 *   - threaded discussions
 *   - rosters and other reports
 *   - request forms (e.g., hotel reservations, reimbursements)
 */

/*======================================================================*/
/*                            CONSTANTS                                 */
/*======================================================================*/
define('EBMS_ARTICLE_WARRANTS_NO_CHANGES',     1 << 0);
define('EBMS_ARTICLE_DESERVES_CITATION',       1 << 1);
define('EBMS_ARTICLE_MERITS_REVISION_OF_TEXT', 1 << 2);
define('EBMS_ARTICLE_MERITS_DISCUSSION',       1 << 3);
define('EBMS_FROM', 'PDQ Electronic Board Member System <ebms@cancer.gov>');
define('EBMS_REQUESTEE', 'EBMS Requests <***REMOVED***>');

$ebmsUserEvents = null;
# $ebmsReportVars = null;

/*======================================================================*/
/*                          PERMISSIONS                                 */
/*======================================================================*/
function ebms_perm() {
    return array(
        'post ebms documents',
        'assign ebms literature',
        'post ebms message',
        'post ebms event',
        'view ebms documents',
        'review ebms literature',
        'submit ebms request',
        'view ebms reports',
    );
}

/*======================================================================*/
/*                         GENERAL UTILITY FUNCTIONS                    */
/*======================================================================*/
function ebms_debug($where, $what) {
    file_put_contents('/tmp/ebms.debug',
                      "$where\n" . print_r($what, TRUE), FILE_APPEND);
}

/**
 * Helper function; creates and returns a dictionary of board names indexed
 * by the board ID (primary key from the ebms_board table).
 */
function load_ebms_boards() {
    $boards = array();
    $rs = db_query('
  SELECT board_id, board_name
    FROM {ebms_board}
ORDER BY board_name');
    while ($row = db_fetch_object($rs))
        $boards[$row->board_id] = $row->board_name;
    return $boards;
}

/**
 * Helper function; creates and returns a dictionary of subgroup names
 * indexed by the subgroup ID (primary key from the ebms_subgroup table).
 *
 */
function ebms_load_subgroups($boardId=null) {
    $subgroups = array();
    $where = $boardId ? "WHERE board_id = $boardId" : "";
    $rs = db_query('
  SELECT sg_id, sg_name
    FROM {ebms_subgroup}
   $where
ORDER BY sg_name');
    while ($row = db_fetch_object($rs))
        $subgroups[$row->sg_id] = $row->sg_name;
    return $subgroups;
}

function ebms_load_users($role=null) {
    $users = array();
    if ($role)
        $rs = db_query('
  SELECT u.uid, u.name
    FROM {users} u
    JOIN {users_roles} ur
      ON u.uid = ur.uid
    JOIN {role} r
      ON r.rid = ur.rid
   WHERE r.name = \'%s\'
ORDER BY name', $role);
    else
        $rs = db_query('SELECT uid, name FROM {users} ORDER BY name');
    while ($row = db_fetch_object($rs))
        if ($row->name)
            $users[$row->uid] = $row->name;
    return $users;
}

function ebms_load_docs() {
    $docs = array();
    $rs = db_query('
  SELECT d.doc_id, f.filename, d.when_posted
    FROM {ebms_doc} d
    JOIN {files} f
      ON f.fid = d.file_id
ORDER BY d.when_posted DESC');
    while ($row = db_fetch_object($rs)) {
        $posted = $row->when_posted;
        $filename = $row->filename;
        $docs[$row->doc_id] = "[$posted] $filename";
    }
    return $docs;
}

function ebms_load_ad_hoc_groups() {
    $groups = array();
    $rs = db_query('
  SELECT group_id, group_name
    FROM {ebms_ad_hoc_group}
ORDER BY group_name');
    while ($row = db_fetch_object($rs))
        $groups[$row->group_id] = $row->group_name;
    return $groups;
}

function ebms_load_topics() {
    $topics = array();
    $rs = db_query('
  SELECT topic_id, topic_name
    FROM {ebms_topic}
ORDER BY topic_name');
    while ($row = db_fetch_object($rs))
        $topics[$row->topic_id] = $row->topic_name;
    return $topics;
}

function ebms_load_review_cycles() {
    $cycles = array();
    $rs = db_query('
  SELECT cycle_id, cycle_name
    FROM {ebms_lit_review_cycle}
ORDER BY cycle_id');
    while ($row = db_fetch_object($rs))
        $cycles[$row->cycle_id] = $row->cycle_name;
    return $cycles;
}

function ebms_fetch_url($url) {
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANFER, true);
    $response = curl_exec($ch);
    curl_close($ch);
    return $response;
}

/*======================================================================*/
/*                            MAIN MENU                                 */
/*======================================================================*/
function ebms_menu() {
    return array(
        'home' => array(
            'title' => 'PDQ Electronic Board Member System',
            'page callback' => 'ebms_home',
            'access callback' => TRUE,
        ),
/*
        'meetings' => array(
            'title' => 'Meetings',
            'page callback' => 'ebms_meetings_page',
            'access callback' => TRUE,
            'menu_name' => 'primary-links',
            'weight' => 1,
        ),
        'calendar' => array(
            'title' => 'Calendar',
            'page callback' => 'ebms_calendar_page',
            'access callback' => TRUE,
            'menu_name' => 'primary-links',
            'weight' => 2,
        ),
*/
        'docs' => array(
            'title' => 'Docs',
            'page callback' => 'ebms_list_docs',
            'access arguments' => array('post ebms documents'),
            'menu_name' => 'primary-links',
            'weight' => 3,
        ),
        'docs/list' => array(
            'title' => 'List',
            'type' => MENU_DEFAULT_LOCAL_TASK,
            'access arguments' => array('post ebms documents'),
            'weight' => 0,
        ),
        'docs/add' => array(
            'title' => 'Add',
            'type' => MENU_LOCAL_TASK,
            'page callback' => 'ebms_add_doc',
            'access arguments' => array('post ebms documents'),
            'weight' => 1,
        ),
        'assign-lit' => array(
            'title' => 'Packets',
            'page callback' => 'ebms_assign_lit',
            'access arguments' => array('assign ebms literature'),
            'menu_name' => 'primary-links',
            'weight' => 4,
        ),
        'assign-lit/list' => array(
            'title' => 'List',
            'type' => MENU_DEFAULT_LOCAL_TASK,
            #'page callback' => 'ebms_assign_lit',
            'access arguments' => array('assign ebms literature'),
            #'menu_name' => 'primary-links',
            'weight' => 0,
        ),
        'assign-lit/add' => array(
            'title' => 'Add',
            'type' => MENU_LOCAL_TASK,
            'page callback' => 'ebms_add_packet',
            'access arguments' => array('assign ebms literature'),
            #'menu_name' => 'primary-links',
            'weight' => 1,
        ),
        'assign-lit/edit' => array(
            #'title' => 'Add',
            'type' => MENU_CALLBACK,
            'page callback' => 'ebms_edit_packet',
            'access arguments' => array('assign ebms literature'),
            #'menu_name' => 'primary-links',
            #'weight' => 1,
        ),
        'ad-hoc-groups' => array(
            'title' => 'Groups',
            'page callback' => 'ebms_ad_hoc_groups',
            'menu_name' => 'primary-links',
            'access arguments' => array('post ebms documents'),
            'weight' => 6,
        ),
        'ad-hoc-groups/list' => array(
            'title' => 'List',
            'type' => MENU_DEFAULT_LOCAL_TASK,
            'access arguments' => array('post ebms documents'),
            'weight' => 0,
        ),
        'ad-hoc-groups/add' => array(
            'title' => 'Add',
            'type' => MENU_LOCAL_TASK,
            'page callback' => 'drupal_get_form',
            'page arguments' => array('ebms_ad_hoc_group_form'),
            'access arguments' => array('post ebms documents'),
            'weight' => 1,
        ),
        'ad-hoc-groups/edit' => array(
            'type' => MENU_CALLBACK,
            'page callback' => 'ebms_edit_ad_hoc_group',
            'access arguments' => array('post ebms documents'),
        ),
        'ad-hoc-groups/delete' => array(
            'type' => MENU_CALLBACK,
            'page callback' => 'ebms_delete_ad_hoc_group',
            'access arguments' => array('post ebms documents'),
        ),
        'review-lit' => array(
            'title' => 'Review',
            'page callback' => 'ebms_review_lit',
            'access arguments' => array('review ebms literature'),
            'menu_name' => 'primary-links',
            'weight' => 7,
        ),
        'reviews' => array(
            'title' => 'Reviews',
            'page callback' => 'ebms_reviews',
            'access arguments' => array('assign ebms literature'),
            'menu_name' => 'primary-links',
            'weight' => 8,
        ),
        'discussions' => array(
            'title' => 'Forum',
            'page callback' => 'ebms_discussions',
            'menu_name' => 'primary-links',
            'access callback' => TRUE,
            'weight' => 9,
        ),
        'events' => array(
            'title' => 'Calendar',
            'page callback' => 'ebms_calendar',
            'menu_name' => 'primary-links',
            'access callback' => TRUE,
            'weight' => -1,
        ),
        /*
        'add-event' => array(
            'title' => 'Add Event',
            'menu_name' => 'primary-links',
            'page callback' => 'ebms_add_event',
            'access arguments' => array('post ebms event'),
            'weight' => 0,
        ),
        */
        'show-boards' => array(
            'title' => 'Boards',
            'page callback' => 'ebms_show_boards',
            #'menu_name' => 'primary-links',
            #'access arguments' => array('post ebms documents'),
            'access callback' => TRUE,
            'weight' => 20,
        ),
        'roster' => array(
            'title' => 'Roster',
            'page callback' => 'ebms_roster',
            'menu_name' => 'primary-links',
            'access callback' => TRUE,
            'weight' => 8,
        ),
        'info' => array(
            'title' => 'Info',
            'page callback' => 'ebms_info',
            'menu_name' => 'primary-links',
            'access callback' => TRUE,
            'weight' => 4,
        ),
        'announcements' => array(
            'title' => 'Messages',
            'page callback' => 'ebms_announcements',
            'page arguments' => array('unread'),
            'menu_name' => 'primary-links',
            'access callback' => TRUE,
            'weight' => 1,
        ),
        'announcements/unread' => array(
            'title' => 'Unread',
            'type' => MENU_DEFAULT_LOCAL_TASK,
            'access callback' => TRUE,
            'weight' => 0,
        ),
        'announcements/read' => array(
            'title' => 'Read',
            'type' => MENU_LOCAL_TASK,
            'page callback' => 'ebms_announcements',
            'page arguments' => array('read'),
            'access callback' => TRUE,
            'weight' => 1,
        ),
        'announcements/posted' => array(
            'title' => 'Posted',
            'type' => MENU_LOCAL_TASK,
            'page callback' => 'ebms_announcements',
            'page arguments' => array('mine'),
            'access arguments' => array('post ebms message'),
            'weight' => 2,
        ),
        'announcements/add' => array(
            'title' => 'Add',
            'type' => MENU_LOCAL_TASK,
            'page callback' => 'drupal_get_form',
            'page arguments' => array('ebms_post_message_form'),
            'access arguments' => array('post ebms message'),
            'weight' => 7,
        ),
        'announcements/view' => array(
            #'title' => 'Add',
            'type' => MENU_CALLBACK,
            'page callback' => 'ebms_view_announcement',
            'access callback' => TRUE,
            #'menu_name' => 'primary-links',
            #'weight' => 1,
        ),
        'requests' => array(
            'title' => 'Requests',
            'page callback' => 'ebms_hotel_reservation_request',
            'access arguments' => array('submit ebms request'),
            'menu_name' => 'primary-links',
            'weight' => 3,
        ),
        'requests/hotel' => array(
            'title' => 'Hotel',
            'type' => MENU_DEFAULT_LOCAL_TASK,
            'access arguments' => array('submit ebms request'),
            'weight' => 0,
        ),
        'requests/reimbursement' => array(
            'title' => 'Reimbursement',
            'type' => MENU_LOCAL_TASK,
            'page callback' => 'ebms_reimbursement_request',
            'access arguments' => array('submit ebms request'),
            'weight' => 1,
        ),
        'reports' => array(
            'title' => 'Reports',
            'page callback' => 'ebms_show_hotel_requests',
            #'page callback' => 'drupal_get_form',
            #'page arguments' => array('ebms_hotel_request_report_form'),
            'menu_name' => 'primary-links',
            'access arguments' => array('view ebms reports'),
            'weight' => 10,
        ),
        'reports/hotel-requests' => array(
            'title' => 'Hotel',
            'type' => MENU_DEFAULT_LOCAL_TASK,
            'access arguments' => array('view ebms reports'),
            'weight' => 0,
        ),
//         'reports/hotel-requests/show' => array(
//             'type' => MENU_CALLBACK,
//             'page callback' => 'ebms_hotel_request_report',
//             'access callback' => TRUE,
//             #'menu_name' => 'primary-links',
//             #'weight' => 1,
//         ),
        'reports/reimbursement-requests' => array(
            'title' => 'Reimbursements',
            'type' => MENU_LOCAL_TASK,
            'page callback' => 'ebms_show_reimbursement_requests',
            'access arguments' => array('view ebms reports'),
            'weight' => 1,
        ),
//         'reports/reimbursement-requests/show' => array(
//             'type' => MENU_CALLBACK,
//             'page callback' => 'ebms_reimbursements_report',
//             'access callback' => TRUE,
//             #'menu_name' => 'primary-links',
//             #'weight' => 1,
//         ),
        'my-profile' => array(
            'title' => 'Profile',
            'page callback' => 'ebms_profile',
            'menu_name' => 'primary-links',
            'access callback' => TRUE,
            'weight' => 13,
        ),
    );
}

function ebms_unread_forum_posts($uid) {
    $cutoff = strtotime('-2 months');
    #drupal_set_message($cutoff);
    $unread = 0;
    $rs = db_query('
   SELECT n.nid, h.timestamp
     FROM {node} n
LEFT JOIN {history} h
       ON n.nid = h.nid
      AND h.uid = %d
    WHERE n.status = 1
      AND n.type = \'forum\'
      AND n.created > %d', $cutoff);
    $threads = array();
    while ($row = db_fetch_object($rs))
        $threads[] = $row;
    foreach ($threads as $thread) {
        if (!$thread->timestamp) {
            ++$unread;
            $thread->timestamp = $cutoff;
        }
        $rs = db_query('
SELECT COUNT(*)
  FROM {comments}
 WHERE nid = %d
   AND timestamp > %d', $thread->nid, $thread->timestamp);
        $unread += db_result($rs);
    }
    return $unread;
}

function ebms_unread_announcements($uid) {
    $rs = db_query('
SELECT COUNT(*)
  FROM ebms_message_recipient
 WHERE recip_id = %d
   AND when_read IS NULL', $uid);
    return db_result($rs);
}
//   SELECT p.packet_id, c.cycle_name, t.topic_name
//     FROM {ebms_lit_packet} p
//     JOIN {ebms_lit_review_cycle} c
//       ON c.cycle_id = p.cycle_id
//     JOIN {ebms_topic} t
//       ON t.topic_id = p.topic_id
//     JOIN {ebms_lit_packet_reviewer} r
//       ON r.packet_id = p.packet_id
//    WHERE r.reviewer_id = %d
// ORDER BY c.cycle_id', $user->uid);
//         $packets = array();
//         while ($row = db_fetch_object($rs))
//             $packets[] = $row;
//         if (count($packets) == 0)
//             return '<p><b>No literature packets have been assigned to you for review.</b></p>';
//         $html = array('<h3>Literature Packets</h3><ol>');
//         foreach ($packets as $packet) {
//             $docsInPacket = ebms_find_docs_in_packet($packet->packet_id);
//             $rs = db_query('
// SELECT r.article_id
//   FROM {ebms_article_review} r
//   JOIN {ebms_lit_packet_article} a
//     ON a.article_id = r.article_id
//  WHERE a.packet_id = %d
//    AND r.reviewer_id = %d', $packet->packet_id, $user->uid);

function ebms_unreviewed_articles($uid) {
    $rs = db_query('
   SELECT COUNT(*)
     FROM {ebms_lit_packet_article} a
     JOIN {ebms_lit_packet} p
       ON p.packet_id = a.packet_id
     JOIN {ebms_lit_packet_reviewer} m
       ON m.packet_id = a.packet_id
LEFT JOIN {ebms_article_review} r
       ON r.article_id = a.article_id
      AND r.reviewer_id = m.reviewer_id
    WHERE m.reviewer_id = %d
      AND a.drop_flag = 0
      AND r.review_id IS NULL', $uid);
    return db_result($rs);
}

function ebms_upcoming_events($uid) {
    $now = date('c');
    $cutoff = date('c', strtotime('+1 month'));
    $count = 0;
    $myEvents = ebms_get_user_events($uid);
    $rs = db_query('
SELECT n.nid
  FROM {node} n
  JOIN {content_field_date} d
    ON n.nid = d.nid
   AND n.vid = d.vid
 WHERE d.field_date_value < \'%s\'
   AND d.field_date_value2 >= \'%s\'
   AND n.status = 1', $cutoff, $now);
    while ($row = db_fetch_object($rs))
        if (array_key_exists($row->nid, $myEvents))
            ++$count;
    return $count;
}

function ebms_reviewed_articles($uid) {
    return db_result(db_query('
   SELECT COUNT(*)
     FROM {ebms_article_review} r
     JOIN {ebms_lit_packet_article} a
       ON r.article_id = a.article_id
     JOIN {ebms_lit_packet} p
       ON p.packet_id = a.packet_id
    WHERE p.created_by = %d
      AND (p.last_seen IS NULL
       OR r.when_posted >= p.last_seen)', $uid));
}

function ebms_home() {
    if (user_is_logged_in()) {
        //$view = views_get_view('calendar');
        //ebms_debug('VIEW: ', $view);
        global $user;
        #ebms_debug('USER: ', $user);
        $html = array('<p>Welcome to the EBMS!  You have:</p>');
        $html[] = '<div id="ebms-summary">';
        $html[] = '<ul>';
        $n = ebms_unread_announcements($user->uid);
        $s = $n == 1 ? '' : 's';
        $html[] = "<li>$n unread <a href='announcements'>message$s</a></li>";
        $n = ebms_unread_forum_posts($user->uid);
        $s = $n == 1 ? '' : 's';
        $html[] = "<li>$n new <a href='discussions'>forum</a> posting$s</li>";
        if (user_access('review ebms literature')) {
            $n = ebms_unreviewed_articles($user->uid);
            $s = $n == 1 ? '' : 's';
            $html[] = "<li>$n <a href='review-lit'>journal article$s</a> awaiting review</li>";
        }
        if (user_access('assign ebms literature')) {
            $n = ebms_reviewed_articles($user->uid);
            $s = $n == 1 ? '' : 's';
            $html[] = "<li>$n new journal article <a href='reviews'>review$s</a>";
            $html[] = '</li>';
        }
        $n = ebms_upcoming_events($user->uid);
        $s = $n == 1 ? '' : 's';
        $html[] = "<li>$n upcoming <a href='events'>event$s</a></li>";
        $html[] = '</ul></div>';
        return implode("\n", $html);
    }
    else {
        drupal_goto('user');
    }
}

/*======================================================================*/
/*                              REDIRECTS                               */
/*======================================================================*/
function ebms_add_event() { drupal_goto('node/add/event'); }
function ebms_discussions() { drupal_goto('forum/1'); }
function ebms_calendar() { drupal_goto('calendar'); }
function ebms_profile() { global $user; drupal_goto("user/$user->uid"); }

/*======================================================================*/
/*                                BOARDS                                */
/*======================================================================*/
function ebms_show_boards() {
    $boards = load_ebms_boards();
    $managers = ebms_load_users('board manager');
    $members = ebms_load_users('board member');
    $html = array('<ul>');
    foreach ($boards as $boardId => $boardName) {
        $rs = db_query('
SELECT user_id
  FROM {ebms_board_member}
 WHERE board_id = %d', $boardId);
        $boardMembers = array();
        $boardManager = '';
        while ($row = db_fetch_object($rs)) {
            $uid = $row->user_id;
            $manager = $managers[$uid];
            if ($manager)
                $boardManager = $manager;
            else {
                $member = $members[$uid];
                if ($member)
                    $boardMembers[] = $member;
            }
        }
        $name = htmlspecialchars($boardName);
        $extra = '';
        if ($boardManager)
            $extra = ' (' . htmlspecialchars($boardManager) . ', manager)';
        $html[] = "<li><b>$name Board$extra</b></li><ul>";
        sort($boardMembers);
        foreach ($boardMembers as $member) {
            $name = htmlspecialchars($member);
            $html[] = "<li>$name</li>";
        }
        $subgroups = ebms_load_subgroups($boardId);
        foreach ($subgroups as $sgId => $sgName) {
            $name = htmlspecialchars($sgName);
            $html[] = "<li><b>$name Subgroup</b></li>";
            $sgMembers = array();
            $rs = db_query('
SELECT user_id
  FROM {ebms_subgroup_member}
 WHERE sg_id = %d', $sgId);
            while ($row = db_fetch_object($rs)) {
                $uid = $row->user_id;
                $member = $members[$uid];
                if ($member)
                    $sgMembers[] = $member;
            }
            if ($sgMembers) {
                sort($sgMembers);
                $html[] = '<ul>';
                foreach ($sgMembers as $member) {
                    $name = htmlspecialchars($member);
                    $html[] = "<li>$name</li>";
                }
                $html[] = '</ul>';
            }
        }
        $html[] = '</ul>';
    }
    $html[] = '</ul><h3>Ad-hoc Groups</h3><ul>';
    $groups = array();
    $rs = db_query('
  SELECT g.group_id, g.group_name, u.name
    FROM {ebms_ad_hoc_group} g
    JOIN {users} u
      ON u.uid = g.created_by
ORDER BY g.group_name');
    while ($row = db_fetch_object($rs))
        $groups[] = $row;
    foreach ($groups as $group) {
        $name = htmlspecialchars($group->group_name);
        $creator = htmlspecialchars($group->name);
        $html[] = "<li><b>$name</b> (created by <i>$creator</i>)<ul>";
        $rs = db_query('
  SELECT u.name
    FROM {users} u
    JOIN {ebms_ad_hoc_group_member} m
      ON m.user_id = u.uid
   WHERE m.group_id = %d
ORDER BY u.name', $group->group_id);
        while ($row = db_fetch_object($rs)) {
            $member = htmlspecialchars($row->name);
            $html[] = "<li>$member</li>";
        }
        $html[] = '</ul></li>';
    }
    $html[] = '</ul>';
    return implode('', $html);
}

function ebms_meetings_page() {
    return "<h4>Meetings</h4><p>This is the page for EBMS meetings.</p>";
}

function ebms_calendar_page() {
    return "<h4>Calendar</h4><p>This is the page for the EBMS calendar.</p>";
}

/*======================================================================*/
/*                           POSTING DOCUMENTS                          */
/*======================================================================*/
function ebms_add_doc() {
    return /*'<h3>Add Document</h3>' .*/ drupal_get_form('ebms_add_doc_form');
}

/**
 * Menu callback.  Lists EBMS documents which have been uploaded (mostly
 * journal articles to be reviewed.
 */
function ebms_list_docs() {

    // No whitespace before "SELECT" (bug in drupal pager code).
    $sql = 'SELECT f.filename, d.description, d.when_posted, u.name,
                   f.filesize, f.filemime, filepath, d.doc_id
              FROM {files} f
              JOIN {ebms_doc} d
                ON d.file_id = f.fid
              JOIN {users} u
                ON f.uid = u.uid
             WHERE f.status = 1
          ORDER BY d.when_posted DESC';
    $pagerNum = 0;
    $perPage = 10;
    $rs = pager_query(db_rewrite_sql($sql), $perPage, $pagerNum, NULL);
    $html = array('<table>
<tr>
<th>Uploaded</th>
<th>Posted By</th>
<th>Name</th>
<th>Size</th>
</tr>
');
    while ($row = db_fetch_object($rs)) {
        $name = htmlspecialchars($row->filename);
        $desc = htmlspecialchars($row->description);
        $posted = htmlspecialchars($row->when_posted);
        $user = htmlspecialchars($row->name);
        $size = $row->filesize;
        $url = "info/$row->doc_id";
        #$url = file_create_url($row->filepath);
        $html[] = "
<tr>
<td>$posted</td>
<td>$user</td>
<td><a href=\"$url\" title=\"$desc\">$name</a></td>
<td align='right'>$size</td>
</tr>
";
    }
    $html[] = '</table><hr />' . theme('pager', NULL, $perPage, $pagerNum);
    return implode('', $html);
}

function ebms_doc_file_required($element, &$form_state) {
    if ($_FILES['files']['name']['doc_file'] == '') {
        #form_set_error('doc_file', t('Please select a document'));
        form_set_error('doc_file', print_r($_FILES, true));
    }
    //if (empty($element['#value'])) {
    // form_error($element, t('This field is required.'));
    // }
}

function ebms_add_doc_form() {
    return array(
        'doc_file' => array(
            #'#title' => t('Upload document <span class="form-required" title="This field is required.">*</span>'),
            '#title' => t('Upload document'),
            '#type' => 'file',
            '#required' => false,
            '#element_validate' => array('ebms_doc_file_required'),
            '#description' => t('Document cannot be larger than 20MB'),
        ),
        'brief_description' => array(
            '#title' => t('Description'),
            '#type' => 'textarea',
            '#description' =>
                t('Brief description, including bib. cit. for articles'),
            '#cols' => 120,
            '#rows' => 3,
            '#resizable' => TRUE,
            '#required' => TRUE,
        ),
/*
        'all_users' => array(
            '#title' => 'Global',
            '#type' => 'checkbox',
            '#description' => t('Is the document available to all users?'),
        ),
*/
        'visibility' => array(
            '#title' => t('Visibility'),
            '#type' => 'fieldset',
            '#description' => t('Who should see this document?'),
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
            'boards' => array(
                '#title' => 'Boards',
                '#type' => 'select',
                '#multiple' => TRUE,
                '#options' => load_ebms_boards(),
                '#collapsible' => TRUE,
                '#collapsed' => TRUE,
            ),
            'subgroups' => array(
                '#title' => 'Subgroups',
                '#type' => 'select',
                '#multiple' => TRUE,
                '#options' => ebms_load_subgroups(),
                '#collapsible' => TRUE,
                '#collapsed' => TRUE,
            ),
            'users' => array(
                '#title' => 'Users',
                '#type' => 'select',
                '#multiple' => TRUE,
                '#options' => ebms_load_users(),
                '#collapsible' => TRUE,
                '#collapsed' => TRUE,
            ),
            'options' => array(
                '#title' => t('Options'),
                '#type' => 'checkboxes',
                '#options' => array(
                    'global' => t('Available to all users?'),
                    #'foobar' => t('pay no attention')
                ),
            ),
        ),
        'submit' => array(
            '#type' => 'submit',
            '#value' => t('Submit'),
            '#submit' => array('ebms_store_doc'),
        ),
        '#attributes' => array(
            'enctype' => 'multipart/form-data'
        ),
    );
}

function ebms_store_doc($form, &$form_state) {
    $file = file_save_upload('doc_file');
    if ($file) {
        $now = date('c');
        $desc = $form_state['values']['brief_description'];
        $public = $form_state['values']['options']['global'] ? 1 : 0;
        file_move($file);
        file_set_status($file, FILE_STATUS_PERMANENT);
        drupal_write_record('files', $file, 'fid');
        db_query('
INSERT INTO {ebms_doc} (file_id, when_posted, description, is_public)
     VALUES (%d, \'%s\', \'%s\', %d)', $file->fid, $now, $desc, $public);
        $docId = db_last_insert_id('ebms_doc', 'doc_id');
        foreach ($form_state['values']['boards'] as $id => $val) {
            db_query('
INSERT INTO {ebms_doc_board} (doc_id, board_id) VALUES (%d, %d)',
                     $docId, $id);
        }
        foreach ($form_state['values']['subgroups'] as $id => $val) {
            db_query('
INSERT INTO {ebms_doc_subgroup} (doc_id, sg_id) VALUES (%d, %d)',
                     $docId, $id);
        }
        foreach ($form_state['values']['users'] as $id => $val) {
            db_query('
INSERT INTO {ebms_doc_user} (doc_id, user_id) VALUES (%d, %d)',
                     $docId, $id);
        }
        $name = $file->filename;
        drupal_set_message("<b class='success'>Document $name saved.</b>");
    }
    else
        drupal_set_message('<b class="error">Unable to store document!</b>');
/*
    $f = var_export($file, true);
    $boards = implode('**', $form_state['values']['boards']);
    $sg = var_export($form_state['values']['subgroups'], true);
    $users = var_export($form_state['values']['users'], true);
    drupal_set_message("<br /><b>description is $desc; boards is $boards; global is $global; sg is $sg; users is $users; file is $f</b>");
*/
}

/*======================================================================*/
/*                                INFO                                  */
/*======================================================================*/
class EbmsInfoDoc {
    function EbmsInfoDoc($row) {
        $this->docId = $row->doc_id;
        $this->filepath = $row->filepath;
        $this->filename = $row->filename;
        $this->posted = $row->when_posted;
        $this->desc = $row->description;
    }
}

function ebms_info($docId=null) {
    if ($docId) {
        $rs = db_query('
SELECT f.filepath
  FROM {files} f
  JOIN {ebms_doc} d
    ON d.file_id = f.fid
 WHERE d.doc_id = %d', $docId);
        $filepath = db_result($rs);
        if (!$filepath) {
            drupal_set_message('File not found', 'error');
            drupal_goto('info');
        }
        else {
            $url = file_create_url($filepath);
            drupal_goto($url);
        }
        return;
    }
    drupal_set_title('Information Documents');
    global $user;
    $rs = db_query('
SELECT d.doc_id, f.filepath, f.filename, d.when_posted, d.description
  FROM {files} f
  JOIN {ebms_doc} d
    ON d.file_id = f.fid
 WHERE d.is_public = 1');
    $docs = array();
    while ($row = db_fetch_object($rs))
        $docs[$row->doc_id] = new EbmsInfoDoc($row);
    $queries = array('
SELECT d.doc_id, f.filepath, f.filename, d.when_posted, d.description
  FROM {files} f
  JOIN {ebms_doc} d
    ON d.file_id = f.fid
  JOIN {ebms_doc_board} b
    ON b.doc_id = d.doc_id
  JOIN {ebms_board_member} m
    ON m.board_id = b.board_id
 WHERE d.is_public = 0
   AND m.user_id = %d',
                     '
SELECT d.doc_id, f.filepath, f.filename, d.when_posted, d.description
  FROM {files} f
  JOIN {ebms_doc} d
    ON d.file_id = f.fid
  JOIN {ebms_doc_subgroup} s
    ON s.doc_id = d.doc_id
  JOIN {ebms_subgroup_member} m
    ON m.sg_id = s.sg_id
 WHERE d.is_public = 0
   AND m.user_id = %d',
                     '
SELECT d.doc_id, f.filepath, f.filename, d.when_posted, d.description
  FROM {files} f
  JOIN {ebms_doc} d
    ON d.file_id = f.fid
  JOIN {ebms_doc_user} u
    ON u.doc_id = d.doc_id
 WHERE d.is_public = 0
   AND u.user_id = %d');
    foreach ($queries as $query) {
        $rs = db_query($query, $user->uid);
        while ($row = db_fetch_object($rs))
            if (!array_key_exists($row->doc_id, $docs))
                $docs[$row->doc_id] = new EbmsInfoDoc($row);
    }
    uasort($docs, 'ebms_info_cmp');
    $html = array('<ul>');
    foreach ($docs as $doc) {
        #$url = file_create_url($doc->filepath);
        $url = "info/$doc->docId";
        $desc = htmlspecialchars($doc->desc);
        $html[] = "<li><a href='$url'>$desc</a></li>";
    }
    return implode("\n", $html);
}

function ebms_info_cmp($a, $b) {
    if ($a->desc < $b->desc)
        return -1;
    if ($a->desc > $b->desc)
        return 1;
    return 0;
}

/*======================================================================*/
/*                      LITERATURE PACKETS                              */
/*======================================================================*/
function ebms_assign_lit($command=NULL, $packetId=NULL) {
    switch ($command) {
    case 'delete':
        $rs = db_query('
SELECT c.cycle_name, t.topic_name
  FROM {ebms_lit_packet} p
  JOIN {ebms_lit_review_cycle} c
    ON c.cycle_id = p. cycle_id
  JOIN {ebms_topic} t
    ON t.topic_id = p.topic_id
 WHERE p.packet_id = %d', $packetId);
        $cycleName = $topicName = '';
        while ($row = db_fetch_object($rs)) {
            $cycleName = $row->cycle_name;
            $topicName = $row->topic_name;
        }
        drupal_set_message("Deletion of $cycleName $topicName packet requested");
        break;
    case 'edit':
        return drupal_get_form('ebms_packet_form', $packetId);
    }
    /*
    $html = array("<br />
<button onclick='window.location=\"/ebms/assign-lit/add\"'
>New Packet</button>
<br /><br />
");
    $html = array('<a class="ebms-link" href="/ebms/assign-lit/add"
>Create New Packet</a><br /><br />'); */
    $html = array('<br />');
    $rs = db_query('
  SELECT p.packet_id, t.topic_name, c.cycle_name
    FROM {ebms_lit_packet} p
    JOIN {ebms_lit_review_cycle} c
      ON c.cycle_id = p. cycle_id
    JOIN {ebms_topic} t
      ON t.topic_id = p.topic_id
ORDER BY 2, 3');
    $rows = array();
    while ($row = db_fetch_object($rs))
        $rows[] = $row;
    foreach ($rows as $row) {
        $cycleName = htmlspecialchars($row->cycle_name);
        $topicName = htmlspecialchars($row->topic_name);
        $id = $row->packet_id;
        $reviewers = ebms_get_packet_reviewers_string($id);
        $extra = $reviewers ? " ($reviewers)" : '';
        $url = "/ebms/assign-lit/edit/$id";
        #$html[] = "<a class='ebms-link' href='$url'>Edit</a>&nbsp;\n";
        #$html[] = "<button onclick='window.location=\"$url\"'>Edit</button>&nbsp;\n";
        #$html[] = "<a href='/ebms/assign-lit/delete/$id'>Delete</a>&nbsp;\n";
        #$html[] = "$topicName - $cycleName$extra<br />\n";
        $html[] = "<a class='ebms-link' href='$url'
>$topicName - $cycleName$extra</a><br />\n";
    }
    return implode('', $html);
}

function ebms_add_packet() {
    return drupal_get_form('ebms_packet_form');
}

function ebms_edit_packet($packetId) {
    return drupal_get_form('ebms_packet_form', $packetId);
}

function ebms_get_packet_reviewers_string($packetId) {
    $reviewers = ebms_get_packet_reviewers($packetId);
    switch (sizeof($reviewers)) {
    case 0:
        return '';
    case 1:
        return htmlspecialchars($reviewers[0]);
    default:
        return htmlspecialchars($reviewers[0]) . ' et al.';
    }
}

function ebms_get_packet_reviewers($packetId) {
    $rs = db_query('
  SELECT u.name
    FROM {users} u
    JOIN {ebms_lit_packet_reviewer} r
      ON r.reviewer_id = u.uid
   WHERE r.packet_id = %d
ORDER BY u.name', $packetId);
    $reviewers = array();
    while ($row = db_fetch_object($rs))
        $reviewers[] = $row->name;
    return $reviewers;
}

function ebms_packet_form(&$form_state, $packetId=null) {
    $reviewers = array();
    $selectedDocs = array();
    $docs = ebms_load_docs();
    $topicId = $cycleId = $summaryId = '';
    if ($packetId) {
        $rs = db_query('
SELECT cycle_id, topic_id, summary_id
  FROM {ebms_lit_packet}
 WHERE packet_id = %d', $packetId);
        while ($row = db_fetch_object($rs)) {
            $topicId = $row->topic_id;
            $cycleId = $row->cycle_id;
            $summaryId = $row->summary_id;
        }
        $rs = db_query('
SELECT reviewer_id
  FROM {ebms_lit_packet_reviewer}
 WHERE packet_id = %d', $packetId);
        while ($row = db_fetch_object($rs))
            $reviewers[] = $row->reviewer_id;
        $rs = db_query('
SELECT doc_id
  FROM {ebms_lit_packet_article}
 WHERE packet_id = %d
   AND drop_flag = 0', $packetId);
        while ($row = db_fetch_object($rs))
            $selectedDocs[] = $row->doc_id;
    }
    return array(
        'packet_id' => array(
            '#type' => 'hidden',
            '#value' => $packetId ? $packetId : '',
        ),
        'topic' => array(
            '#title' => t('Topic'),
            '#type' => 'select',
            '#required' => TRUE,
            '#options' => ebms_load_topics(),
            '#default_value' => $topicId,
            '#description' => t('Select topic for review packet'),
        ),
        'cycle' => array(
            '#title' => t('Cycle'),
            '#type' => 'select',
            '#required' => TRUE,
            '#options' => ebms_load_review_cycles(),
            '#default_value' => $cycleId,
            '#description' => t('Select literature review cycle for packet'),
        ),
        'summary' => array(
            '#title' => t('Summary'),
            '#type' => 'select',
            '#required' => TRUE,
            '#options' => $docs,
            '#default_value' => $summaryId,
            '#description' => t('Identify summary associated with packet'),
        ),
        'assignment' => array(
            '#title' => t('Assigned To'),
            '#type' => 'fieldset',
            '#description' => t('Who will be reviewing this packet?'),
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
            'boards' => array(
                '#title' => 'Boards',
                '#type' => 'select',
                '#multiple' => TRUE,
                '#options' => load_ebms_boards(),
                '#collapsible' => TRUE,
                '#collapsed' => TRUE,
            ),
            'subgroups' => array(
                '#title' => 'Subgroups',
                '#type' => 'select',
                '#multiple' => TRUE,
                '#options' => ebms_load_subgroups(),
                '#collapsible' => TRUE,
                '#collapsed' => TRUE,
            ),
            'adhocgroups' => array(
                '#title' => 'Ad-hoc groups',
                '#type' => 'select',
                '#multiple' => TRUE,
                '#options' => ebms_load_ad_hoc_groups(),
                '#collapsible' => TRUE,
                '#collapsed' => TRUE,
            ),
            'individuals' => array(
                '#title' => 'Individual reviewers',
                '#type' => 'select',
                '#multiple' => TRUE,
                '#options' => ebms_load_users(),
                '#default_value' => $reviewers,
                '#collapsible' => TRUE,
                '#collapsed' => TRUE,
            ),
            /*
            'options' => array(
                '#title' => t('Options'),
                '#type' => 'checkboxes',
                '#options' => array(
                    'global' => t('Available to all users?'),
                    #'foobar' => t('pay no attention')
                ),
            ),
            */
        ),
        'docs' => array(
            '#title' => t('Articles'),
            '#type' => 'select',
            '#required' => TRUE,
            '#multiple' => TRUE,
            '#options' => $docs,
            '#default_value' => $selectedDocs,
            '#description' => t('Select articles to be reviewed'),
        ),
        'submit' => array(
            '#type' => 'submit',
            '#value' => t('Submit'),
            '#submit' => array('ebms_store_packet'),
        ),
    );
}

function ebms_resolve_groups($form_state) {
    $users = array();
    foreach ($form_state['values']['boards'] as $id => $name) {
        $rs = db_query('
SELECT user_id
  FROM {ebms_board_member}
 WHERE board_id = %d', $id);
        while ($row = db_fetch_object($rs))
            $users[] = $row->user_id;
    }
    foreach ($form_state['values']['subgroups'] as $id => $name) {
        $rs = db_query('
SELECT user_id
  FROM {ebms_subgroup_member}
 WHERE sg_id = %d', $id);
        while ($row = db_fetch_object($rs))
            $users[] = $row->user_id;
    }
    foreach ($form_state['values']['adhocgroups'] as $id => $name) {
        $rs = db_query('
SELECT user_id
  FROM {ebms_ad_hoc_group_member}
 WHERE group_id = %d', $id);
        while ($row = db_fetch_object($rs))
            $users[] = $row->user_id;
    }
    foreach ($form_state['values']['individuals'] as $id => $name)
        $users[] = $id;
    return array_unique($users);
}

/**
 * Just enough information about a document assigned to a packet to
 * create picklists.  This class is used for the interface supporting
 * creation and editing of the packets by the board managers.  See
 * also class EbmsArticle, which collect much more complete information,
 * such as filenames, review dates, descriptions, etc.  That class is
 * used for the review interface used by the board members.
 */
class EbmsPacketDoc {
    function EbmsPacketDoc($docId, $articleId, $dropFlag) {
        $this->docId = $docId;
        $this->articleId = $articleId;
        $this->dropped = $dropFlag ? true : false;
    }
}

function ebms_find_docs_in_packet($packetId) {
    $docs = array();
    $rs = db_query('
SELECT article_id, doc_id, drop_flag
  FROM {ebms_lit_packet_article}
 WHERE packet_id = %d', $packetId);
    while ($row = db_fetch_object($rs))
        $docs[$row->doc_id] = new EbmsPacketDoc($row->doc_id, $row->article_id,
                                                $row->drop_flag);
    return $docs;
}

function ebms_store_packet($form, &$form_state) {

    // What does the manager want in the packet now?
    $packetId = $form_state['values']['packet_id'];
    $cycleId = $form_state['values']['cycle'];
    $topicId = $form_state['values']['topic'];
    $summaryId = $form_state['values']['summary'];
    $docs = array();
    foreach ($form_state['values']['docs'] as $id => $desc)
        $docs[] = $id;
    $reviewers = ebms_resolve_groups($form_state);

    // If the packet doesn't already exist, create it.
    if (!$packetId) {
        $docsToAdd = $docs;
        global $user;
        db_query('
INSERT INTO {ebms_lit_packet} (cycle_id, topic_id, created_by, summary_id)
     VALUES (%d, %d, %d, %d)', $cycleId, $topicId, $user->uid, $summaryId);
        $packetId = db_last_insert_id('ebms_lit_packet', 'packet_id');
    }
    else {

        // Which articles are in the package now?
        $docsInPacket = ebms_find_docs_in_packet($packetId);
        $docsToAdd = array();

        // Add the articles the manager wants in the packet now.
        foreach ($docs as $docId) {
            $docInPacket = $docsInPacket[$docId];
            if ($docInPacket) {

                // If the article was there, then suppressed, unsuppress it.
                if ($docInPacket->dropped)
                    db_query('
UPDATE {ebms_lit_packet_article}
   SET drop_flag = 0
 WHERE article_id = %d', $docInPacket->articleId);
            }
            else

                // Wasn't ever in the packet; we'll add it below.
                $docsToAdd[] = $docId;
        }

        // Mark articles the manager no longer wants in the packet.
        // Doing it this way avoids trouble with articles that have
        // already been reviewed.
        foreach ($docsInPacket as $docInPacket) {
            if (!$docInPacket->dropped)
                if (!in_array($docInPacket->docId, $docs))
                    db_query('
UPDATE {ebms_lit_packet_article}
   SET drop_flag = 1
 WHERE article_id = %d', $docInPacket->articleId);
        }
        db_query('
UPDATE {ebms_lit_packet}
   SET cycle_id = %d,
       topic_id = %d,
       summary_id = %d
 WHERE packet_id = %d', $cycleId, $topicId, $summaryId, $packetId);

        // We'll rebuild the list of reviewers; doesn't affect existing
        // reviews of articles in the packet.
        db_query('DELETE FROM {ebms_lit_packet_reviewer} WHERE packet_id = %d',
                 $packetId);
    }
    foreach ($docsToAdd as $docId)
        db_query('
INSERT INTO {ebms_lit_packet_article} (packet_id, doc_id)
     VALUES (%d, %d)',
                 $packetId, $docId);
    foreach ($reviewers as $userId)
        db_query('
INSERT INTO {ebms_lit_packet_reviewer} (packet_id, reviewer_id)
     VALUES (%d, %d)',
                 $packetId, $userId);
    drupal_goto('assign-lit');
}

/*======================================================================*/
/*                          AD-HOC GROUPS                               */
/*======================================================================*/
function ebms_ad_hoc_groups() {
    /*
    $html = array("<br />
<button onclick='window.location=\"/ebms/ad-hoc-groups/add\"'>Add New Group</button>
<br /><br />
");
    $html = array("<a class='ebms-link' href='/ebms/ad-hoc-groups/add'
>Add New Group</a><br /><br />");
    */
    $html = array();
    $rs = db_query('
  SELECT group_id, group_name
    FROM {ebms_ad_hoc_group}
ORDER BY group_name');
    while ($row = db_fetch_object($rs)) {
        $name = htmlspecialchars($row->group_name);
        $id = $row->group_id;
        /*
        $html[] = "
<button onclick='window.location=\"/ebms/ad-hoc-groups/edit/$id\"'
>Edit</button
>&nbsp;<button onclick='window.location=\"/ebms/ad-hoc-groups/delete/$id\"'
>Delete</button>&nbsp;$name<br />
";
        */
        $html[] = "
<a href='/ebms/ad-hoc-groups/edit/$id'>Edit</a>&nbsp;
<a href='/ebms/ad-hoc-groups/delete/$id'>Delete</a>&nbsp; $name<br />
";
    }
    return implode('', $html);
}

function ebms_edit_ad_hoc_group($groupId) {
    return drupal_get_form('ebms_ad_hoc_group_form', $groupId);
}

function ebms_delete_ad_hoc_group($groupId) {
    $rs = db_query('
SELECT group_name
  FROM {ebms_ad_hoc_group}
 WHERE group_id = %d', $groupId);
    $name = db_result($rs);
    db_query('DELETE FROM {ebms_ad_hoc_group_member} WHERE group_id = %d',
             $groupId);
    db_query('DELETE FROM {ebms_ad_hoc_group} WHERE group_id = %d',
             $groupId);
    drupal_set_message("<p><i>Group $name deleted</i></p>");
    drupal_goto('ad-hoc-groups');
}

function ebms_ad_hoc_group_form(&$form_state, $groupId=null) {
    $members = array();
    $name = '';
    if ($groupId) {
        $rs = db_query('
SELECT group_name
  FROM {ebms_ad_hoc_group}
 WHERE group_id = %d', $groupId);
        $name = db_result($rs);
        $rs = db_query('
SELECT user_id
  FROM {ebms_ad_hoc_group_member}
 WHERE group_id = %d', $groupId);
        while ($row = db_fetch_object($rs))
            $members[] = $row->user_id;
    }
        
    return array(
        'group_name' => array(
            '#title' => t('Group Name'),
            '#default_value' => $name,
            '#type' => 'textfield',
            '#required' => TRUE,
            '#description' => t('Pick a unique name for the ad-hoc group'),
        ),
        'members' => array(
            '#title' => 'Members',
            '#type' => 'select',
            '#multiple' => TRUE,
            '#default_value' => $members,
            '#description' => t('Control+click to add multiple members'),
            '#options' => ebms_load_users(),
        ),
        'group_id' => array(
            '#type' => 'hidden',
            '#value' => $groupId ? $groupId : '',
        ),
        'submit' => array(
            '#type' => 'submit',
            '#value' => t('Save'),
            '#submit' => array('ebms_store_ad_hoc_group'),
        ),
    );
}

function ebms_store_ad_hoc_group($form, &$form_state) {
    $groupId = $form_state['values']['group_id'];
    if (!$groupId) {
        global $user;
        db_query('
INSERT INTO {ebms_ad_hoc_group} (group_name, created_by)
     VALUES (\'%s\', %d)', $form_state['values']['group_name'], $user->uid);
        $groupId = db_last_insert_id('ebms_ad_hoc_group', 'group_id');
    }
    else {
        db_query('
UPDATE {ebms_ad_hoc_group}
   SET group_name = \'%s\'
 WHERE group_id = %d', $form_state['values']['group_name'], $groupId);
        db_query('DELETE FROM {ebms_ad_hoc_group_member} WHERE group_id = %d',
                 $groupId);
    }
    foreach ($form_state['values']['members'] as $id => $val) {
        db_query('
INSERT INTO {ebms_ad_hoc_group_member} (user_id, group_id) VALUES (%d, %d)',
                 $id, $groupId);
    }
    drupal_goto('ad-hoc-groups');
    #return "AD HOC GROUP STORED (JK)";
}

/*======================================================================*/
/*                        LITERATURE REVIEWS                            */
/*======================================================================*/

/**
 * Collects detailed information about each article assigned for review.
 */
class EbmsArticle {
    function EbmsArticle($articleId, $reviewerId=0) {
        $this->articleId = $articleId;
        $this->reviewed = null;
        $rs = db_query('
  SELECT a.doc_id, d.description, f.filename, f.filepath, f.filemime,
         f.filesize
    FROM {ebms_lit_packet_article} a
    JOIN {ebms_doc} d
      ON d.doc_id = a.doc_id
    JOIN {files} f
      ON f.fid = d.file_id
   WHERE a.article_id = %d
ORDER BY f.filename', $articleId);
        while ($row = db_fetch_object($rs)) {
            $this->docId = $row->doc_id;
            $this->description = $row->description;
            $this->filename = $row->filename;
            $this->filepath = $row->filepath;
            $this->filemime = $row->filemime;
            $this->filesize = $row->filesize;
        }
        if ($reviewerId) {
            $rs = db_query('
SELECT when_posted
  FROM {ebms_article_review}
 WHERE article_id = %d
   AND reviewer_id = %d', $articleId, $reviewerId);
            while ($row = db_fetch_object($rs))
                $this->reviewed = $row->when_posted;
        }
    }
}

function ebms_review_lit($command=null, $itemId=null) {
    global $user;
    switch ($command) {
    case 'packet':
        $rs = db_query('
SELECT c.cycle_name, t.topic_name, p.summary_id
  FROM {ebms_lit_packet} p
  JOIN {ebms_lit_review_cycle} c
    ON c.cycle_id = p.cycle_id
  JOIN {ebms_topic} t
    ON t.topic_id = p.topic_id
 WHERE p.packet_id = %d', $itemId);
        $cycleName = $topicName = $summaryId = '';
        while ($row = db_fetch_object($rs)) {
            $cycleName = htmlspecialchars($row->cycle_name);
            $topicName = htmlspecialchars($row->topic_name);
            $summaryId = $row->summary_id;
        }
        $html = array("<h3>$cycleName $topicName Packet</h3>");
        if ($summaryId) {
            $rs = db_query('
SELECT f.filepath
  FROM {files} f
  JOIN {ebms_doc} d
    ON f.fid = d.file_id
 WHERE d.doc_id = %d', $summaryId);
            $url = file_create_url(db_result($rs));
            $title = 'Click to download/open summary for this review cycle';
            $label = 'Summary Document';
            $html[] = "<a href='$url' title='$title'><b>$label</b></a><br />";
        }
        $docsInPacket = ebms_find_docs_in_packet($itemId);
        if (count($docsInPacket) == 0) {
            $html[] = "<b>No Articles In Packet</b>";
            return implode('', $html);
        }
        $html[] = '<ol>';
        foreach ($docsInPacket as $docInPacket) {
            $articleId = $docInPacket->articleId;
            if (!$docInPacket->dropped) {
                $article = new EbmsArticle($articleId, $user->uid);
                $title = htmlspecialchars($article->description);
                $name = htmlspecialchars($article->filename);
                $tail = strtolower(substr($name, -4));
                if ($tail == '.pdf')
                    $name = substr($name, 0, strlen($name) - 4);
                $reviewed = '';
                if ($article->reviewed)
                    $reviewed = " (reviewed {$article->reviewed})";
                $url = "/ebms/review-lit/article/$articleId";
                $html[] = "<li><a href=\"$url\" title=\"$title\">$name</a>$reviewed</li>";
            }
        }
        $html[] = '</ol><h3>Reviewer Uploads</h3>';
        $html[] = drupal_get_form('ebms_reviewer_upload_form', $itemId);
        $rs = db_query('
  SELECT d.doc_id, d.doc_title, d.when_posted, d.description, f.filepath
    FROM {ebms_reviewer_doc} d
    JOIN {files} f
      ON f.fid = d.file_id
   WHERE reviewer_id = %d
     AND packet_id = %d
ORDER BY when_posted DESC', $user->uid, $itemId);
        $reviewerDocs = array();
        while ($row = db_fetch_object($rs))
            $reviewerDocs[] = $row;
        if (sizeof($reviewerDocs) > 0) {
            $html[] = '<ul>';
            foreach ($reviewerDocs as $reviewerDoc) {
                $whenPosted = $reviewerDoc->when_posted;
                $title = htmlspecialchars($reviewerDoc->doc_title);
                $url = file_create_url($reviewerDoc->filepath);
                $html[] = "
<li><a href='$url' title='posted $whenPosted'>$title</a></li>";
            }
            $html[] = '</ul>';
        }
        return implode('', $html);
    case 'article':
        $article = new EbmsArticle($itemId);
        $url = file_create_url($article->filepath);
        $name = htmlspecialchars($article->filename);
        $desc = htmlspecialchars($article->description);
        return "
<br /><a href=\"$url\">$name</a><br /><br />
<b>Description:</b><br />$desc" . drupal_get_form('ebms_review_lit_form', $itemId);
    default:
        global $user;
        $rs = db_query('
  SELECT p.packet_id, c.cycle_name, t.topic_name
    FROM {ebms_lit_packet} p
    JOIN {ebms_lit_review_cycle} c
      ON c.cycle_id = p.cycle_id
    JOIN {ebms_topic} t
      ON t.topic_id = p.topic_id
    JOIN {ebms_lit_packet_reviewer} r
      ON r.packet_id = p.packet_id
   WHERE r.reviewer_id = %d
ORDER BY c.cycle_id', $user->uid);
        $packets = array();
        while ($row = db_fetch_object($rs))
            $packets[] = $row;
        if (count($packets) == 0)
            return '<p><b>No literature packets have been assigned to you for review.</b></p>';
        $html = array('<h3>Literature Packets</h3><ol>');
        foreach ($packets as $packet) {
            $docsInPacket = ebms_find_docs_in_packet($packet->packet_id);
            $rs = db_query('
SELECT r.article_id
  FROM {ebms_article_review} r
  JOIN {ebms_lit_packet_article} a
    ON a.article_id = r.article_id
 WHERE a.packet_id = %d
   AND r.reviewer_id = %d', $packet->packet_id, $user->uid);
            $reviewed = array();
            while ($row = db_fetch_object($rs))
                $reviewed[] = $row->article_id;
            $unreviewed = 0;
            foreach ($docsInPacket as $docInPacket) {
                if (!$docInPacket->dropped) {
                    if (!in_array($docInPacket->articleId, $reviewed)) {
                        ++$unreviewed;
                    }
                }
            }
            $packetId = $packet->packet_id;
            $cycleName = htmlspecialchars($packet->cycle_name);
            $topicName = htmlspecialchars($packet->topic_name);
            $url = "/ebms/review-lit/packet/$packetId";
            $html[] = "<li><a href=\"$url\">$topicName ($cycleName)</a>" .
                " - $unreviewed article(s) not yet reviewed</li>";
        }
        $html[] = '</ol>';
        return implode('', $html);
    }
}
function ebms_reviewer_upload_form(&$form_state, $packetId) {
    return array(
        'packet_id' => array(
            '#type' => 'hidden',
            '#value' => $packetId,
        ),
        'reviewer-upload' => array(
            '#title' => t('Post Document'),
            '#type' => 'fieldset',
            '#description' => t('Post materials relevant to this packet (e.g., summary with proposed modifications)'),
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
            'doc_file' => array(
                '#title' => t('Document File'),
                '#type' => 'file',
                '#required' => false,
                '#element_validate' => array('ebms_doc_file_required'),
                '#description' => t('Document cannot be larger than 20MB'),
             ),
            'title' => array(
                '#title' => t('Brief description'),
                '#type' => 'textfield',
                '#description' => t('How you want the document identified in lists'),
                '#required' => true,
                '#maxlength' => 255,
            ),
            'comments' => array(
                '#title' => t('Notes'),
                '#type' => 'textarea',
                '#cols' => 120,
                '#rows' => 10,
                '#resizable' => TRUE,
                '#description' => t('Detailed comments about this document'),
            ),
            'submit' => array(
                '#type' => 'submit',
                '#value' => t('Submit'),
                '#submit' => array('ebms_store_reviewer_upload'),
            ),
        ),
        '#attributes' => array(
            'enctype' => 'multipart/form-data'
        ),
    );
}

function ebms_store_reviewer_upload($form, &$form_state) {
    global $user;
    $file = file_save_upload('doc_file');
    if ($file) {
        $now = date('c');
        $title = $form_state['values']['title'];
        $comments = $form_state['values']['comments'];
        $packetId = $form_state['values']['packet_id'];
        file_move($file);
        file_set_status($file, FILE_STATUS_PERMANENT);
        drupal_write_record('files', $file, 'fid');
        db_query('
INSERT INTO {ebms_reviewer_doc} (file_id, packet_id, doc_title, reviewer_id,
                                 when_posted, description)
     VALUES (%d, %d, \'%s\', %d, \'%s\', \'%s\')',
                 $file->fid, $packetId, $title, $user->uid, $now, $comments);
        $docId = db_last_insert_id('ebms_doc', 'doc_id');
    }
    else
        drupal_set_message('<b class="error">Unable to store document!</b>');
}

function ebms_review_lit_form(&$form_state, $articleId) {
    global $user;
    $reviewId = $comments = $loeInfo = '';
    $options = array();
    $rs = db_query('
SELECT review_id, review_flags, comments, loe_info
  FROM {ebms_article_review}
 WHERE article_id = %d
   AND reviewer_id = %d', $articleId, $user->uid);
    while ($row = db_fetch_object($rs)) {
        $reviewId = $row->review_id;
        $comments = $row->comments;
        $loeInfo = $row->loe_info;
        $flags = $row->review_flags;
        if ($flags & EBMS_ARTICLE_WARRANTS_NO_CHANGES)
            $options[] = EBMS_ARTICLE_WARRANTS_NO_CHANGES;
        if ($flags & EBMS_ARTICLE_DESERVES_CITATION)
            $options[] = EBMS_ARTICLE_DESERVES_CITATION;
        if ($flags & EBMS_ARTICLE_MERITS_REVISION_OF_TEXT)
            $options[] = EBMS_ARTICLE_MERITS_REVISION_OF_TEXT;
        if ($flags & EBMS_ARTICLE_MERITS_DISCUSSION)
            $options[] = EBMS_ARTICLE_MERITS_DISCUSSION;
    }
    $rs = db_query('
SELECT f.filepath, b.board_name
  FROM {ebms_board} b
  JOIN {ebms_topic} t
    ON t.board_id = b.board_id
  JOIN {ebms_lit_packet} p
    ON p.topic_id = t.topic_id
  JOIN {ebms_lit_packet_article} a
    ON a.packet_id = p.packet_id
  JOIN {ebms_doc} d
    ON d.doc_id = b.loe_guidelines
  JOIN {files} f
    ON d.file_id = f.fid
 WHERE a.article_id = %d', $articleId);
    $loeGuidelines = '';
    while ($row = db_fetch_object($rs)) {
        $filepath = $row->filepath;
        $boardName = htmlspecialchars($row->board_name);
        $url = file_create_url($filepath);
        $loeGuidelines = "
<a href='$url'>LOE Guidelines</a> for $boardName board<br /><br />";
    }
    drupal_add_js('
function ebmsClearFirstOption(e) {
    if ($(e.target).is(":checked"))
        $("#edit-options-1").removeAttr("checked");
}
function ebmsClearOtherOptions(e) {
    if ($(e.target).is(":checked")) {
        $("#edit-options-2").removeAttr("checked");
        $("#edit-options-4").removeAttr("checked");
        $("#edit-options-8").removeAttr("checked");
    }
}
$(document).ready(function() {
    $("#edit-options-1").click(ebmsClearOtherOptions);
    $("#edit-options-2").click(ebmsClearFirstOption);
    $("#edit-options-4").click(ebmsClearFirstOption);
    $("#edit-options-8").click(ebmsClearFirstOption);
});
', 'inline');
    return array(
        'review_id' => array(
            '#type' => 'hidden',
            '#value' => $reviewId ? $reviewId : '',
        ),
        'article_id' => array(
            '#type' => 'hidden',
            '#value' => $articleId,
        ),
        'options' => array(
            '#title' => t('Disposition'),
            '#type' => 'checkboxes',
            '#required' => TRUE,
            '#options' => array(
                EBMS_ARTICLE_WARRANTS_NO_CHANGES =>
                t('Warrants no changes to the summary.'),
                EBMS_ARTICLE_DESERVES_CITATION =>
                t('Deserves citation in the summary (indicate placement in the summary document).'),
                EBMS_ARTICLE_MERITS_REVISION_OF_TEXT =>
                t('Merits revision of the text (indicate changes in the summary document).'),
                EBMS_ARTICLE_MERITS_DISCUSSION =>
                t('Merits discussion.')
            ),
            '#default_value' => $options,
            '#description' =>
            t('Indicate how the article might affect the summary'),
        ),
        'comments' => array(
            '#title' => t('Comments'),
            '#type' => 'textarea',
            '#cols' => 120,
            '#rows' => 10,
            '#resizable' => TRUE,
            '#required' => TRUE,
            '#default_value' => $comments,
            '#description' => t('Detailed recommendations'),
        ),
        'loe' => array(
            '#title' => t('LOE information'),
            '#type' => 'textfield',
            '#description' => t('Levels of evidence'),
            '#required' => FALSE,
            '#default_value' => $loeInfo,
            '#suffix' => $loeGuidelines,
            '#maxlength' => 255,
        ),
        'submit' => array(
            '#type' => 'submit',
            '#value' => t('Submit'),
            '#submit' => array('ebms_store_review'),
        ),
    );
}

function ebms_store_review($form, &$form_state) {

    // Collect the data from the form.
    $reviewId = $form_state['values']['review_id'];
    $articleId = $form_state['values']['article_id'];
    $comments = $form_state['values']['comments'];
    $loeInfo = $form_state['values']['loe'];
    $options = $form_state['values']['options'];
    $flags = 0;
    if ($options[EBMS_ARTICLE_WARRANTS_NO_CHANGES])
        $flags |= EBMS_ARTICLE_WARRANTS_NO_CHANGES;
    if ($options[EBMS_ARTICLE_DESERVES_CITATION])
        $flags |= EBMS_ARTICLE_DESERVES_CITATION;
    if ($options[EBMS_ARTICLE_MERITS_REVISION_OF_TEXT])
        $flags |= EBMS_ARTICLE_MERITS_REVISION_OF_TEXT;
    if ($options[EBMS_ARTICLE_MERITS_DISCUSSION])
        $flags |= EBMS_ARTICLE_MERITS_DISCUSSION;
    $now = date('c');

    // If the review doesn't exist already, create it.
    if (!$reviewId) {
        global $user;
        db_query('
INSERT INTO {ebms_article_review} (article_id, reviewer_id, when_posted,
                                   review_flags, comments, loe_info)
     VALUES (%d, %d, \'%s\', %d, \'%s\', \'%s\')',
                 $articleId, $user->uid, $now, $flags, $comments, $loeInfo);
        $reviewId = db_last_insert_id('ebms_article_review', 'review_id');
    }
    else
        db_query('
UPDATE {ebms_article_review}
   SET when_posted = \'%s\',
       review_flags = %d,
       comments = \'%s\',
       loe_info = \'%s\'
 WHERE review_id = %d', $now, $flags, $comments, $loeInfo, $reviewId);
    $rs = db_query('
SELECT packet_id
  FROM {ebms_lit_packet_article}
 WHERE article_id = %d', $articleId);
    $packetId = db_result($rs);
    drupal_goto("review-lit/packet/$packetId");
}

function ebms_reviews($packetId=null, $new=false) {
    global $user;
    $html = array();
    if (!$packetId) {
        if ($user->uid == 1)
            $rs = db_query('
  SELECT b.board_id, b.board_name
    FROM {ebms_board} b
ORDER BY b.board_name');
        else
            $rs = db_query('
  SELECT b.board_id, b.board_name
    FROM {ebms_board} b
    JOIN {ebms_board_member} m
      ON m.board_id = b.board_id
   WHERE m.user_id = %d
ORDER BY b.board_name', $user->uid);
        $boards = array();
        while ($row = db_fetch_object($rs))
            $boards[] = $row;
        foreach ($boards as $board) {
            $rs = db_query('
  SELECT p.packet_id, c.cycle_name, t.topic_name
    FROM {ebms_lit_packet} p
    JOIN {ebms_lit_review_cycle} c
      ON c.cycle_id = p.cycle_id
    JOIN {ebms_topic} t
      ON t.topic_id = p.topic_id
    JOIN {ebms_lit_packet_article} a
      ON a.packet_id = p.packet_id
    JOIN {ebms_article_review} r
      ON r.article_id = a.article_id
   WHERE t.board_id = %d
GROUP BY p.packet_id, c.cycle_name, t.topic_name
ORDER BY c.cycle_id, t.topic_name', $board->board_id);
            $packets = array();
            while ($row = db_fetch_object($rs))
                $packets[] = $row;
            if (sizeof($packets) < 1)
                continue;
            $name = htmlspecialchars($board->board_name);
            $html[] = "<h3>Packets With Reviews for $name Board</h3>";
            foreach ($packets as $row) {
                $count = $row->num_reviews;
                $packetId = $row->packet_id;
                $cycleName = htmlspecialchars($row->cycle_name);
                $topicName = htmlspecialchars($row->topic_name);
                $reviewers = ebms_get_packet_reviewers_string($packetId);
                $url = "/ebms/reviews/$packetId";
                $html[] = "<a href='$url'>$topicName - $cycleName - $reviewers</a>";
                $html[] = " ($count reviews)<br />";
            }
        }
    }
    else {
        $rs = db_query('
SELECT c.cycle_name, t.topic_name
  FROM {ebms_lit_packet} p
  JOIN {ebms_lit_review_cycle} c
    ON c.cycle_id = p.cycle_id
  JOIN {ebms_topic} t
    ON t.topic_id = p.topic_id
 WHERE p.packet_id = %d', $packetId);
        $topicName = $cycleName = '';
        while ($row = db_fetch_object($rs)) {
            $topicName = htmlspecialchars($row->topic_name);
            $cycleName = htmlspecialchars($row->cycle_name);
        }
        $reviewers = ebms_get_packet_reviewers_string($packetId);
        $html[] = "<h3>Literature Reviews for $topicName - $cycleName</h3>";
        $html[] = "<h4><i>Assigned to $reviewers</i></h4>";

        $lastDocId = 0;
        $rs = db_query('
  SELECT f.filename, d.description, u.name, r.when_posted, r.review_flags,
         r.comments, r.loe_info, a.doc_id
    FROM {ebms_article_review} r
    JOIN {ebms_lit_packet_article} a
      ON a.article_id = r.article_id
    JOIN {ebms_doc} d
      ON d.doc_id = a.doc_id
    JOIN {files} f
      ON f.fid = d.file_id
    JOIN {users} u
      ON u.uid = r.reviewer_id
   WHERE a.packet_id = %d
ORDER BY f.filename, a.doc_id, r.when_posted', $packetId);
        while ($row = db_fetch_object($rs)) {
            if ($row->doc_id != $lastDocId) {
                $filename = htmlspecialchars($row->filename);
                $description = htmlspecialchars($row->description);
                $html[] = "<p style='border: 2px black solid; padding: 4px'>";
                $html[] = "<b>$filename</b><br />";
                $html[] = "<i>$description</i></p>";
                $lastDocId = $row->doc_id;
            }
            else
                $html[] = '<hr />';
            $reviewer = htmlspecialchars($row->name);
            $reviewed = $row->when_posted;
            $comments = htmlspecialchars($row->comments);
            $loeInfo = htmlspecialchars($row->loe_info);
            $flags = $row->review_flags;
            $html[] = "<p><b>Reviewer</b>: $reviewer</p>";
            $html[] = "<p><b>When reviewed</b>: $reviewed</p>";
            $html[] = "<p><b>Options:</b><ul>";
            if ($flags & EBMS_ARTICLE_WARRANTS_NO_CHANGES)
                $html[] = '<li>Article warrants no changes</li>';
            if ($flags & EBMS_ARTICLE_DESERVES_CITATION)
                $html[] = '<li>Article deserves citation</li>';
            if ($flags & EBMS_ARTICLE_MERITS_REVISION_OF_TEXT)
                $html[] = '<li>Article merits revision of text</li>';
            if ($flags & EBMS_ARTICLE_MERITS_DISCUSSION)
                $html[] = '<li>Article merits discussion</li>';
            $html[] = "</ul></p><p><b>Comments</b>:<br />$comments</p>";
            if ($loeInfo)
                $html[] = "<p><b>LOE Info</b>: $loeInfo</p>";
        }

        $rs = db_query('
  SELECT d.doc_id, d.doc_title, d.when_posted, d.description, f.filepath,
         f.filename, r.name
    FROM {ebms_reviewer_doc} d
    JOIN {files} f
      ON f.fid = d.file_id
    JOIN {users} r
      ON r.uid = d.reviewer_id
   WHERE d.packet_id = %d
ORDER BY d.when_posted DESC', $packetId);
        $reviewerDocs = array();
        while ($row = db_fetch_object($rs))
            $reviewerDocs[] = $row;
        if (sizeof($reviewerDocs) > 0) {
            $html[] = '<h3>Documents Uploaded by Reviewers</h3>
<table>
 <tr>
  <th>Document</th>
  <th>Reviewer</th>
  <th>Uploaded</th>
 </tr>
';
            foreach ($reviewerDocs as $reviewerDoc) {
                $whenPosted = $reviewerDoc->when_posted;
                $title = htmlspecialchars($reviewerDoc->doc_title);
                $url = file_create_url($reviewerDoc->filepath);
                $desc = htmlspecialchars($reviewerDoc->description);
                $reviewer = htmlspecialchars($reviewerDoc->name);
                $html[] = "
<tr>
 <td><a href='$url' title=\"$desc\">$title</a></td>
 <td>$reviewer</td>
 <td>$whenPosted</td>
</tr>
";
            }
            $html[] = '</table>';
        }
    }

    return implode('', $html);
}

/*======================================================================*/
/*                             ANNOUNCEMENTS                            */
/*======================================================================*/
class EbmsMessage {
    function EbmsMessage($messageId, $loadRecips=true, $loadBody=true) {
        $bodyCol = $loadBody ? ', m.msg_body' : '';
        $rs = db_query("
SELECT u.name, m.sender_id, m.when_posted, m.msg_subject $bodyCol
  FROM {ebms_message} m
  JOIN {users} u
    ON m.sender_id = u.uid
 WHERE m.message_id = %d", $messageId);
        $this->messageId = $messageId;
        while ($row = db_fetch_object($rs)) {
            $this->senderName = $row->name;
            $this->senderId = $row->sender_id;
            $this->posted = $row->when_posted;
            $this->subject = $row->msg_subject;
            if ($loadBody)
                $this->body = $row->msg_body;
        }
        if ($loadRecips) {
            $this->recips = array();
            $rs = db_query('
SELECT recip_id
  FROM {ebms_message_recipient}
 WHERE message_id = %d', $messageId);
            while ($row = db_fetch_object($rs))
                $this->recips[] = $row->recip_id;
        }
    }
    function makeLink($includeSender=true) {
        $sender = $includeSender ? htmlspecialchars($this->senderName) : '';
        $sender = $sender ? " ($sender)" : '';
        $sent = $this->posted;
        $subject = htmlspecialchars($this->subject);
        $url = "/ebms/announcements/view/{$this->messageId}";
        return "<li><a href='$url'>$sent - $subject$sender</a></li>";
    }
}

function ebms_user_name_from_id($userId) {
    $rs = db_query('SELECT name FROM users WHERE uid = %d', $userId);
    return db_result($rs);
}

function ebms_user_names_from_ids($userIds) {
    $names = array();
    foreach ($userIds as $userId)
        $names[] = ebms_user_name_from_id($userId);
    return $names;
}

function ebms_view_announcement($messageId) {
    global $user;
    $messages = array();
    $message = new EbmsMessage($messageId);
    $isRecip = in_array($user->uid, $message->recips);
    $isSender = $user->uid == $message->senderId;
    // drupal_set_message("senderId=$message->senderId userID=$user->uid");
    if (!$isSender && !$isRecip)
        drupal_goto('announcements');
    if ($isRecip)
        db_query('
UPDATE {ebms_message_recipient}
   SET when_read = \'%s\'
 WHERE message_id = %d
   AND recip_id = %d', date('c'), $messageId, $user->uid);
    if ($isSender) {
        $names = ebms_user_names_from_ids($message->recips);
        sort($names);
        $names = implode(', ', $names);
        $recips = '<p><b>Sent To</b>: ' . htmlspecialchars($names) . '</p>';
    }
    else
        $recips = '';
    $sender = htmlspecialchars($message->senderName);
    $subject = htmlspecialchars($message->subject);
    $posted = $message->posted;
    #$body = drupal_wrap_mail(htmlspecialchars($message->body));
    $body = htmlspecialchars(wordwrap($message->body, 140));
    return "
<p><b>Posted By</b>: $sender</p>
<p><b>Date Posted</b>: $posted</p>
<p><b>Subject</b>: $subject</p>
$recips
<p><b>Message</b>:</p>
<pre style='font-size: 9pt'>$body</pre>
";
}

function ebms_announcements($command=null) {
    global $user;
    $messages = array();
    switch ($command) {
    case 'view':
        $message = new EbmsMessage($messageId);
        $isRecip = in_array($user->uid, $message->recips);
        if ($message->senderId != $user->uid && !$isRecip)
            break;
        if ($isRecip)
            db_query('
UPDATE {ebms_message_recipient}
   SET when_read = \'%s\'
 WHERE message_id = %d
   AND recip_id = %d', date('c'), $messageId, $user->uid);
        $sender = htmlspecialchars($message->senderName);
        $subject = htmlspecialchars($message->subject);
        $posted = $message->posted;
        #$body = drupal_wrap_mail(htmlspecialchars($message->body));
        $body = htmlspecialchars(wordwrap($message->body, 140));
        return "
<p><b>Posted By</b>: $sender</p>
<p><b>Date Posted</b>: $posted</p>
<p><b>Subject</b>: $subject</p>
<p><b>Message</b>:</p>
<pre style='font-size: 9pt'>$body</pre>
";
    case 'unread':
        $title = 'Unread Messages';
        $rs = db_query('
  SELECT m.message_id
    FROM {ebms_message} m
    JOIN {ebms_message_recipient} r
      ON r.message_id = m.message_id
   WHERE r.recip_id = %d
     AND when_read IS NULL
ORDER BY when_posted DESC', $user->uid);
        break;
    case 'read':
        $title = 'Messages Previously Read';
        $rs = db_query('
  SELECT m.message_id
    FROM {ebms_message} m
    JOIN {ebms_message_recipient} r
      ON r.message_id = m.message_id
   WHERE r.recip_id = %d
     AND when_read IS NOT NULL
ORDER BY when_posted DESC', $user->uid);
        break;
    case 'mine':
        $title = 'Messages Posted By You';
        $rs = db_query('
  SELECT message_id
    FROM {ebms_message}
   WHERE sender_id = %d
ORDER BY when_posted DESC', $user->uid);
        break;
    }
    $html = array("<h3>$title</h3>");
    while ($row = db_fetch_object($rs))
        $messages[] = $row->message_id;
    /*
    $sentMessages = array();
    $unreadMessages = array();
    $readMessages = array();
    if (user_access('post ebms message')) {
        $url = '/ebms/announcements/post';
        $html[] = '<br /><a href="/ebms/announcements/post">Post New Message</a><br />';
    }
    */
    if (sizeof($messages) == 0) {
        $html[] = '<p>No messages</p>';
        return implode('', $html);
    }
    $html[] = '<ol>';
    foreach ($messages as $messageId) {
        $message = new EbmsMessage($messageId, false, false);
        $html[] = $message->makeLink();
    }
    $html[] = '</ol>'; 
   /*
    if (sizeof($sentMessages) == 0 && sizeof($readMessages) == 0 &&
        sizeof($unreadMessages) == 0) {
        $html[] = "<p>You have no messages.</p>";
        return implode('', $html);
    }
    if (sizeof($unreadMessages) > 0) {
        $html[] = '<h3>Unread Messages</h3><ol>';
        foreach ($unreadMessages as $messageId) {
            $message = new EbmsMessage($messageId, false, false);
            $html[] = $message->makeLink();
        }
        $html[] = '</ol>';
    }
    if (sizeof($readMessages) > 0) {
        $html[] = '<h3>Read Messages</h3><ol>';
        foreach ($readMessages as $messageId) {
            $message = new EbmsMessage($messageId, false, false);
            $html[] = $message->makeLink();
        }
        $html[] = '</ol>';
    }
    if (sizeof($sentMessages) > 0) {
        $html[] = '<h3>Sent Messages</h3><ol>';
        foreach ($sentMessages as $messageId) {
            $message = new EbmsMessage($messageId, false, false);
            $html[] = $message->makeLink(false);
        }
        $html[] = '</ol>';
    }
    */
    return implode('', $html);
}

function ebms_post_message_form() {
    return array(
        'subject' => array(
            '#type' => 'textfield',
            '#title' => 'Title',
            '#required' => TRUE,
            '#maxlength' => 255,
            '#description' => t('Message topic'),
        ),
        'recips' => array(
            '#title' => t('Addressed To'),
            '#type' => 'fieldset',
            '#description' => t('To whom should this message be sent?'),
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
            '#required' => TRUE,
            'boards' => array(
                '#title' => 'Boards',
                '#type' => 'select',
                '#multiple' => TRUE,
                '#options' => load_ebms_boards(),
                '#collapsible' => TRUE,
                '#collapsed' => TRUE,
            ),
            'subgroups' => array(
                '#title' => 'Subgroups',
                '#type' => 'select',
                '#multiple' => TRUE,
                '#options' => ebms_load_subgroups(),
                '#collapsible' => TRUE,
                '#collapsed' => TRUE,
            ),
            'adhocgroups' => array(
                '#title' => 'Ad-hoc groups',
                '#type' => 'select',
                '#multiple' => TRUE,
                '#options' => ebms_load_ad_hoc_groups(),
                '#collapsible' => TRUE,
                '#collapsed' => TRUE,
            ),
            'individuals' => array(
                '#title' => 'Individual recipients',
                '#type' => 'select',
                '#multiple' => TRUE,
                '#options' => ebms_load_users(),
                '#collapsible' => TRUE,
                '#collapsed' => TRUE,
            ),
        ),
        'body' => array(
            '#title' => t('Message'),
            '#type' => 'textarea',
            '#required' => TRUE,
            '#cols' => 120,
            '#rows' => 10,
            '#resizable' => TRUE,
            '#description' => t('Content of announcement message'),
        ),
        'submit' => array(
            '#type' => 'submit',
            '#value' => t('Submit'),
            '#submit' => array('ebms_send_message'),
        ),
    );
}

function ebms_send_message($form, &$form_state) {

    // Collect the data from the form.
    global $user;
    global $language;
    $subject = $form_state['values']['subject'];
    $recips = ebms_resolve_groups($form_state);
    $body = $form_state['values']['body'];
    $now = date('c');
    db_query('
INSERT INTO {ebms_message} (sender_id, when_posted, msg_subject, msg_body)
     VALUES (%d, \'%s\', \'%s\', \'%s\')',
             $user->uid, $now, $subject, $body);
    $replyTo = ebms_format_email_address($user->mail, $user->name);
    $messageId = db_last_insert_id('ebms_message', 'message_id');
    $params = array('body' => $body, 'reply-to' => $replyTo,
                    'subject' => $subject);
    $key = 'notification';
    foreach ($recips as $recipId) {
        db_query('
INSERT INTO {ebms_message_recipient} (message_id, recip_id)
     VALUES (%d, %d)', $messageId, $recipId);
        $rs = db_query('SELECT mail, name FROM {users} WHERE uid = %d',
                       $recipId);
        while ($row = db_fetch_object($rs)) {
            $to = ebms_format_email_address($row->mail, $row->name);
            drupal_mail('ebms', $key, $to, $language, $params, EBMS_FROM);
        }
    }
    drupal_set_message("Your message has been sent.");
    drupal_goto('announcements');
}

/**
 * Our module's implementation of hook_mail().
 */
function ebms_mail($key, &$message, $params) {
    $message['subject'] = $params['subject'];
    $message['body'] = $params['body'];
    if (isset($params['reply-to']))
        $message['headers']['Reply-to'] = $params['reply-to'];
    if (isset($params['boundary'])) {
        $boundary = $params['boundary'];
        $message['headers']['MIME-Version'] = '1.0';
        $message['headers']['Content-Type'] =
            "multipart/alternative; boundary=\"$boundary\"";
        $message['headers']['Content-Transfer-Encoding'] = '8Bit';
        $message['headers']['X-Mailer'] = 'Drupal Mailer';
    }
}

function ebms_format_email_address($email, $name) {
    $name = addslashes(mime_header_encode($name));
    return "\"$name\" <$email>";
}

/*======================================================================*/
/*                                REQUESTS                              */
/*======================================================================*/
function ebms_hotel_reservation_request() {
    return drupal_get_form('ebms_hotel_reservation_request_form');
}

function ebms_reimbursement_request() {
    return drupal_get_form('ebms_reimbursement_request_form');
}

function ebms_hotel_reservation_request_form() {
    return array(
        'meeting' => array(
            '#type' => 'textfield',
            '#title' => 'Meeting',
            '#required' => TRUE,
            '#maxlength' => 128,
            '#description' => t('Which board meeting will you be attending?'),
        ),
        'checkin' => array(
            '#type' => 'textfield',
            '#title' => 'Check-in',
            '#required' => TRUE,
            '#maxlength' => 128,
            '#description' => t('Which day will you be checking in to the hotel?'),
        ),
        'nights' => array(
            '#type' => 'textfield',
            '#title' => 'Nights',
            '#required' => TRUE,
            '#maxlength' => 80,
            '#description' => t('How many nights will you be staying?'),
        ),
        'notes' => array(
            '#title' => t('Notes'),
            '#type' => 'textarea',
            '#required' => FALSE,
            '#cols' => 120,
            '#rows' => 5,
            '#resizable' => TRUE,
            '#description' => t('Provide any special instructions here'),
        ),
        'submit' => array(
            '#type' => 'submit',
            '#value' => t('Submit'),
            '#submit' => array('ebms_store_hotel_reservation_request'),
        ),
    );
}

function ebms_store_hotel_reservation_request($form, &$form_state) {

    // Collect the data from the form.
    $meeting = $form_state['values']['meeting'];
    $checkinDate = $form_state['values']['checkin'];
    $nights = $form_state['values']['nights'];
    $notes = $form_state['values']['notes'];
    $now = time();
    $utcNow = date('c', $now);
    $prettyNow = date('r', $now);
    global $user;
    db_query('
INSERT INTO {ebms_hotel_request} (requestor_id, submitted, checkin_date,
                                  nights, notes, meeting)
     VALUES (%d, \'%s\', \'%s\', \'%s\', \'%s\'), \'%s\'',
             $user->uid, $utcNow, $checkinDate, $nights, $notes, $meeting);
    $replyTo = ebms_format_email_address($user->mail, $user->name);
    $boundary = '----=_NextPart_'.md5(uniqid());
    $bodyText = "Hotel Reservation Request

Request Submitted: $prettyNow
Submitted By: {$user->name}
Meeting: $meeting
Check-in Date: $checkinDate
Nights: $nights
Notes: $notes";
    $userHtml = htmlspecialchars($user->name) . '&nbsp;';
    $meetingHtml = htmlspecialchars($meeting) . '&nbsp;';
    $checkinHtml = htmlspecialchars($checkinDate) . '&nbsp;';
    $nightsHtml = htmlspecialchars($nights) . '&nbsp;';
    $notesHtml = htmlspecialchars($notes) . '&nbsp;';
    $bodyHtml = "<style type='text/css'>
 * { font-family: Arial, sans-serif }
 * { font-family: \"Times New Roman\", Georgia }
 table, h2 { margin-left: 20px; }
 h2 { color: maroon; margin-top: 10px; font-size: 16pt; }
 th { padding-right: 2px; color: maroon; }
 td { width: 500px; }
</style>
<h2>Hotel Reservation Request</h2>
<table border='1' cellpadding='2' cellspacing='0'>
 <tr>
  <th align='right'>Requested By</th>
  <td>$userHtml</td>
 </tr>
 <tr>
  <th align='right'>Request Submitted</th>
  <td>$prettyNow</td>
 </tr>
 <tr>
  <th align='right'>For Meeting</th>
  <td>$meetingHtml</td>
 </tr>
 <tr>
  <th align='right'>Check-in Date</th>
  <td>$checkinHtml</td>
 </tr>
 <tr>
  <th align='right'>Nights</th>
  <td>$nightsHtml</td>
 </tr>
 <tr>
  <th align='right'>Notes</th>
  <td>$notesHtml</td>
 </tr>
</table>";
    $body = "

This is a multi-part message in MIME format.

--$boundary
Content-Type: text/plain; charset=UTF-8; format=flowed; 
Content-Transfer-Encoding: 8bit

$bodyText

--$boundary
Content-Type: text/html; charset=UTF-8; format=flowed; 
Content-Transfer-Encoding: 8bit

$bodyHtml

";
    $params = array('reply-to' => $replyTo,
                    'subject' => 'Hotel reservation request',
                    'body' => $body,
                    'boundary' => $boundary);
    $key = 'hotel reservation';
    global $language;
    drupal_mail('ebms', $key, EBMS_REQUESTEE, $language, $params, EBMS_FROM);
    drupal_set_message('Reservation request submitted');
}

function ebms_theme_reimbursement_request($form) {
    $html = array(drupal_render($form['meeting']));
    $header = array(t('Date(s)'), t('Amount'), t('Description'));
    $rows = array();
    foreach(element_children($form['dates']) as $key) {
        $row = array();
        $row[] = drupal_render($form['dates'][$key]);
        $row[] = drupal_render($form['amounts'][$key]);
        $row[] = drupal_render($form['descriptions'][$key]);
        $rows[] = $row;
    }
    $html[] = theme('table', $header, $rows);
    $html[] = drupal_render($form);
    return implode('', $html);
}

function ebms_x($form) {
    $header = array('Dates', 'City of Departure', 'Round-trip Mileage',
                    'Calculated Cost');
    $rows = array(array(drupal_render($form['pov_dates']),
                        drupal_render($form['pov_city']),
                        drupal_render($form['pov_mileage']),
                        drupal_render($form['pov_cost'])));
    return theme_table($header, $rows);
}
function ebms_make_fields($prefix) {
    $fields = array();
    for ($i = 1; $i <= 10; ++$i)
        $fields["$prefix$i"] = array('#type' => 'textfield',
                                     '#theme' => 'ebms_y');
    return $fields;
}
function ebms_theme() {
    global $theme;
    return array(
        'ebms_reimbursement_request_form' => array(
            'arguments' => array('form' => NULL, 'theme' => $theme),
            'template' => 'ebms-reimbursement-form',
        )
    );
}

function ebms_reimbursement_request_form_validate($form, $form_state) {
    $n = $form_state['values']['line-items'];
    $lineItems = 0;
    for ($i = 1; $i <= $n; ++$i) {
        $date = $form_state['values']["date-$i"];
        $amount = $form_state['values']["amount-$i"];
        $desc = $form_state['values']["desc-$i"];
        if ($date || $amount || $desc) {
            ++$lineItems;
            if (!$date)
                form_set_error("date-$i", 'Missing date(s) of expense');
            if (!$amount)
                form_set_error("amount-$i", 'Missing amount of expense');
            if (!$desc)
                form_set_error("desc-$i", 'Missing description of expense');
        }
    }
    $dates = $form_state['values']['pov_dates'];
    $city = $form_state['values']['pov_city'];
    $miles = $form_state['values']['pov_miles'];
    $cost = $form_state['values']['pov_cost'];
    if ($dates || $city || $miles || $cost) {
        ++$lineItems;
        if (!$dates)
            form_set_error('pov_dates', 'Missing date of travel');
        if (!$city)
            form_set_error('pov_city', 'Missing city of departure');
        if (!$miles)
            form_set_error('pov_miles', 'Missing round-trip mileage');
        if (!$cost)
            form_set_error('pov_cost', 'Missing calculated cost');
    }
    if (!$lineItems)
        form_set_error('date-1', 'No expenses specified');
}

function ebms_reimbursement_request_form() {
    $lineItems = 10;
    $receipts = 5;
    $form = array(
        #'#theme' => 'ebms_theme_reimbursement_request',
        '#validate' => array('ebms_reimbursement_request_form_validate'),
        'meeting' => array(
            '#type' => 'textfield',
            '#title' => 'Meeting',
            '#required' => true,
            '#description' =>
                t('For which board meeting(s) were these expenses incurred?'),
        ),
        'line-items' => array('#type' => 'hidden', '#value' => $lineItems),
        'receipts' => array('#type' => 'hidden', '#value' => $receipts),
        /*
        'date-1' => array('#type' => 'textfield', '#size' => 20),
        'amount-1' => array('#type' => 'textfield', '#size' => 15),
        'desc-1' => array('#type' => 'textfield', '#size' => 70),
        'date-2' => array('#type' => 'textfield', '#size' => 20),
        'amount-2' => array('#type' => 'textfield', '#size' => 15),
        'desc-2' => array('#type' => 'textfield', '#size' => 70),
        */
        /*
        'dates' => ebms_make_fields('date'),
        'amounts' => ebms_make_fields('amount'),
        'descriptions' => ebms_make_fields('desc'),
        'submit' => array(
            '#type' => 'submit',
            '#value' => t('Submit'),
            '#submit' => array('ebms_store_reimbursement_request'),
        ),*/
        '#attributes' => array(
            'enctype' => 'multipart/form-data'
        ),
    );
    for ($i = 1; $i <= $lineItems; ++$i) {
        $form["date-$i"] = array('#type' => 'textfield', '#size' => null);
        $form["amount-$i"] = array('#type' => 'textfield', '#size' => null);
        $form["desc-$i"] = array('#type' => 'textfield', '#size' => null,
                                 '#maxlength' => 256);
    }
    $form['pov_dates'] = array('#type' => 'textfield', '#size' => null);
    $form['pov_city'] = array('#type' => 'textfield', '#size' => null);
    $form['pov_miles'] = array('#type' => 'textfield', '#size' => null);
    $form['pov_cost'] = array('#type' => 'textfield', '#size' => null);
    for ($i = 1; $i <= 5; ++$i)
        $form["receipts_{$i}"] = array('#type' => 'file');
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
        '#submit' => array('ebms_store_reimbursement_request'),
    );
    return $form;
    $form = array(
#        '#theme' => 'ebms_theme_reimbursement_request',
        'meeting' => array(
            '#type' => 'textfield',
            '#title' => 'Meeting',
            '#required' => TRUE,
            '#maxlength' => 128,
            '#description' =>
            t('For which board meeting(s) were these expenses incurred?'),
            ),
        'pov' => array(
            '#type' => 'fieldset',
            '#theme' => 'ebms_x',
            #'#collapsible' => TRUE,
            #'#collapsed' => TRUE,
            '#required' => TRUE,
            '#title' => 'Travel by privately-owned vehicle',
            '#description' =>
            t('Identify other expenses in the Line Item Expense blocks below'),
            'pov_dates' => array(
                '#type' => 'textfield',
                #'#title' => 'Date(s)',
                #'#required' => TRUE,
                '#maxlength' => 80,
                #'#description' => t('Specify date(s) of travel'),
            ),
            'pov_city' => array(
                '#type' => 'textfield',
                #'#title' => 'City of departure',
                #'#required' => TRUE,
                '#maxlength' => 80,
                #'#description' => t('Round-trip origin'),
            ),
            'pov_mileage' => array(
                '#type' => 'textfield',
                #'#title' => 'Mileage',
                #'#required' => TRUE,
                '#maxlength' => 80,
                #'#description' => t('Specify round-trip mileage'),
            ),
            'pov_cost' => array(
                '#type' => 'textfield',
                #'#title' => 'Cost',
                #'#required' => TRUE,
                '#maxlength' => 80,
                #'#description' => t('Specify calculated cost'),
            ),
        ),
    );
    for ($i = 1; $i < 9; ++$i) {
        $form["line-item-$i"] = array(
            '#type' => 'fieldset',
            '#description' => t('Provide line-item expense details'),
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
            '#required' => TRUE,
            '#title' => 'Other Line Item Expense',
            "line_item_{$i}_dates" => array(
                '#type' => 'textfield',
                '#title' => 'Date(s)',
                #'#required' => TRUE,
                '#maxlength' => 80,
                '#description' => t('Specify date(s) expense was incurred'),
            ),
            "line_item_{$i}_amount" => array(
                '#type' => 'textfield',
                '#title' => 'Amount',
                #'#required' => TRUE,
                '#maxlength' => 80,
                '#description' => t('Dollar amount for incurred expense'),
            ),
            "line_item_{$i}_description" => array(
                '#type' => 'textarea',
                '#title' => 'Description',
                #'#required' => TRUE,
                '#cols' => 120,
                '#rows' => 2,
                '#description' =>
                    t('Specify nature of expense (meal, lodging, taxi, etc.)'),
            ),
        );
    }
    for ($i = 1; $i <= 5; ++$i) {
        $form["receipts_{$i}"] = array(
            '#title' => t('Receipts'),
            '#type' => 'file',
            '#required' => false,
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
            #'#element_validate' => array('ebms_doc_file_required'),
            '#description' => t('Scanned receipts for expenses'),
        );
    }
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
        '#submit' => array('ebms_store_reimbursement_request'),
    );
    return $form;
}

function ebms_store_reimbursement_request($form, &$form_state) {

    // Collect the data from the form.
    $meeting = $form_state['values']['meeting'];
    $povDates = $form_state['values']['pov_dates'];
    $povCity = $form_state['values']['pov_city'];
    $povMiles = $form_state['values']['pov_miles'];
    $povCost = $form_state['values']['pov_cost'];
    $nLineItems = $form_state['values']['line-items'];
    $lineItems = array();
    for ($i = 1; $i <= $nLineItems; ++$i) {
        $item = new EbmsLineItem($form_state, $i);
        if ($item->date && $item->amount && $item->desc)
            $lineItems[] = $item;
    }
    $nReceipts = $form_state['values']['receipts'];
    $files = array();
    for ($i = 1; $i <= $nReceipts; ++$i) {
        if ($_FILES['files']['name']["receipts_$i"] != '') {
            $file = file_save_upload("receipts_$i");
            if ($file)
                $files[] = $file;
            else
                drupal_set_message('Failure saving receipts file');
        }
    }
    $now = time();
    $utcNow = date('c', $now);
    $prettyNow = date('r', $now);
    global $user;
    db_query('
INSERT INTO {ebms_reimbursement_request} (requestor_id, submitted, meeting)
     VALUES (%d, \'%s\', \'%s\')', $user->uid, $utcNow, $meeting);
    $requestId = db_last_insert_id('ebms_reimbursement_request', 'request_id');
    foreach ($lineItems as $lineItem) {
        db_query('
INSERT INTO {ebms_reimbursement_item} (request_id, expense_date, amount,
                                       description)
     VALUES (%d, \'%s\', \'%s\', \'%s\')',
                 $requestId, $lineItem->date, $lineItem->amount,
                 $lineItem->desc);
    }
    if ($povDates && $povCity && $povMiles && $povCost) {
        $povDesc = "travel from $povCity for $povMiles miles";
        db_query('
INSERT INTO {ebms_reimbursement_item} (request_id, expense_date, amount,
                                       description)
     VALUES (%d, \'%s\', \'%s\', \'%s\')',
                 $requestId, $povDates, $povCost, $povDesc);
    }
    $fileUrls = array();
    foreach ($files as $file) {
        file_move($file);
        file_set_status($file, FILE_STATUS_PERMANENT);
        drupal_write_record('files', $file, 'fid');
        db_query('
INSERT INTO {ebms_reimbursement_receipts} (request_id, file_id)
     VALUES (%d, %d)', $requestId, $file->fid);
        $fileUrls[] = file_create_url($file->filepath);
    }
    $replyTo = ebms_format_email_address($user->mail, $user->name);
    $boundary = '----=_NextPart_'.md5(uniqid());
    $nFiles = sizeof($files);
    
    $bodyText = array("Reimbursement Request

Request Submitted: $prettyNow
Submitted By: {$user->name}
Meeting: $meeting
Number of Receipt Files: $nFiles

===============================================================
LineItems (Date of Expense / Amount / Description)
===============================================================
");

    foreach ($lineItems as $item)
        $bodyText[] = "{$item->date} / {$item->amount} / {$item->desc}
";
    if ($povDesc)
        $bodyText[] = "$povDates / $povCost / $povDesc
";
    $bodyText[] =
        '===============================================================
';
    if ($nFiles) {
        $bodyText[] =
            '
===============================================================
Receipt Files
===============================================================
';
        foreach ($fileUrls as $url)
            $bodyText[] = "$url\n";
        $bodyText[] =
            '===============================================================
';
    }
    $bodyText = implode('', $bodyText);
    $userHtml = htmlspecialchars($user->name) . '&nbsp;';
    $meetingHtml = htmlspecialchars($meeting) . '&nbsp;';
    $checkinHtml = htmlspecialchars($checkinDate) . '&nbsp;';
    $nightsHtml = htmlspecialchars($nights) . '&nbsp;';
    $notesHtml = htmlspecialchars($notes) . '&nbsp;';
    $bodyHtml = array("<style type='text/css'>
 * { font-family: Arial, sans-serif }
 * { font-family: \"Times New Roman\", Georgia }
 table, h2, h3 { margin-left: 20px; }
 h2 { color: maroon; margin-top: 10px; font-size: 16pt; }
 h3 { color: maroon; margin-top: 10px; font-size: 14pt; }
 td, th { padding-left: 5px; padding-right: 5px }
 th { color: maroon; }
 .col1 { width: 150px }
 .col2 { width: 150px }
 .col3 { width: 400px }
</style>
<h2>Reimbursement Request</h2>
<table border='1' cellpadding='2' cellspacing='0'>
 <tr>
  <th align='right'>Requested By</th>
  <td style='width: 400px'>$userHtml</td>
 </tr>
 <tr>
  <th align='right'>Request Submitted</th>
  <td>$prettyNow</td>
 </tr>
 <tr>
  <th align='right'>For Meeting</th>
  <td>$meetingHtml</td>
 </tr>
 <tr>
  <th align='right'>Number of Receipt Files</th>
  <td>$nFiles</td>
 </tr>
</table>
<br />
<h3>Line Items</h3>
<table border='1' cellpadding='2' cellspacing='0'>
 <tr>
  <th align='center'>Date(s) of Expense</th>
  <th align='center'>Amount</th>
  <th align='center'>Description</th>
 </tr>
");
    foreach ($lineItems as $item) {
        $date = htmlspecialchars($item->date) . '&nbsp;';
        $amount = htmlspecialchars($item->amount) . '&nbsp;';
        $desc = htmlspecialchars($item->desc) . '&nbsp;';
        $bodyHtml[] = " <tr>
  <td class='col1'>$date</td>
  <td class='col2'>$amount</td>
  <td class='col3'>$desc</td>
 </tr>
";
    }
    if ($povDesc) {
        $dates = htmlspecialchars($povDates) . '&nbsp;';
        $amount = htmlspecialchars($povCost) . '&nbsp;';
        $desc = htmlspecialchars($povDesc) . '&nbsp;';
        $bodyHtml[] = " <tr>
  <td class='col1'>$dates</td>
  <td class='col2'>$amount</td>
  <td class='col3'>$desc</td>
 </tr>
";
    }
    $bodyHtml[] ="</table>
";
    if ($nFiles) {
        $bodyHtml[] = '<br />
<h3>Receipt Files</h3>
<ol>
';
        for ($i = 0; $i < sizeof($fileUrls); ++$i) {
            $url = htmlspecialchars($fileUrls[$i]);
            $name = htmlspecialchars($files[$i]->filename);
            $bodyHtml[] = " <li>
  <a href=\"$url\">$name</a>
</li>
";
        }
        $bodyHtml[] = "</ol>
";
    }
    $bodyHtml = implode('', $bodyHtml);
    $body = "

This is a multi-part message in MIME format.

--$boundary
Content-Type: text/plain; charset=UTF-8; format=flowed; 
Content-Transfer-Encoding: 8bit

$bodyText

--$boundary
Content-Type: text/html; charset=UTF-8; format=flowed; 
Content-Transfer-Encoding: 8bit

$bodyHtml

";
    $params = array('reply-to' => $replyTo,
                    'subject' => 'Expense reimbursement request',
                    'body' => $body,
                    'boundary' => $boundary);
    $key = 'reimbursement';
    global $language;
    drupal_mail('ebms', $key, EBMS_REQUESTEE, $language, $params, EBMS_FROM);
    drupal_set_message('Reimbursement request submitted');
}

class EbmsLineItem {
    function EbmsLineItem($form_state, $i) {
        $this->date = $form_state['values']["date-$i"];
        $this->amount = $form_state['values']["amount-$i"];
        $this->desc = $form_state['values']["desc-$i"];
    }
}

/*======================================================================*/
/*                                  ROSTER                              */
/*======================================================================*/
function ebms_roster() {
    $boards = array(
        'adult-treatment' => 'Adult Treatment',
        'pediatric-treatment' => 'Pediatric Treatment',
        'supportive-care' => 'Supportive and Palliative Care',
        'screening-prevention' => 'Screening and Prevention',
        'cancer-genetics' => 'Cancer Genetics',
        'cancer-cam' => 'Cancer Complementary and Alternative Medicine',
    );
    $base = 'http://www.cancer.gov/cancertopics/pdq';
    $left = "<li><a target='_blank' href='$base/";
    $right = ' Editorial Board</a></li>';
    $html = array('<ul>');
    foreach ($boards as $link => $name)
        $html[] = "$left$link-board'>PDQ&reg; $name$right";
    $html[] = '</ul>';
    drupal_set_title('PDQ&reg; Board Rosters');
    drupal_set_title('Board Rosters');
    return implode("\n", $html);
}

/*======================================================================*/
/*                                 CALENDAR                             */
/*======================================================================*/
function ebms_add_user_events($rs, &$events) {
    while ($row = db_fetch_object($rs))
        $events[$row->nid] = $row->nid;
}

function ebms_get_user_events($uid) {
    //drupal_set_message('<i>ebms_get_user_events</i>');
    //$start = microtime(true);
    $events = array();
    $queries = array('
SELECT nid
  FROM {content_field_users}
 WHERE field_users_value = %d',
                     '
SELECT b.nid
  FROM content_field_board b
  JOIN ebms_board_member m
    ON b.field_board_value = m.board_id
 WHERE m.user_id = %d',
                     '
SELECT s.nid
  FROM content_field_subgroup s
  JOIN ebms_subgroup_member m
    ON s.field_subgroup_value = m.sg_id
 WHERE m.user_id = %d',
                     '
SELECT g.nid
  FROM content_field_ad_hoc_group g
  JOIN ebms_ad_hoc_group_member m
    ON g.field_ad_hoc_group_value = m.group_id
 WHERE m.user_id = %d');
    foreach ($queries as $query) {
        $rs = db_query($query, $uid);
        ebms_add_user_events($rs, $events);
    }
    //drupal_set_message('xxx' . print_r($events, true));
    //$elapsed = microtime(true) - $start;
    //drupal_set_message("elapsed: $elapsed");
    return $events; #array(5 => 5);
}

function ebms_want_event($nodeId) {
    global $user;
    if ($user->uid == 1)
        return true;
    if (in_array('board manager', $user->roles))
        return true;
    if (!is_array($ebmsUserEvents))
        $ebmsUserEvents = ebms_get_user_events($user->uid);
    return array_key_exists($nodeId, $ebmsUserEvents);
    //return $nodeId == 5;

//     $rs = db_query('
// SELECT COUNT(*)
//   FROM {content_field_users} u
//   JOIN 
//     $groups = array('board', 'subgroup', 'ad_hoc_group', 'users');
//     foreach ($tables as $table) {
//         $rs = db_query("
// SELECT COUNT(*)
//   FROM {content_field_$table}
//  WHERE field_{$table}_value = %d
//    AND nid = %d", $user->uid, $nodeId);
//         if (db_result($rs) > 0)
//             return true;
//     }
//     return false;
}
function ebms_wanted_events($events) {
    $items = array();
    foreach($events as $event)
        if (ebms_want_event($event))
            $items[] = $event;
    return $items;
}

// function ebms_preprocess_calendar_main(&$vars) {
//     ebms_debug('ebms_preprocess_calendar_main [vars]', $vars);
//     $vars['view']->result = array($vars['view']->result[0]);
// }
// function ebms_preprocess_calendar(&$vars) {
//     ebms_debug('ebms_preprocess_calendar', null);
// }
// function ebms_preprocess_calendar_month(&$vars) {
//     ebms_debug('ebms_preprocess_celendar_month [vars]', $vars);
//     return;
//     ebms_debug('ebms_preprocess_calendar_month [items before]',
//                $vars['items']);
//     $vars['items'] = ebms_wanted_events($vars['items']);
//     ebms_debug('ebms_preprocess_calendar_month [items after]',
//                $vars['items']);
// }
// function ebms_preprocess_calendar_month_node(&$vars) {
//     ebms_debug('ebms_preprocess_calendar_month_node', null);
// }
// function ebms_preprocess_calendar_month_multiple_node(&$vars) {
//     ebms_debug('ebms_preprocess_calendar_month_multiple_node', null);
// }
// function ebms_preprocess_calendar_week(&$vars) {
//     ebms_debug('ebms_preprocess_calendar_week', null);
// }
// function ebms_preprocess_calendar_mini(&$vars) {
//     ebms_debug('ebms_preprocess_calendar_mini', null);
// }
// function ebms_preprocess_calendar_week_overlap(&$vars) {
//     ebms_debug('ebms_preprocess_calendar_week_overlap', null);
// }
// function ebms_preprocess_calendar_week_multiple_node(&$vars) {
//     ebms_debug('ebms_preprocess_calendar_week_multiple_node', null);
// }
// function ebms_preprocess_calendar_week_node(&$vars) {
//     ebms_debug('ebms_preprocess_calendar_week_node', null);
// }
// function ebms_preprocess_calendar_year(&$vars) {
//     ebms_debug('ebms_preprocess_calendar_year', null);
// }
// function ebms_preprocess_calendar_day(&$vars) {
//     ebms_debug('ebms_preprocess_calendar_day', null);
// }
// function ebms_preprocess_calendar_day_node(&$vars) {
//     ebms_debug('ebms_preprocess_calendar_day_node', null);
// }
// function ebms_preprocess_calendar_day_overlap(&$vars) {
//     ebms_debug('ebms_preprocess_calendar_day_overlap', null);
// }
// function ebms_preprocess_calendar_datebox(&$vars) {
//     drupal_set_message('datebox: ' . print_r($vars['items'], true));
// }
// function ebms_node_access_records($node) {
//     drupal_set_message("ebms_node_access_records: node {$node->nid}");
// }
// function ebms_node_grants($account, $op) {
//     drupal_set_message("ebms_node_grants: $op");
//     return array('ebms' => array($account->uid));
// }
// function ebms_access($op, $node, $account) {
//     drupal_set_message("ebms_access: op: $op; node {$node->nid}");
// }
// function ebms_view($node, $teaser=false, $page=false) {
//     drupal_set_message("ebms_access: node {$node->nid}; teaser=$teaser; page=$page");
// }
// function ebms_nodeapi(&$node, $op, $a3=null, $a4=null) {
//     drupal_set_message("ebms_nodeapi: op: $op; node {$node->nid}; a3=$a3; a4=$a4");
// }

function ebms_db_rewrite_sql($query, $primary_table, $primary_field, $args) {
    if ($primary_field == 'nid' && is_array($args) && isset($args['view'])) {
        if ($args['view']->name == 'calendar') {
            #drupal_set_message("ebms_db_rewrite_sql: $query");
            global $user;
            global $ebmsUserEvents;
            if ($user->uid == 1)
                return;
            if (in_array('board manager', $user->roles))
                return;
            if (!is_array($ebmsUserEvents)) {
                $ebmsUserEvents =  ebms_get_user_events($user->uid);
                //$e = print_r($ebmsUserEvents, true);
                //drupal_set_message("!is_array(): $e");
            }
            //$e = print_r($ebmsUserEvents, true);
            //drupal_set_message("events: $e");
            $ids = implode(',', $ebmsUserEvents);
            if ($ids)
                return array('where' => "$primary_table.nid IN ($ids)");
            else
                return array('where' => '0 = 1');
        }
    }
}

/*======================================================================*/
/*                                REPORTS                               */
/*======================================================================*/
// function ebms_is_positive_int($element, $val) {
//     #drupal_set_message(print_r($element, true));
//     if (!is_int($val) || (int)$val <= 0)
//         form_error($element,  t('Paging size must be a positive integer'));
// }

function ebms_hotel_request_report_form() {
    return array(
        '#validate' => array('ebms_hotel_report_form_validate'),
        'start' => array(
            '#type' => 'date_popup',
            '#date_format' => 'Y-m-d',
            '#title' => 'Start date',
            '#default_value' => date('Y-m-d', strtotime('-1 month')),
            '#required' => false,
            '#description' => t('Earliest request submission date to include'),
        ),
        'end' => array(
            '#type' => 'date_popup',
            '#title' => 'End date',
            '#default_value' => date('Y-m-d', strtotime('now')),
            '#date_format' => 'Y-m-d',
            '#required' => false,
            '#description' => t('Latest request submission date to include'),
        ),
        'pager' => array(
            '#type' => 'textfield',
            '#title' => 'Page size',
            '#required' => TRUE,
            '#default_value' => 10,
            #'#element_validate' => array('ebms_is_positive_int'),
            '#maxlength' => 128,
            '#description' => t('How many items on a page?'),
        ),
        'options' => array(
            '#title' => t('Options'),
            '#type' => 'checkboxes',
            '#required' => true,
            '#default_value' => array('checkin', 'requested', 'requestor',
                                      'nights', 'meeting'),
            '#options' => array(
                'requestor' => t('Include requestor?'),
                'checkin' => t('Include check-in date?'),
                'requested' => t('Include date requested?'),
                'nights' => t('Include number of nights?'),
                'meeting' => t('Include meeting?'),
                'notes' => t('Include notes?'),
            ),
        ),
        'submit' => array(
            '#type' => 'submit',
            '#value' => t('Submit'),
            '#submit' => array('ebms_hotel_report_submit'),
        ),
    );
}
function ebms_hotel_report_form_validate($form, $form_state) {
    $start = $form_state['values']['start'];
    $end = $form_state['values']['end'];
    $requestor = $form_state['values']['options']['requestor'];
    $requested = $form_state['values']['options']['requested'];
    $nights = $form_state['values']['options']['nights'];
    $meeting = $form_state['values']['options']['meeting'];
    $notes = $form_state['values']['options']['notes'];
    $checkin = $form_state['values']['options']['checkin'];
    $pager = $form_state['values']['pager'];
    $startInt = $endInt = 0;
    if ($start) {
        $startInt = strtotime($start);
        if (!$startInt) {// assumes PHP >= 5.1.0; we're running 5.3
            form_set_error('start', t('Invalid starting date'));
            $startInt = 0;
        }
        else
            form_set_value($form['start'], date('Y-m-d', $startInt),
                           $form_state);
    }
    if ($end) {
        $endInt = strtotime($end);
        if (!$endInt) {// assumes PHP >= 5.1.0; we're running 5.3
            form_set_error('end', t('Invalid ending date'));
            $endInt = 0;
        }
        else
            form_set_value($form['end'], date('Y-m-d', $endInt), $form_state);
    }
    if ($startInt && $endInt && $startInt >= $endInt)
        form_set_error('end', t('End date must follow start date'));
    if (!is_numeric($pager) || intval($pager) <= 0)
        form_set_error('pager',  t('Page size must be a positive integer'));
    else
        // Don't think form_set_value() is really working.
        form_set_value($form['pager'], strval(intval($pager)), $form_state);
    if (!$requestor && !$requested && !$nights && !$meeting && !$notes &&
        !$checkin)
        form_set_error('options',
                       t('At least one column must be selected for report'));
}

function ebms_hotel_report_submit($form=null, &$form_state=null) {
    // This doesn't work, because the global variable is wiped out
    // when the redirect happens.  Putting the information in a
    // session variable is risky, because the logged on user could
    // be submitting requests simultanously from pages in different
    // tabs or windows using the same session.
//     global $ebmsReportVars;
//     $ebmsReportVars = array(
//         'start' => $form_state['values']['start'],
//         'end' => $form_state['values']['end'],
//         'pager' => $form_state['values']['pager'],
//         'requestor' => $form_state['values']['options']['requestor'],
//         'requested' => $form_state['values']['options']['requested'],
//         'nights' => $form_state['values']['options']['nights'],
//         'meeting' => $form_state['values']['options']['meeting'],
//         'notes' => $form_state['values']['options']['notes'],
//         'checkin' => $form_state['values']['options']['checkin'],
//     );
//     #return 'reports/hotel-requests/show';
//     'reports/hotel-requests/show';
    // Have to use a GET request with a big fat URL until we get a better
    // answer from the Drupal community on how to pass the form data
    // to a function which can display a report instead of showing the
    // form again.
    // SEE http://drupal.org/node/247585
    // and http://drupal.org/node/1004284 (including replies from
    // Drupal's very own Larry Christenson).
    // Another approach that would work would be to save the form
    // values in a database table and then pull them back out.
    // This is more efficient, but that would let us track report requests.
    // ... decided on database table after all.
    // Bugs in drupal_to_js; see comment 'Breaks in jQuery 1.4 AJAX' in
    // http://api.drupal.org/api/function/drupal_to_js/6
    $vars = json_encode(array(
        'start' => $form_state['values']['start'],
        'end' => $form_state['values']['end'],
        'pager' => $form_state['values']['pager'],
        'requestor' => $form_state['values']['options']['requestor'],
        'requested' => $form_state['values']['options']['requested'],
        'nights' => $form_state['values']['options']['nights'],
        'meeting' => $form_state['values']['options']['meeting'],
        'notes' => $form_state['values']['options']['notes'],
        'checkin' => $form_state['values']['options']['checkin'],
    ));
    global $user;
    $now = date('c');
    $name = 'Hotel Reservation Requests';
    db_query('
INSERT INTO {ebms_report_request} (requestor_id, submitted, parameters,
                                   report_name)
     VALUES (%d, \'%s\', \'%s\', \'%s\')', $user->uid, $now, $vars, $name);
    $requestId = db_last_insert_id('ebms_report_request', 'request_id');
    drupal_goto("reports/hotel-requests/$requestId");
//     $where = array("reports/hotel-requests/show/$requestId");
//     drupal_goto($where[0]);
}

function ebms_show_hotel_requests($reportRequestId=null) {
    if (!$reportRequestId)
        return drupal_get_form('ebms_hotel_request_report_form');
//     if (!$form && !$form_state)
//         return drupal_get_form('ebms_hotel_request_report_form');
    //            'page callback' => 'drupal_get_form',
    //        'page arguments' => array('ebms_hotel_request_report_form'),

//     if (false && !module_load_include('inc', 'date', 'date_api_sql')) {
//         drupal_set_message('can\'t load date_api_sql.inc');
//         drupal_set_message(drupal_get_path('module', 'date_api'));
//         return "oops!";
//     }
    $rs = db_query('
SELECT parameters
  FROM {ebms_report_request}
 WHERE request_id = %d', $reportRequestId);
    $vars = db_result($rs);
    #drupal_set_message("vars=$vars; reportRequestId=$reportRequestId");
    $vars = json_decode($vars, true);
    #drupal_set_message(print_r($vars, true));
    #return "foobar";#print_r($vars, true);
    require_once(drupal_get_path('module', 'date_api') .'/date_api_sql.inc');
    $startDate = $vars['start'];
    $endDate = $vars['end'];
    $perPage = (int)$vars['pager'];
    $includeRequestor = $vars['requestor'];
    $includeRequestDate = $vars['requested'];
    $includeNights = $vars['nights'];
    $includeMeeting = $vars['meeting'];
    $includeNotes = $vars['notes'];
    $includeCheckin = $vars['checkin'];
    if (!$startDate)
        $startDate = '1900-01-01';
    if (!$endDate)
        $endDate = '2999-01-01';
    $dateHandler = new date_sql_handler();
    $dayAfterSubmission = $dateHandler->sql_date_math('r.submitted', 'ADD', 1, 'DAY');
    #drupal_set_message($dayAfterSubmission);
    #return $dayAfterSubmission;
    $sql = "SELECT r.request_id, u.name, r.submitted, r.meeting,
                   r.checkin_date, r.nights, r.notes
              FROM {ebms_hotel_request} r
              JOIN {users} u
                ON u.uid = r.requestor_id
             WHERE r.submitted >= '%s'
               AND $dayAfterSubmission < '%s'
          ORDER BY submitted DESC";
    $pagerNum = 0;
    #$perPage = 10;
    $rs = pager_query(db_rewrite_sql($sql), $perPage, $pagerNum, NULL,
                      $startDate, $endDate);
    $html = array('<table><tr>');
    if ($includeRequestor)
        $html[] = '<th>Requestor</th>';
    if ($includeRequestDate)
        $html[] = '<th>Requested</th>';
    if ($includeMeeting)
        $html[] = '<th>Meeting</th>';
    if ($includeCheckIn)
        $html[] = '<th>Check-in Date</th>';
    if ($includeNights)
        $html[] = '<th>Nights</th>';
    $html[] = '</tr>';
    while ($row = db_fetch_object($rs)) {
        $html[] = '<tr>';
        if ($includeRequestor) {
            $value = htmlspecialchars($row->name);
            $html[] = "<td>$value</td>";
        }
        if ($includeRequestDate) {
            $value = htmlspecialchars($row->submitted);
            $html[] = "<td>$value</td>";
        }
        if ($includeMeeting) {
            $value = htmlspecialchars($row->meeting);
            $html[] = "<td>$value</td>";
        }
        if ($includeCheckIn) {
            $value = htmlspecialchars($row->checkin_date);
            $html[] = "<td>$value</td>";
        }
        if ($includeNights) {
            $value = htmlspecialchars($row->nights);
            $html[] = "<td>$value</td>";
        }
        $html[] = '</tr>';
        if ($includeNotes && $row->notes) {
            $value = htmlspecialchars($row->notes);
            $html[] = "
<tr>
<td align='right' valign='top'><b>Notes:</b>&nbsp;&nbsp;</td>
<td colspan='4'>$row->notes</td>
</tr>";
        }
        $html[] = '</tr>';
    }
    $html[] = '</table><hr />' . theme('pager', NULL, $perPage, $pagerNum);
    return implode('', $html);
    return 'stub';
}

function ebms_show_reimbursement_requests($reportRequestId=null) {
    #drupal_set_message("ebms_show_reimbursement_requests: requestId=$reportRequestId");
    if (!$reportRequestId)
        return drupal_get_form('ebms_reimbursement_request_report_form');
    $rs = db_query('
SELECT parameters
  FROM {ebms_report_request}
 WHERE request_id = %d', $reportRequestId);
    $vars = db_result($rs);
    $vars = json_decode($vars, true);
    require_once(drupal_get_path('module', 'date_api') .'/date_api_sql.inc');
    $startDate = $vars['start'];
    $endDate = $vars['end'];
    $perPage = (int)$vars['pager'];
    $includeRequestor = $vars['requestor'];
    $includeRequestDate = $vars['requested'];
    $includeMeeting = $vars['meeting'];
    $includeItems = $vars['items'];
    #$includeDescriptions = $vars['desc'];
    $includeReceipts = $vars['receipts'];
    if (!$startDate)
        $startDate = '1900-01-01';
    if (!$endDate)
        $endDate = '2999-01-01';
    $dateHandler = new date_sql_handler();
    $dayAfterSubmission = $dateHandler->sql_date_math('r.submitted', 'ADD', 1, 'DAY');

    // Drupal bug: pager doesn't work if there is whitespace before 'SELECT'
    $sql = "SELECT r.request_id, u.name, r.submitted, r.meeting
              FROM {ebms_reimbursement_request} r
              JOIN {users} u
                ON u.uid = r.requestor_id
             WHERE r.submitted >= '%s'
               AND $dayAfterSubmission < '%s'
          ORDER BY submitted";
    $pagerNum = 0;
    $rs = pager_query(db_rewrite_sql($sql), $perPage, $pagerNum, NULL,
                      $startDate, $endDate);
    if (!$includeItems && !$includeReceipts) {
        $html = array('<table><tr>');
        if ($includeRequestor)
            $html[] = '<th>Requestor</th>';
        if ($includeRequestDate)
            $html[] = '<th>Requested</th>';
        if ($includeMeeting)
            $html[] = '<th>Meeting</th>';
        $html[] = '</tr>';
        while ($row = db_fetch_object($rs)) {
            $html[] = '<tr>';
            if ($includeRequestor) {
                $value = htmlspecialchars($row->name);
                $html[] = "<td>$value</td>";
            }
            if ($includeRequestDate) {
                $value = htmlspecialchars($row->submitted);
                $html[] = "<td>$value</td>";
            }
            if ($includeMeeting) {
                $value = htmlspecialchars($row->meeting);
                $html[] = "<td>$value</td>";
            }
        }
        $html[] = '</tr></table><hr />';
        $html[] = theme('pager', NULL, $perPage, $pagerNum);
        return implode("\n", $html);
    }
    $rows = array();
    while ($row = db_fetch_object($rs))
        $rows[] = $row;
    $html = array();
    foreach ($rows as $row) {
        $html[] = "<h3>Request #$row->request_id</h3>";
        $html[] = '<table id="reimbursement-requests">';
        if ($includeRequestor) {
            $value = htmlspecialchars($row->name);
            $html[] = "<tr><th>Requested by:</th><td>$value</td></tr>";
        }
        if ($includeRequestDate) {
            $value = htmlspecialchars($row->submitted);
            $html[] = "<tr><th>Requested:</th><td>$value</td></tr>";
        }
        if ($includeMeeting) {
            $value = htmlspecialchars($row->meeting);
            $html[] = "<tr><th>For meeting:</th><td>$value</td></tr>";
        }
        $html[] = '</tr></table>';
        if ($includeItems) {
            $html[] = '<br />';
            $rs = db_query('
  SELECT expense_date, amount, description
    FROM {ebms_reimbursement_item}
   WHERE request_id = %d
ORDER BY item_id', $row->request_id);
            $lineItems = array();
            while ($item = db_fetch_object($rs))
                $lineItems[] = $item;
            if (sizeof($lineItems) < 1)
                $html[] = '<p><i>No line items</i></p>';
            else {
                $html[] = '<table>
<tr>
 <th class="line-item-col-1">Date(s) of Expense</th>
 <th class="line-item-col-2">Amount</th>
 <th class="line-item-col-3">Description</th>
</tr>';
                foreach ($lineItems as $item) {
                    $dates = htmlspecialchars($item->expense_date);
                    $amount = htmlspecialchars($item->amount);
                    $desc = htmlspecialchars($item->description);
                    $html[] = "<tr>
 <td>$dates</td>
 <td>$amount</td>
 <td>$desc</td>
</tr>";
                }
                $html[] = '</table>';
            }
        }
        if ($includeReceipts) {
            $rs = db_query('
  SELECT f.filename, f.filepath
    FROM {files} f
    JOIN {ebms_reimbursement_receipts} r
      ON r.file_id = f.fid
   WHERE r.request_id = %d
ORDER BY r.receipt_id', $row->request_id);
            $receipts = array();
            while ($file = db_fetch_object($rs))
                $receipts[] = $file;
            if (sizeof($receipts) < 1)
                $html[] = '<p><i>No receipts uploaded</i></p>';
            else {
                $html[] = '<p><b>Receipts:</b><ul>';
                foreach ($receipts as $file) {
                    $url = file_create_url($file->filepath);
                    $name = htmlspecialchars($file->filename);
                    $html[] = "<li><a href='$url'>$name</a></li>";
                }
                $html[] = '</p>';
            }
        }
        $html[] = '<hr /><br />';
    }
    $html[] = theme('pager', NULL, $perPage, $pagerNum);
    return implode("\n", $html);
}

function ebms_reimbursement_request_report_form() {
    return array(
        '#validate' => array('ebms_reimbursement_report_form_validate'),
        'start' => array(
            '#type' => 'date_popup',
            '#date_format' => 'Y-m-d',
            '#default_value' => date('Y-m-d', strtotime('-1 month')),
            '#title' => 'Start date',
            '#required' => false,
            '#description' => t('Earliest request submission date to include'),
        ),
        'end' => array(
            '#type' => 'date_popup',
            '#title' => 'End date',
            '#date_format' => 'Y-m-d',
            '#default_value' => date('Y-m-d', strtotime('now')),
            '#required' => false,
            '#description' => t('Latest request submission date to include'),
        ),
        'pager' => array(
            '#type' => 'textfield',
            '#title' => 'Page size',
            '#required' => TRUE,
            '#default_value' => 10,
            #'#element_validate' => array('ebms_is_positive_int'),
            '#maxlength' => 128,
            '#description' => t('How many items on a page?'),
        ),
        'options' => array(
            '#title' => t('Options'),
            '#type' => 'checkboxes',
            '#required' => true,
            '#default_value' => array('meeting', 'requested', 'requestor'),
            '#options' => array(
                'requestor' => t('Include requestor?'),
                'requested' => t('Include date requested?'),
                'meeting' => t('Include meeting?'),
                'items' => t('Include line items?'),
                # Decided to always include these for line items.
                #'desc' => t('Include item descriptions?'),
                'receipts' => t('Include list of receipt files?'),
                # Won't be handling notes unless we build interface for
                # admin staff to process the reimbursement requests.
                # Might not happen.
                #'notes' => t('Include notes?'),
            ),
        ),
        'submit' => array(
            '#type' => 'submit',
            '#value' => t('Submit'),
            '#submit' => array('ebms_reimbursement_report_submit'),
        ),
    );
}

function ebms_reimbursement_report_submit($form=null, &$form_state=null) {
    // Debugging.
    // drupal_set_message('ebms_reimbursement_report_submit');
    $vars = json_encode(array(
        'start' => $form_state['values']['start'],
        'end' => $form_state['values']['end'],
        'pager' => $form_state['values']['pager'],
        'requestor' => $form_state['values']['options']['requestor'],
        'requested' => $form_state['values']['options']['requested'],
        'meeting' => $form_state['values']['options']['meeting'],
        'items' => $form_state['values']['options']['items'],
        #'desc' => $form_state['values']['options']['desc'],
        #'notes' => $form_state['values']['options']['notes'],
        'receipts' => $form_state['values']['options']['receipts'],
    ));
    global $user;
    $now = date('c');
    $name = 'Reimbursement Requests';
    db_query('
INSERT INTO {ebms_report_request} (requestor_id, submitted, parameters,
                                   report_name)
     VALUES (%d, \'%s\', \'%s\', \'%s\')', $user->uid, $now, $vars, $name);
    $requestId = db_last_insert_id('ebms_report_request', 'request_id');
    drupal_goto("reports/reimbursement-requests/$requestId");
}

function ebms_reimbursement_report_form_validate($form, $form_state) {
    $start = $form_state['values']['start'];
    $end = $form_state['values']['end'];
    $pager = $form_state['values']['pager'];
    $requestor = $form_state['values']['options']['requestor'];
    $requested = $form_state['values']['options']['requested'];
    $meeting = $form_state['values']['options']['meeting'];
    $items = $form_state['values']['options']['items'];
    #$desc = $form_state['values']['options']['desc'];
    #$notes = $form_state['values']['options']['notes'];
    $receipts = $form_state['values']['options']['receipts'];
    $startInt = $endInt = 0;
    if ($start) {
        $startInt = strtotime($start);
        if (!$startInt) {// assumes PHP >= 5.1.0; we're running 5.3
            form_set_error('start', t('Invalid starting date'));
            $startInt = 0;
        }
        else
            form_set_value($form['start'], date('Y-m-d', $startInt),
                           $form_state);
    }
    if ($end) {
        $endInt = strtotime($end);
        if (!$endInt) {// assumes PHP >= 5.1.0; we're running 5.3
            form_set_error('end', t('Invalid ending date'));
            $endInt = 0;
        }
        else
            form_set_value($form['end'], date('Y-m-d', $endInt), $form_state);
    }
    if ($startInt && $endInt && $startInt >= $endInt)
        form_set_error('end', t('End date must follow start date'));
    if (!is_numeric($pager) || intval($pager) <= 0)
        form_set_error('pager',  t('Page size must be a positive integer'));
    else
        // XXX Don't think form_set_value() is really working.
        form_set_value($form['pager'], strval(intval($pager)), $form_state);
    if (!$requestor && !$requested && !$meeting)
        form_set_error('options',
                       t('You must include at least one of requestor, ' .
                         'date requested, and meeting'));
//     if ($desc && !$items)
//         form_set_error('options',
//                        t('Can\'t show item description without line items'));
}
