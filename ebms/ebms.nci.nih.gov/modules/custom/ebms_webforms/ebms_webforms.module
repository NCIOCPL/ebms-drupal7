<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
module_load_include('inc', 'webform', 'components/select');


/**
* Implements hook_menu().
*/
function ebms_webforms_menu() {
 $items['add/%ctools_js/review'] = array(
   'page callback'    => 'ebms_webforms_ctools_modal_review',
   'page arguments'   => array(1), 
     'access callback' => TRUE,
      'type' => MENU_NORMAL_ITEM,
 );
 return $items;
}
 
function ebms_webforms_menu_alter(&$items) {
    // We're going to override the page that generates the results.
    // This is not the cleanest way of doing it, but it works.
    $items['node/%webform_menu/webform-results/table']['page callback'] = '_ebms_webforms_results_table';
    $items['node/%webform_menu/webform-results/table']['file'] = '';
}
 
/**
 * Implements hook_form_alter().
 *
 * 
 * @TODO: In the future - should really create a field type for meetings...
 * Find form_key from cid and add JS.
 */
function ebms_webforms_form_alter(&$form, &$form_state, $form_id) {
  if (substr($form_id, 0, 19) != 'webform_client_form') {
        return;
    }
    
    $event_block = _ebms_travel_get_meeting_block($form);

    //add js file for show/hide.  
    $css_path = drupal_get_path('module', 'ebms_webforms');
    $css_path .= "/includes/ebms_webform.css";
    drupal_add_css($css_path, array('type' => 'file'));
    $js_path = drupal_get_path('module', 'ebms_webforms');
    $js_path .= "/includes/ebms_webform.js";
    drupal_add_js($js_path, array('type' => 'file'));

    $form['preview'] = array(
        '#type' => 'submit',
        '#value' => 'Preview',
        '#submit' => array('preview_submission'),
        '#ajax' => array(
            'callback' => 'preview_submission',
            'wrapper' => 'preview-area',
            'method' => 'replace',
            'effect' => 'fade',
        )
    );

    $form['preview-container'] = array(
        '#prefix' => '<div id="preview-area">',
        '#suffix' => '</div>',
    );
    //check to see if this webform has a meeting select - if it does, populate it.
    ////"MUST BE NAMED MEETING".
    //@TODO: In the future - should really create a field type for meetings...
    if (is_array($form['submitted']) && array_key_exists('meeting',
            $form['submitted'])) {
        //test
        $view = views_get_view('event_calendar');
        if (!$view || !$view->access($event_block)) {
            return;
        }
        $view->preview($event_block, array());

        //Remove the placeholder option from the options list.
        array_pop($form['submitted']['meeting']['#options']);

        //add the available meetings for the current user.
        foreach ($view->result as $meeting) {
            $node = node_load($meeting->nid);
            $dates = field_get_items('node', $node, 'field_datespan');
            $start = $dates[0]['value'];
            $date = date('m/d/Y', $start);
            $title = "$meeting->node_title - $date";
            $form['submitted']['meeting']['#options'][$meeting->nid] = $title;
        }
    }
}
 
/**
 *Ajax callback for the preview button on webforms.
 * 
 * @TODO: make sure this works for other field types.
 * @TODO: Make this into a component and hook for field views.
 * @param type $form
 * @param type $form_state
 * @return type 
 */
 function preview_submission($form, $form_state){
     //load up select option values from the field definitions:
    
     
     //go through the webform components and get out our custom fields.
     $custom_fields = array();
     $select_fields = array();
     $file_fields = array();
     foreach($form_state['webform']['component_tree']['children'] as $component){
         if($component['type'] == 'ebms_travel'){
             //get the cid to access sub-array.
             $custom_fields[$component['form_key']] = $component['cid'];
             //take care of the select field.
              $keypairs = explode("\n",$component['extra']['items']);
                $options = array();
                foreach ($keypairs as $keypair) {
                    $tmp = explode('|', $keypair);
                    $options[$tmp[0]] = $tmp[1];
                }
                $select_fields[$component['form_key']] = $options;
         }
         //if the component is a select component - we want to get its
         //key-value pairs
         else if($component['type'] == 'select'){
            $keypairs = explode("\n",$component['extra']['items']);
            $options = array();
            foreach ($keypairs as $keypair) {
                $tmp = explode('|', $keypair);
                $options[$tmp[0]] = $tmp[1];
            }
            $select_fields[$component['form_key']] = $options;
         }
         //Take care of file fields
         else if($component['type'] == 'file'){
             $file_fields[$component['form_key']] = 'The '.$component['name'].' file have been uploaded.';
         }
         //else if ($component['type'] == 'date'){
         //    $test = $component;
         //    $date_fields[$component['form_key']] = 
         //}
        
     }
     
     //now we want to make up for the custom form-alter we did in the meeting field
     
     $event_block = _ebms_travel_get_meeting_block($form);
     $pair = _ebms_travel_get_meetings($event_block);
     $select_fields['meeting'] = $pair;
     
     $output = array();
     //create the preview - shouldn't need to do anything special for regular fields.
     foreach($form_state['values']['submitted'] as $key => $sub_item){
         
        
         
         if(!is_array($sub_item) && !empty($sub_item)){
              $output[]='<strong>'.strtoupper($key).'</strong>';
             //take care of select types.
             if(!empty($select_fields[$key])){
                 
                 $output[] = $select_fields[$key][$sub_item];
             }
             //take care of file fields
             else if(!empty($file_fields[$key])){
                 $output[] = $file_fields[$key];
             }
             //default
             else {
                 //hard code $ into preview fields for now...
                 $subitem = $key == 'amount' ? '$' : '';
                 $subitem .= $sub_item;
                 $output[] = $subitem;
             
             }
             
         }
         //this is one of our custom fields.
         else if(array_key_exists ($key, $custom_fields) ) {
             $output[]='<strong>'.strtoupper($key).'</strong>';
             $cid = $custom_fields[$key];
             $field_name = 'ebms-travel-'.$cid.'-fieldset';
             foreach($sub_item[$field_name] as $ebms_travel_field){
                 //the ebms_travel field has 3 fields: Date, Select, Text
                 $output[] = $select_fields[$key][$ebms_travel_field['type']] .' - '. implode('/',$ebms_travel_field['date']) . ' - $' . $ebms_travel_field['expense'];
             }
         }
         //Date fields are arrays...
         else if(is_array($sub_item) && array_key_exists('month', $sub_item) && 
                 !empty($sub_item['month']) && 
                 !empty($sub_item['day']) &&
                 !empty($sub_item['year'])){
             $output[]='<strong>'.strtoupper($key).'</strong>';
             $output[] = $sub_item['month'].'/'.$sub_item['day'].'/'.$sub_item['year'];
         }
     }
     
     $value = implode('<br/>', $output);
     $form['preview-container']=array(
       '#prefix'=>'<div id="preview-area">',
         '#markup' => filter_xss_admin($value),
       '#suffix'=>'</div>',
   );
     
     return $form['preview-container'];
 }
 
 function _ebms_travel_get_meeting_block($form){
         // Determine if it's one of our special reports via URL
    if (isset($form['#node']->nid)) {
        $isReimbursementRequest = url('node/' . $form['#node']->nid) == '/travel/reimbursement-request';
        $isHotelRequest = url('node/' . $form['#node']->nid) == '/travel/hotel-request';
    } else {
        // This is actually most likely NOT true, but 'nid' doesn't exist when
        // there are no results, I think, so it SHOULDN'T matter.
        $isReimbursementRequest = FALSE;
        $isHotelRequest = FALSE;
    }
    
    $event_block = 'block_past';
    if($isHotelRequest)
        $event_block = 'block_upcoming';
    
    return $event_block;
 }
 
 function _ebms_travel_get_meetings($event_block){
    $view = views_get_view('event_calendar');
    if (!$view || !$view->access($event_block)) {
        return;
    }
    $view->preview($event_block, array());

    //add the available meetings for the current user.
    $pair = array();
    foreach($view->result as $meeting) {
        $pair[$meeting->nid] = $meeting->node_title;
    }
    return $pair;
 }
 
/**
* Page callback for modal review creation.
*/
function ebms_webforms_ctools_modal_review($js = FALSE) {

  $output = '<h1>' . t('Hello World') . '</h1>';
  
  if ($js) {
    ctools_include('ajax');
    ctools_include('modal');
    return ctools_modal_render($output); // this function exits.
//    exit;
  }
  else {
    return $output;
  }
}

/**
* Implements hook_webform_component_info().
*/
function ebms_webforms_webform_component_info() {
    $components = array();
    $components['ebms_travel'] = array(
    'label' => t('EBMS Travel'),
    'description' => t('EBMS Travel Form.'),
    'features' => array(
        'csv' => TRUE,
        'email' => TRUE,
        'email_address' => FALSE,
        'email_name' => FALSE,
        'required' => TRUE,
        'conditional' => TRUE,
        'title_display' => TRUE,
        'title_inline' => TRUE,
        'private' => TRUE,
        'group' => FALSE,
        'spam_analysis' => FALSE,
        'attachment' => FALSE,
        ),
    );
    return $components;
}

/**
* Implements _webform_defaults_component().
*/
function _webform_defaults_ebms_travel() {
    return array(
    'name' => '',
    'form_key' => NULL,
    'pid' => 0,
    'weight' => 0,
    'value' => '',
    'mandatory' => TRUE,
    'extra' => array(
        'items' => '',
        'size' => '',
        'maxlength' => '250',
        'disabled' => 0,
        'unique' => FALSE,
        'title_display' => 0,
        'date_description' => t('Please select the date in which this expense occured.'),
        'select_description' => t('Please select an option from the list above.'),
        'text_description' => t('Please enter the cost of the expense.'),
        'text_prefix', t(''),
        'attributes' => array(),
        'private' => FALSE,
        'choices' => '10',
        'num_trans' => '1',
        //add this to make the default webform select validator happy.
        'options_source' => '',
        
        ),
    );
}
/**
* Implements _webform_edit_component().
*/
function _webform_edit_ebms_travel($component) {
    $form = array();
    
    $form['display']['size'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#default_value' => $component['extra']['size'],
    '#description' => t('Width of the textfield.') . ' ' . t('Leaving blank will use the default size.'),
    '#size' => 5,
    '#maxlength' => 10,
    '#weight' => 0,
    '#parents' => array('extra', 'size'),
    );
    $form['validation']['unique'] = array(
    '#type' => 'checkbox',
    '#title' => t('Unique'),
    '#return_value' => 1,
    '#description' => t('Check that all entered values for this field are unique. The same value is not allowed to be used twice.'),
    '#weight' => 1,
    '#default_value' => $component['extra']['unique'],
    '#parents' => array('extra', 'unique'),
    );
    $form['validation']['maxlength'] = array(
    '#type' => 'textfield',
    '#title' => t('Maxlength'),
    '#default_value' => $component['extra']['maxlength'],
    '#description' => t('Maximum length of the textfield value.'),
    '#size' => 5,
    '#maxlength' => 10,
    '#weight' => 2,
    '#parents' => array('extra', 'maxlength'),
    );
    $form['validation']['num_trans'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of Transporation Forms to show by default'),
    '#default_value' => $component['extra']['num_trans'],
    '#description' => t('Maximum length of the textfield value.'),
    '#size' => 5,
    '#maxlength' => 10,
    '#weight' => 2,
    '#parents' => array('extra', 'maxlength'),
    );
    $form['extra']['items'] = array(
      '#type' => 'textarea',
      '#title' => t('Options'),
      '#default_value' => $component['extra']['items'],
      '#description' => t('<strong>Key-value pairs MUST be specified as "safe_key|Some readable option"</strong>. Use of only alphanumeric characters and underscores is recommended in keys. One option per line. Option groups may be specified with &lt;Group Name&gt;. &lt;&gt; can be used to insert items at the root of the menu after specifying a group.') . theme('webform_token_help'),
      '#cols' => 60,
      '#rows' => 5,
      '#weight' => 0,
      '#required' => TRUE,
      '#wysiwyg' => FALSE,
      '#element_validate' => array('_webform_edit_validate_select'),
    );
    $form['extra']['date_description'] = array(
      '#type' => 'textfield',
      '#title' => t('Date Description'),
      '#default_value' => $component['extra']['date_description'],
      '#description' => t(''),
      '#size' => 100,
    '#maxlength' => 250,
    '#weight' => 2,
    );
    $form['extra']['select_description'] = array(
      '#type' => 'textfield',
      '#title' => t('Select Description'),
      '#default_value' => $component['extra']['select_description'],
      '#description' => t(''),
      '#size' => 100,
    '#maxlength' => 250,
    '#weight' => 2,
    );
    $form['extra']['text_description'] = array(
      '#type' => 'textfield',
      '#title' => t('Text Description'),
      '#default_value' => $component['extra']['text_description'],
      '#description' => t(''),
     '#size' => 100,
     '#maxlength' => 250,
     '#weight' => 2,
    );
    $form['extra']['text_prefix'] = array(
      '#type' => 'textfield',
      '#title' => t('Text Prefix'),
      '#default_value' => $component['extra']['text_description'],
      '#description' => t('Please enter a prefix for this field if one is required. ie. $'),
     '#size' => 10,
     '#maxlength' => 250,
     '#weight' => 2,
    );
    return $form;
}



/**
 * Implements _webform_submission_presave() 
 * 
 * Because we 1) added dynamic form elements and 2) have a compound field and all of the 
 * data is going to be stored in a single key value pair in the database - we need to
 * serialize the data so that it can stored and accessed easily.
 * 
 * TODO: 
 * 1) Serialize the data
 * 2) Ensure it is saved correctly
 * 
 * Nice to Haves (should be implemented in the future)
 * 1) Make this field type generic.
 * @param type $node
 * @param type $submission 
 */
function ebms_webforms_webform_submission_presave($node, &$submission) {
  $data = $submission;
  
  //Incase we have several of these types of fields we should take care of
  //all of them here.
  foreach($submission->data as $index => $value){
      //$value = $value_arr['value'];
      if(!empty($value) && count($value) > 1){
          //we only want to serialize the first part of the array, the second part are the buttons.
          $serial = serialize(array_shift($value));
          $submission->data[$index] = array($serial);
      }
  }
  
  
  
  
  
}

/**
* Render a Webform component to be part of a form.
*/
function _webform_render_ebms_travel($component, $value = NULL, $filter = TRUE) {
    
    //If this is an edit for, unserialize the value.
    $count = 0;
    $val_array = array();
    if(is_array($value)){
        $val_array = unserialize($value[0]);
        $count = count($val_array);
    }
    
    $options = _webform_select_options($component, false, $filter);
    $id = 'ebms-travel-'.$component['cid'];
    $fieldset = $id.'-fieldset';
  //Setup a fieldet that we will be adding dynamic fields too.
  $form[$fieldset] = array(
    '#type' => 'fieldset',
    '#title' => $component['name'],
    // Set up the wrapper so that AJAX will be able to replace the fieldset.
    '#prefix' => '<div id="'.$id.'-fieldset-wrapper">',
    '#suffix' => '</div>',
  );

  // Build the fieldset with the proper number of names. We'll use
  // $form_state['num_names'] to determine the number of textfields to build.
  if (empty($component['extra']['num_trans'])) {
    $component['extra']['num_trans'] = 1;
  }
  else if($count){
       $component['extra']['num_trans'] = $count;
  }
  for ($i = 0; $i < $component['extra']['num_trans']; $i++) {
      $val = '';
      if(count($val_array) > $i)
      {
          $val = $val_array[$i];
      }
    $form[$fieldset][$i]['date'] = array(
        '#type' => 'date',
        '#title' => 'Date of Expense',
        '#title_display' => $component['extra']['title_display'] ? $component['extra']['title_display'] : 'before',
        '#default_value' => $val ? $val['date'] : $component['value'],
        '#required' => $component['mandatory'],
        '#weight' => $component['weight']-1,
        '#description' => $filter ? _webform_filter_descriptions($component['extra']['date_description']) : $component['extra']['date_description'],
        '#attributes' => $component['extra']['attributes'],
        '#theme_wrappers' => array('webform_element'),
        '#webform_component' => $component,
        '#multiple' => false,   
    );
    $form[$fieldset][$i]['type'] = array(
        '#type' => 'select',
        '#title' => 'Ground Transportation',
        '#default_value' => $val ? $val['type'] : $component['value'],
        '#required' => $component['mandatory'],
        '#weight' => $component['weight']-1 ,
        '#description' => $filter ? _webform_filter_descriptions($component['extra']['select_description']) : $component['extra']['select_description'],
        '#attributes' => $component['extra']['attributes'],
        '#theme_wrappers' => array('webform_element'),
        '#webform_component' => $component,
        '#multiple' => false,   // Set the component options.
        '#options' => $options,
    );
    $form[$fieldset][$i]['expense'] = array(
       '#type' => 'textfield',
        '#title' => 'Amount',
        '#title_display' => $component['extra']['title_display'] ? $component['extra']['title_display'] : 'before',
        '#default_value' => $val ? $val['expense'] : $component['value'],
        '#required' => $component['mandatory'],
        '#weight' => $component['weight']+1,
        '#description' => $filter ? _webform_filter_descriptions($component['extra']['text_description']) : $component['extra']['text_description'],
        '#attributes' => $component['extra']['attributes'],
        '#theme_wrappers' => array('webform_element'),
        '#webform_component' => $component,
        '#multiple' => false,   
        '#field_prefix'=> $component['extra']['text_prefix'] ?$component['extra']['text_prefix'] : '' ,
    );
  }
  $form['trans_add_rem'][$fieldset]['add_trans'] = array(
    '#type' => 'submit',
    '#value' => t('Add one more'),
    '#submit' => array('ebms_webforms_add_one'),
      '#name' => $id,
    // See the examples in ajax_example.module for more details on the
    // properties of #ajax.
      '#limit_validation_errors' => array(),
    '#ajax' => array(
      'callback' => 'ebms_webforms_add_more_callback',
      'wrapper' => $id.'-fieldset-wrapper',
        'instance' => $component['cid'],
          'callback_val' => $id . '-fieldset',
    ),
  );
  if ($component['extra']['num_trans'] > 1) {
    $form['trans_add_rem'][$fieldset]['remove_trans'] = array(
      '#type' => 'submit',
      '#value' => t('Remove one'),
      '#submit' => array('ebms_webforms_remove_one'),
      '#ajax' => array(
        'callback' => 'ebms_webforms_add_more_callback',
        'wrapper' => $id.'-fieldset-wrapper',
          'instance' => $component['cid'],
          'callback_val' => $id . '-fieldset',
      ),
    );
  }
  
    $element = $form;
  
    // Enforce uniqueness.
   // if ($component['extra']['unique']) {
    //$element['#element_validate'][] = 'webform_imei_validate_imei_unique';
    //}
    // Change the 'width' option to the correct 'size' option.
    if ($component['extra']['size'] > 0) {
    //$element['#size'] = $component['extra']['size'];
    }
    if ($component['extra']['maxlength'] > 0) {
    //$element['#maxlength'] = $component['extra']['maxlength'];
    }
   
    
    //$element = drupal_get_form('ajax_example_add_more');
    return $element;
 
}

/**
 * Callback for both ajax-enabled buttons.
 *
 * Selects and returns the fieldset with the names in it.
 */
function ebms_webforms_add_more_callback($form, $form_state) {
  $component = $form_state['clicked_button']['#ajax']['callback_val'];
  $element = $form_state['clicked_button']['#parents'][1];
  return $form['submitted'][$element][$component];
}

/**
 * Submit handler for the "add-one-more" button.
 *
 * Increments the max counter and causes a rebuild.
 */
function ebms_webforms_add_one($form, &$form_state) {
  $component = $form_state['clicked_button']['#ajax']['instance'];
  $form_state['build_info']['args'][0]->webform['components'][$component]['extra']['num_trans']++;
  $form_state['rebuild'] = TRUE;
}

/**
 * Submit handler for the "remove one" button.
 *
 * Decrements the max counter and causes a form rebuild.
 */
function ebms_webforms_remove_one($form, &$form_state) {
  if ($form_state['build_info']['args'][0]->webform['components'][7]['extra']['num_trans'] > 1) {
   $form_state['build_info']['args'][0]->webform['components'][7]['extra']['num_trans']--;
  
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * @} End of "defgroup ajax_degradation_example".
 */


/**
* Display the result of a submission for a component.
*/
function _webform_display_ebms_travel($component, $value, $format = 'html') {
    return array(
    '#title' => $component['name'],
    '#weight' => $component['weight'],
    '#theme' => 'webform_display_ebms_travel',
    '#theme_wrappers' => $format == 'html' ? array('webform_element') : array('webform_element_text'),
    '#post_render' => array('webform_element_wrapper'),
    '#component' => $component,
    '#format' => $format,
    '#value' => isset($value[0]) ? webform_ebms_travel_display_format($value[0]) : '',
    '#webform_component' => $component,
    );
}
/**
* Module specific instance of hook_theme().
*
* This allows each Webform component to add information into hook_theme().
*/
function _webform_theme_ebms_travel() {
    return array(
        'webform_display_ebms_travel' => array(
        'render element' => 'element',
        ),
    );
}

/**
* Format the serialized data that we stored in the database into a list
    * of transportation expenses that a user entered.
*/
function webform_ebms_travel_display_format($value) {
    $newVal = unserialize($value);
    foreach($newVal as $value_pair){
        $output[] = $value_pair;
        //$output[] = $value_pair['type'] .' - '. implode('/',$value_pair['date']) . ' - ' . $value_pair['expense'];
    }
    $value = $output;//implode('<br>', $output);
    return $value;
}


/**
* Format the output of data for this component.
 * 
 * @TODO: 
 * 1) Make the delimiter and output order of this widget configurable.
*/
function theme_webform_display_ebms_travel($variables) {
    $element = $variables['element'];
    $component = $element['#webform_component'];
    // Flatten the list of options so we can get values easily.
    $keypairs = explode("\n",$component['extra']['items']);
    $options = array();
    foreach ($keypairs as $keypair) {
        $tmp = explode('|', $keypair);
        $options[$tmp[0]] = $tmp[1];
    }
    
    //set the format for out complex field.
    //Item 1 - Select list 
    //Item 2 - Date
    //Item 3 - Text
     $items = array();
    foreach($element['#value'] as $value_pair){
        $items[] = $options[$value_pair['type']] .' - '. implode('/',$value_pair['date']) . ' - $' . $value_pair['expense'];
    }
    
    
    $value = implode('<br>', $items);
    return $value !== '' ? $value : ' ';
}
/**
* Return the result of a component value for display in a table.
*/
function _webform_table_ebms_travel($component, $value) {
     $keypairs = explode("\n",$component['extra']['items']);
    $options = array();
    foreach ($keypairs as $keypair) {
        $tmp = explode('|', $keypair);
        $options[$tmp[0]] = $tmp[1];
    }
    
    //set the format for out complex field.
    //Item 1 - Select list 
    //Item 2 - Date
    //Item 3 - Text
    $value = unserialize($value[0]);
     $items = array();
    foreach($value as $value_pair){
        $items[] = $options[$value_pair['type']] .' - '. implode('/',$value_pair['date']) . ' - $' . $value_pair['expense'];
    }
    
    
    $value = implode('<br>', $items);
    return $value !== '' ? $value : ' ';
}
/**
* Return the heading for this component to be displayed in a CSV file.
*/
function _webform_csv_headers_ebms_travel($component, $export_options) {
    $header = array();
    $header[0] = '';
    $header[1] = '';
    $header[2] = $component['name'];
    return $header;
}
/**
* Format the submitted data of a component for CSV downloading.
*/
function _webform_csv_data_ebms_travel($component, $export_options, $value) {
    return !isset($value[0]) ? '' : webform_ebms_travel_display_format($value[0]);
}

/**
 * See webform_results_table() in webform.report.inc
 * 
 * @param type $node
 * @param type $pager_count
 * @return type
 */
function _ebms_webforms_results_table($node, $pager_count = 0) {
    
    // Add our custom CSS to this page
    drupal_add_css(drupal_get_path('module', 'ebms_webforms').'/includes/ebms_webform.css');
    
    // Determine if it's one of our special reports via URL
    if (array_key_exists('nid', $node->webform)) {
        $isReimbursementRequest = url('node/' . $node->webform['nid']) == '/travel/reimbursement-request';
        $isHotelRequest = url('node/' . $node->webform['nid']) == '/travel/hotel-request';
    } else {
        // This is actually most likely NOT true, but 'nid' doesn't exist when
        // there are no results, I think, so it SHOULDN'T matter.
        $isReimbursementRequest = FALSE;
        $isHotelRequest = FALSE;
    }

    // If it's a non-special report, return the default function
    if (!$isReimbursementRequest && !$isHotelRequest) {
        module_load_include('inc', 'webform', 'includes/webform.report');
        $default = webform_results_table($node, $pager_count);
        return $default;
    }
    
    // Load the left nav for reports
    module_load_include('inc', 'ebms', 'reports');
    $left_nav = EbmsReports::build_left_nav();
        



    // From here down is somewhat copied and modified from the default webform_results_table
    if (isset($_GET['results']) && is_numeric($_GET['results'])) {
        $pager_count = $_GET['results'];
    }

    // Get all the submissions for the node.
    $rows = array();
    $header = theme('webform_results_table_header', array('node' => $node));
    unset($header[0]); // Submission Number
    unset($header[3]); // IP Address
    $submissions = webform_get_submissions($node->nid, $header, $pager_count);
    $total_count = webform_get_submission_count($node->nid);
    $component = $node->webform['components'];

    foreach ($submissions as $sid => $submission) {

        $cell[] = format_date($submission->submitted, 'custom', 'M/d/Y | h:i A T');
        $cell[] = theme('username', array('account' => $submission));

        $component_headers = array();

        // Generate a cell for each component.
        foreach ($node->webform['components'] as $component) {
            if ($isReimbursementRequest && $component['form_key'] == 'certify')
                continue; // Do not display "Certify" comment; should always be yes
            $data = isset($submission->data[$component['cid']]) ? $submission->data[$component['cid']] : NULL;
            $submission_output = webform_component_invoke($component['type'], 'table', $component, $data);
            if ($submission_output !== NULL) {
                $component_headers[] = check_plain($component['name']);

                if (($isHotelRequest || $isReimbursementRequest ) && // Must be the correct webform; based off URLs as rest of code
                        $component['form_key'] == 'meeting' // Correct Component
                ) {
                    $nodeComponent = node_load($submission_output);
                    if ($nodeComponent)
                        $cell[] = l($nodeComponent->title, 'node/' . $nodeComponent->nid);
                    else
                        $cell[] = 'N/A';
                } else
                    $cell[] = $submission_output;
            }
        }

        $rows[] = $cell;
        unset($cell);
    }
    if (!empty($component_headers)) {
        $header = array_merge($header, $component_headers);
    }

    if (count($rows) == 0) {
        $rows[] = array(array('data' => t('There are no submissions for this form. <a href="!url">View this form</a>.', array('!url' => url('node/' . $node->nid))), 'colspan' => 4));
    }

    
    // Since all webforms are likely to go in the reports section, let's
    // make that breadcrumb universal
    drupal_set_breadcrumb(array(
        l('Reports', 'reports'),
        drupal_get_title(),
    ));
    
    // Set the top navigation to be Reports
    module_load_include('inc', 'ebms', 'common');
    Ebms\Menu::$active = 'Reports';

    
    $output = '';
    
    // Build Left Nav, if appropriate
    if ($isHotelRequest) {
        $left_nav = EbmsReports::build_left_nav('Board Management', 'Hotel Requests');
        $output .= render($left_nav);
    }
    elseif ($isReimbursementRequest) {
        $left_nav = EbmsReports::build_left_nav('Board Management', 'Reimbursement Requests');
        $output .= render($left_nav);
    }
    
    // Add the title and add the -right class
    $output .= '<div id="webform-table-right">';
    $output .= '<h2>'.$node->title.' ('.$total_count.')</h2><br/>';
    
    // Special class for long tables
    if ($isReimbursementRequest)
        $output .= '</div><div id="webform-table-long-right">';
    
    // Add the results table
    $output .= theme('table', array('header' => $header, 'rows' => $rows));

    // Add the pager
    if ($pager_count) {
        $output .= theme('pager');
    }

    // Close the -right class
    $output .= '</div>';
    
    return $output;
}

/* http://www.metachunk.com/blog/adding-module-path-drupal-7-theme-registry */

function ebms_webforms_theme_registry_alter(&$theme_registry) {
    $mod_path = drupal_get_path('module', 'ebms_webforms');
    $mod_path .= '/templates';
    $theme_registry_copy = $theme_registry;       // munge on a copy
    _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'ebmstheme', $mod_path);
    $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
    $hooks = array('node', 'block',); // 'forums', 'forum_list', 'forum_topic_list', 'forum_icon', 'forum_submitted', 'forum_form');
    foreach ($hooks as $h) {
        
        _ebms_forums_insert_after_first_element($theme_registry[$h]['theme paths'], $mod_path);
    }
    
}

/**
 * Adding breadcrumbs to travel page
 * 
 * @param type $vars
 */
function ebms_webforms_preprocess_page(&$vars) {
    $url = $_GET['q'];
    $alias = url($url);
    if (strstr($alias, 'travel')) {
        
        // Set the breadcrumb
        if ($alias == '/travel') {
            // TIR#2333 - Travel landing page should not have breadcrumb
            drupal_set_breadcrumb(l('Travel', 'travel'));
        } else {
            drupal_set_breadcrumb(array(
                l('Travel', 'travel'),
                drupal_get_title(),
            ));
        }
        
        // Set the top nav
        // This is not the most elegant way... but it works
        drupal_add_js("(function ($) { $(document).ready(function() {
                $('#ebms-menu').children().each(function () {
                    if ($(this).children('a:first').html() == 'Travel') {
                        $(this).addClass('active');
                    }
                });
            }); }) (jQuery);", 'inline');
    }
}