<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\ebms_article\Entity\Article;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Database\Query\SelectInterface;

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function ebms_article_ebms_article_presave(EntityInterface $entity): void {
  if (!empty($entity->title->value)) {
    if (empty($entity->search_title->value)) {
      $search_title = substr(Article::normalize($entity->title->value), 0, 512);
      $entity->set('search_title', $search_title);
    }
  }
  $last_author_name = '';
  foreach ($entity->authors as $author) {
    if (empty($author->display_name)) {
      $author->set('display_name', Article::getAuthorDisplayName($author));
    }
    if (empty($author->search_name)) {
      $author->set('search_name', Article::normalize($author->display_name));
    }
    $last_author_name = $author->search_name;
  }
  if (empty($entity->last_author_name->value)) {
    $entity->set('last_author_name', $last_author_name);
  }
}

/**
 * Implements hook_theme().
 */
function ebms_article_theme($existing, $type, $theme, $path): array {
  return [
    'citation' => [
      'variables' => [
        'article_title' => NULL,
        'authors' => NULL,
        'journal' => NULL,
        'ids' => NULL,
        'publication' => NULL,
        'abstract_link' => FALSE,
        'cycles' => NULL,
        'full_text' => NULL,
        'related' => NULL,
        'tags' => NULL,
        'internal' => NULL,
        'import' => NULL,
        'refreshes' => NULL,
      ],
    ],
    'board_article_states' => [
      'variables' => [
        'board' => NULL,
        'topics' => NULL,
      ],
    ],
    'topic_article_states' => [
      'variables' => [
        'topic' => NULL,
        'buttons' => NULL,
        'comments' => NULL,
        'tags' => NULL,
        'states' => NULL,
        'imports' => NULL,
      ],
    ],
    'article_state' => [
      'variables' => [
        'state' => NULL,
        'date' => NULL,
        'user' => NULL,
        'current' => FALSE,
        'active' => TRUE,
        'comments' => NULL,
        'notes' => NULL,
        'legend' => NULL,
        'button' => NULL,
      ],
    ],
    'state_comment' => [
      'variables' => [
        'body' => NULL,
        'entered' => NULL,
        'user' => NULL,
      ],
    ],
    'show_abstract' => [
      'variables' => [
        'abstract' => [],
        'pmid' => NULL,
      ],
    ],
    'article_search_result' => [
      'variables' => [
        'article' => NULL,
        'restricted' => FALSE,
      ],
    ],
    'internal_article' => [
      'variables' => [
        'article' => NULL,
      ],
    ],
    'simple_search_results' => [
      'variables' => [
        'articles' => NULL,
        'filters' => FALSE,
      ],
    ],
    'full_text_queue_article' => [
      'variables' => [
        'article' => NULL,
      ],
    ],
    'article_info' => [
      'variables' => [
        'title' => NULL,
        'citation' => NULL,
      ],
    ],
    'related_articles_info' => [
      'variables' => [
        'title' => NULL,
        'citation' => NULL,
        'related_title' => NULL,
        'related_citation' => NULL,
      ],
    ],
  ];
}

/**
 * Default preprocess for the citation theme hook.
 *
 * @param $variables
 */
function template_preprocess_citation(&$variables): void {
  $variables['attributes'] = ['class' => ['citation']];
}

/**
 * Default theme preprocess hook for the collection of per-board states.
 *
 * @param $variables
 */
function template_preprocess_board_article_states(&$variables): void {
  $variables['attributes'] = ['class' => ['board-states']];
}

/**
 * Default theme preprocess hook for the collection of per-topic states.
 *
 * @param $variables
 */
function template_preprocess_topic_article_states(&$variables): void {
  $variables['attributes'] = ['class' => ['topic-states']];
}

/**
 * Default theme preprocess hook for an article state.
 *
 * @param $variables
 */
function template_preprocess_article_state(&$variables): void {
  $variables['attributes'] = ['class' => ['article-state']];
}

/**
 * Default theme preprocess hook for an article state comment.
 *
 * @param $variables
 */
function template_preprocess_state_comment(&$variables): void {
  $variables['attributes'] = ['class' => ['state-comment']];
}

/**
 * Implements hook_entity_base_field_info().
 */
function ebms_article_entity_base_field_info(EntityTypeInterface $entity_type): array {
  if ($entity_type->id() === 'ebms_state') {
    return [
      'article' => BaseFieldDefinition::create('entity_reference')
        ->setSetting('target_type', 'ebms_article')
        ->setLabel('Article')
        ->setDescription('Article to which this state belongs.')
        ->setDisplayOptions('view', ['label' => 'above']),
    ];
  }
  return [];
}

/**
 * Implements hook_preprocess_page().
 *
 * This is needed because of a bug the core Drupal team forgot about.
 * See https://www.drupal.org/project/drupal/issues/2497457.
 */
function ebms_article_preprocess_page(&$variables): void {
  if (\Drupal::routeMatch()->getRouteName() === 'ebms_article.search_results') {
    \Drupal::service('plugin.manager.menu.local_action')->clearCachedDefinitions();
  }
}

/**
 * Implements hook_query_TAG_alter.
 *
 * We're altering the query sort to put articles which are published in "core"
 * journals ahead of other articles, using information which is not stored in
 * the `Article` entity.
 *
 * See ReviewQueue::buildForm() and SearchQuery::buildForm().
 */
function ebms_article_query_core_journal_sort_alter(AlterableInterface $query) {
  if ($query instanceof SelectInterface) {
    if (count($query->getFields()) === 2) {
      $query->leftJoin('ebms_journal', 'core_journal_test', 'core_journal_test.source_id = base_table.source_journal_id');
      $query->groupBy('core_journal_test.core');
      $query->orderBy('core_journal_test.core', 'DESC');
      $query->orderBy('base_table.title');
    }
  }
}

/**
 * Implements hook_query_TAG_alter.
 *
 * The entity query API times out, so use the Database API.
 */
function ebms_article_query_search_modified_date_alter(AlterableInterface $query) {
  if ($query instanceof SelectInterface) {

    // Collect the values to be used.
    $start = $query->getMetaData('search_modified_date_start');
    $end = $query->getMetaData('search_modified_date_end');
    $topics = $query->getMetaData('search_modified_topics');
    $boards = $query->getMetaData('search_modified_boards');

    // Create the joins for the article's states.
    $join_clause = 'modified_date_state.article = base_table.id';
    $join_arguments = [];
    if (!empty($topics)) {
      ebms_debug_log('topics = ' . print_r($topics, TRUE));
      $join_clause .= ' AND modified_date_state.topic IN :modified_date_state_topics[]';
      $join_arguments[':modified_date_state_topics[]'] = $topics;
    }
    elseif (!empty($boards)) {
      ebms_debug_log('boards = ' . print_r($boards, TRUE));
      $join_clause .= ' AND modified_date_state.board IN :modified_date_state_boards[]';
      $join_arguments[':modified_date_state_boards[]'] = $boards;
    }
    $query->leftJoin('ebms_state', 'modified_date_state', $join_clause, $join_arguments);
    $query->leftJoin('ebms_state__comments', 'modified_date_state_comment', 'modified_date_state_comment.entity_id = modified_date_state.id');

    // Create the joins for the tags assigned directly to the articles.
    $query->leftJoin('ebms_article__tags', 'modified_date_article_tags', 'modified_date_article_tags.entity_id = base_table.id');
    $query->leftJoin('ebms_article_tag', 'modified_date_article_tag', 'modified_date_article_tag.id = modified_date_article_tags.tags_target_id');
    $query->leftJoin('ebms_article_tag__comments', 'modified_date_article_tag_comment', 'modified_date_article_tag_comment.entity_id = modified_date_article_tag.id');

    // Create the joins for the tags assigned to article topics.
    $query->leftJoin('ebms_article__topics', 'modified_date_article_topics', 'modified_date_article_topics.entity_id = base_table.id');
    if (!empty($topics)) {
      $query->leftJoin('ebms_article_topic', 'modified_date_article_topic', 'modified_date_article_topic.id = modified_date_article_topics.topics_target_id AND modified_date_article_topic.topic IN :modified_date_topic_tag_topics[]', [':modified_date_topic_tag_topics[]' => $topics]);
    }
    elseif (!empty($boards)) {
      $query->leftJoin('ebms_article_topic', 'modified_date_article_topic', 'modified_date_article_topic.id = modified_date_article_topics.topics_target_id');
      $query->leftJoin('ebms_topic', 'modified_date_topic', 'modified_date_topic.id = modified_date_article_topic.topic AND modified_date_topic.board IN :modified_date_article_topic_tag_boards[]', [':modified_date_article_topic_tag_boards[]' => $boards]);
    }
    $query->leftJoin('ebms_article_topic__tags', 'modified_date_article_topic_tags', 'modified_date_article_topic_tags.entity_id = modified_date_article_topics.topics_target_id');
    $query->leftJoin('ebms_article_tag', 'modified_date_article_topic_tag', 'modified_date_article_topic_tag.id = modified_date_article_topic_tags.tags_target_id');
    $query->leftJoin('ebms_article_tag__comments', 'modified_date_article_topic_tag_comment', 'modified_date_article_topic_tag_comment.entity_id = modified_date_article_topic_tag.id');

    // Now look for the dates.
    $group = $query->orConditionGroup();
    if (!empty($start)) {
      if (!empty($end)) {
        $range = [$start, $end];
        $group->condition('modified_date_state.entered', $range, 'BETWEEN');
        $group->condition('modified_date_state_comment.comments_entered', $range, 'BETWEEN');
        $group->condition('modified_date_article_tag.assigned', $range, 'BETWEEN');
        $group->condition('modified_date_article_tag_comment.comments_entered', $range, 'BETWEEN');
        $group->condition('modified_date_article_topic_tag.assigned', $range, 'BETWEEN');
        $group->condition('modified_date_article_topic_tag_comment.comments_entered', $range, 'BETWEEN');
      }
      else {
        $group->condition('modified_date_state.entered', $start, '>=');
        $group->condition('modified_date_state_comment.comments_entered', $start, '>=');
        $group->condition('modified_date_article_tag.assigned', $start, '>=');
        $group->condition('modified_date_article_tag_comment.comments_entered', $start, '>=');
        $group->condition('modified_date_article_topic_tag.assigned', $start, '>=');
        $group->condition('modified_date_article_topic_tag_comment.comments_entered', $start, '>=');
      }
    }
    elseif (!empty($end)) {
      $group->condition('modified_date_state.entered', $end, '<=');
      $group->condition('modified_date_state_comment.comments_entered', $end, '<=');
      $group->condition('modified_date_article_tag.assigned', $end, '<=');
      $group->condition('modified_date_article_tag_comment.comments_entered', $end, '<=');
      $group->condition('modified_date_article_topic_tag.assigned', $end, '<=');
      $group->condition('modified_date_article_topic_tag_comment.comments_entered', $end, '<=');
    }
    $query->condition($group);
    ebms_debug_log((string)$query);
  }

}
