<?php

/**
 *
 * @file
 *
 * Portal for PDQ Board members.
 *
 * "Editorial Board Management Site" (EBMS).
 *
 * Supported functionality includes:
 *   - literature review
 *   - PDQ Summary document exchange
 *   - calendar of events
 *   - meeting support information
 *   - announcements
 *   - threaded discussions
 *   - rosters and other reports
 *   - request forms (e.g., hotel reservations, reimbursements)
 */
require_once('common.inc');
require_once('not_for_production.inc'); // XXX drop when we're done developing.

module_load_include('inc', 'ebms', 'includes/ebms.nodes');

/**
 * Permissions granted to EBMS users.  Implementation of hook_permission().
 */
function ebms_permission() {
    return array(
            /* Administer EBMS vs Administer:
              The Administer permission below should be changed to be something
              other than "administer" since that permission is not really
              an admin type permission.  'administer ebms' will be used for managing
              board membership, subgroup membership, and adhoc membership.  Also
              this permission will grant access to all EBMS content.
              --BryanP 12/16/2012
             *
             */
            'administer ebms' => array(
                    'title' => t('Administer EBMS'),
                    'description' => t('Manage EBMS Membership and Users.  Note: Also enables access to all EBMS content.')
            ),
            'administer' => array(
                    'title' => t('Perform Administrative Tasks'),
                    'description' =>
                    t('Post documents, manage groups, send messages, etc.'),
            ),
            'manage citations' => array(
                    'title' => t('Manage Citations'),
                    'description' =>
                    t('Import and screen journal articles, and set their statuses'),
            ),
            'manage boards' => array(
                    'title' => t('Manage Boards'),
                    'description' =>
                    t('Make final determination of status for journal articles, ' .
                        'and assign literature for review'),
            ),
            'review literature' => array(
                    'title' => t('Review Literature'),
                    'description' =>
                    t('Review journal articles on cancer and make recommendations ' .
                        'for incorporation information from those articles into ' .
                        'PDQ\xc2\xae Cancer Summaries'),
            ),
            'view all events' => array(
                    'title' => t('View All Events'),
                    'description' =>
                    t('Determines if the user can access all events views in the ' .
                        'calendar. Note: This will also show all board events in ' .
                        "the user's filtered view. ")
            ),
            'record print responses' => array(
                    'title' => t('Record Print Responses'),
                    'description' =>
                    t('Determines if the user can input print responses on ' .
                        'behalf of board members.')
            ),

    );
}

/**
 *
 * Implements hook_menu.
 *
 * Creates our custom menus and other addressable pages.
 *
 * The Drupal Menu API is only being used for routing and the first
 * layer of permission checking.  We are unable to use that API
 * for construction of the rendered menu itself.  This is because
 * we are required to implement fly-out dynamic submenus, and the
 * contributed Drupal module generally used for this functionality
 * has a bug which prevents it from honoring the permissions
 * callback function registered with the API.  In the end it
 * turned out to be more efficient to handle menu building in our
 * own Menu class, implemented in common.inc.  As it turned out,
 * is was less trouble to wrap the jquery Superfish package with
 * our own theming, so we were able to dispense with the use of
 * the Drupal Superfish module altogether.
 */
function ebms_menu() {

    return array(

        // CUSTOM LOGIN PAGE
        'login' => array(
            'page callback' => 'pdq_ebms_login',
                'access callback' => true,
                'type' => MENU_CALLBACK,
        ),

        // REQUEST FOR NEW PASSWORD
        'password' => array(
                'page callback' => 'pdq_ebms_password',
                'access callback' => true,
                'type' => MENU_CALLBACK,
        ),

        // FORM FOR MANAGING USER'S PROFILE
        'profile' => array(
            'page callback' => 'pdq_ebms_profile',
            'file' => 'profile.inc',
            'access callback' => 'user_is_logged_in',
            'type' => MENU_CALLBACK,
        ),

        // LANDING PAGE
        'home' => array(
            'page callback' => 'pdq_ebms_home',
            'file' => 'home.inc',
            'access callback' => true,
            'type' => MENU_CALLBACK,
        ),

        // CITATION MANAGEMENT
        'citations' => array(
            'page callback' => 'pdq_ebms_citations',
            'file' => 'citations.inc',
            'access arguments' => array('manage citations'),
            'type' => MENU_CALLBACK,
        ),

        // CITATION IMPORT
        'citations/import' => array(
            'page callback' => 'pdq_ebms_import',
            'file' => 'import.inc',
            'access arguments' => array('manage citations'),
            'type' => MENU_CALLBACK,
        ),

        // PUBLISH CITATIONS
        'citations/publish' => array(
            'page callback' => 'pdq_ebms_publish',
            'file' => 'publish.inc',
            'access arguments' => array('manage citations'),
            'type' => MENU_CALLBACK,
        ),

        // AJAX CALLBACK FOR THE PUBLISH PAGE
        'publish-checkbox-ajax' => array(
            'page callback' => 'pdq_ebms_publish_checkbox_ajax',
            'file' => 'publish.inc',
            'access callback' => true,
            'type' => MENU_CALLBACK,
        ),

        // UPLOAD FULL-TEXT PDF FOR ARTICLES
        'citations/fulltext' => array(
            'page callback' => 'pdq_ebms_fulltext',
            'file' => 'fulltext.inc',
            'access callback' => 'pdq_ebms_is_admin_assistant',
            'type' => MENU_CALLBACK,
        ),

        // SEARCH DATABASE
        'citations/search' => array(
            'page callback' => 'pdq_ebms_search',
            'file' => 'search.inc',
            'access callback' => 'user_is_logged_in',
            'type' => MENU_CALLBACK,
        ),

        // ARTICLE DECISION QUEUES
        'citations/review' => array(
            'page callback' => 'pdq_ebms_citations',
            'page arguments' => array(1),
            'file' => 'citations.inc',
            'access arguments' => array('manage citations'),
            'type' => MENU_CALLBACK,
        ),

        // LINK TO RELATED ARTICLES (OCEEBMS-349)
        'citations/link' => array(
            'page callback' => 'pdq_ebms_link_related_article',
            'file' => 'citations.inc',
            'access arguments' => array('manage citations'),
            'type' => MENU_CALLBACK,
        ),

        // ARTICLE/TOPIC-SPECIFIC BOARD MANAGER COMMENTS (OCEEBMS-375)
        'citations/comment' => array(
            'page callback' => 'pdq_ebms_board_manager_comment',
            'file' => 'citations.inc',
            'access arguments' => array('manage citations'),
            'type' => MENU_CALLBACK,
        ),

        // XXX ADD CITATIONS (IS THIS STILL USED???)
        'citations/add' => array(
            'page callback' => 'pdq_ebms_citations',
            'page arguments' => array(1),
            'file' => 'citations.inc',
            'access arguments' => array('manage citations'),
            'type' => MENU_CALLBACK,
        ),

        // CITATIONS HELP
        'citations/help' => array(
            'page callback' => 'pdq_ebms_citations',
            'page arguments' => array(1),
            'file' => 'citations.inc',
            'access arguments' => array('manage citations'),
            'type' => MENU_CALLBACK,
        ),

        // CITATIONS ADMIN
        'citations/admin' => array(
            'page callback' => 'pdq_ebms_citations',
            'page arguments' => array(1),
            'file' => 'citations.inc',
            'access arguments' => array('manage citations'),
            'type' => MENU_CALLBACK,
        ),

        // CITATIONS NOT LIST
        'citations/not-list' => array(
            'page callback' => 'pdq_ebms_citations',
            'page arguments' => array(1),
            'file' => 'citations.inc',
            'access arguments' => array('manage citations'),
            'type' => MENU_CALLBACK,
        ),

        // FULL CITATION PAGE
        'citations/full' => array(
            'page callback' => 'pdq_ebms_citations',
            'page arguments' => array(1, 2),
            'file' => 'citations.inc',
            'access arguments' => array('manage citations'),
            'type' => MENU_CALLBACK,
        ),
        'citations/%ctools_js/add_tag' => array(
            'title' => 'Add Tag',
            'page callback' => '_ajax_modal_add_tag',
            'page arguments' => array(1, 3, 4),
            'file' => 'citations.inc',
            'access callback' => TRUE,
            'type' => MENU_CALLBACK,
        ),
        'citations/%ctools_js/view_abstract/%' => array(
            'title' => 'View Abstract',
            'page callback' => '_ajax_modal_view_abstract',
            'page arguments' => array(1, 3),
            'file' => 'citations.inc',
            'access callback' => TRUE,
            'type' => MENU_CALLBACK,
        ),

        // LITERATURE REVIEW
        'review' => array(
            'page callback' => 'pdq_ebms_review',
            'file' => 'review.inc',
            'access callback' => 'user_is_logged_in',
            'type' => MENU_CALLBACK,
        ),

        // ASSIGNED PACKETS
        'review/assigned' => array(
            'page callback' => 'pdq_ebms_review',
            'file' => 'review.inc',
            'access callback' => 'user_is_logged_in',
            'type' => MENU_CALLBACK,
        ),

        // CREATE PACKET
        'review/create' => array(
            'page callback' => 'pdq_ebms_review',
            'file' => 'review.inc',
            'access arguments' => array('manage citations'),
            'type' => MENU_CALLBACK,
        ),

        // AJAX CALLBACK FOR TOGGLING A PACKET'S STAR
        'packet-star' => array(
            'page callback' => 'pdq_ebms_packet_star',
            'file' => 'review.inc',
            'access arguments' => array('manage citations'),
            'type' => MENU_CALLBACK,
        ),

        // SUMMARIES
        'summaries' => array(
            'page callback' => 'pdq_ebms_summaries',
            'file' => 'summaries.inc',
            'access callback' => 'user_is_logged_in',
            'type' => MENU_CALLBACK,
        ),

        // FORUMS
        'forum' => array(
            'page callback' => 'pdq_ebms_forum',
            'file' => 'forum.inc',
            'access callback' => 'user_is_logged_in',
            'type' => MENU_CALLBACK,
        ),

        // GENERAL INFORMATION ABOUT EBMS
        'about/info' => array(
            'page callback' => 'pdq_ebms_about',
            'file' => 'about.inc',
            'access callback' => 'user_is_logged_in',
            'type' => MENU_CALLBACK,
        ),

        // Information on PDQ Boards
        'about#pdq-boards' => array(
            'page callback' => 'pdq_ebms_about',
            'file' => 'about.inc',
            'access callback' => 'user_is_logged_in',
            'type' => MENU_CALLBACK,
        ),

        // POSTING DOCUMENTS
        'docs' => array(
            'page callback' => 'pdq_ebms_docs',
            'file' => 'docs.inc',
            'access arguments' => array('administer'),
            'type' => MENU_CALLBACK,
        ),

        // REPORTS
        'reports' => array(
            'page callback' => 'pdq_ebms_reports',
            'file' => 'reports.inc',
            'access arguments' => array('administer'),
            'type' => MENU_CALLBACK,
        ),

        // PRINTING PACKETS
        'print-packets' => array(
            'page callback' => 'pdq_ebms_print_packets',
            'page_arguments' => array(2),
            'file' => 'print.inc',
            'access arguments' => array('administer'),
            'type' => MENU_CALLBACK,
        ),

        // DOWNLOAD MEETING DOCS
        'download-meeting-docs' => array(
            'page callback' => 'pdq_ebms_download_meeting_docs',
            'page_arguments' => array(1),
            'file' => 'calendar.inc',
            'access callback' => 'user_is_logged_in',
            'type' => MENU_CALLBACK,
        ),

        // AD-HOC GROUPS
        'groups' => array(
            'page callback' => 'pdq_ebms_groups',
            'file' => 'groups.inc',
            'access arguments' => array('administer'),
            'type' => MENU_CALLBACK,
        ),

        // LINK FROM HOME-PAGE EVENT NOTIFICATION TO EVENT (OCEEBMS-296)
        'event' => array(
            'page callback' => 'pdq_ebms_event_link',
            'page_arguments' => array(1),
            'access callback' => 'user_is_logged_in',
            'type' => MENU_CALLBACK,
        ),

        // LINK FROM HOME-PAGE LITERATURE NOTIFICATION TO PACKET PAGE
        // OCEEBMS-296
        'packet' => array(
            'page callback' => 'pdq_ebms_packet_link',
            'page_arguments' => array(1),
            'access callback' => 'user_is_logged_in',
            'type' => MENU_CALLBACK,
        ),

        // CUSTOM 403 PAGE
        'access-denied' => array(
            'title' => 'Access Denied',
            'page callback' => 'pdq_ebms_403',
            'access callback' => true,
            'type' => MENU_CALLBACK,
        ),

        // CUSTOM 404 PAGE
        'not-found' => array(
            'title' => 'Page Not Found',
            'page callback' => 'pdq_ebms_404',
            'access callback' => true,
            'type' => MENU_CALLBACK,
        ),

        // REFRESH JOURNAL TABLE
        'admin/refresh-journals' => array(
            'title' => 'Journal Table Refresh',
            'page callback' => 'pdq_ebms_refresh_journals',
            'access arguments' => array('administer'),
        ),

        // MANAGE CORE JOURNAL LIST
        'admin/core-journals' => array(
            'title' => 'Core Journals',
            'page callback' => 'pdq_ebms_core_journals',
            'access arguments' => array('administer'),
        ),

        // MANAGE EBMS TOPICS
        'admin/topics' => array(
            'title' => 'EBMS Topics',
            'page callback' => 'pdq_ebms_topics',
            'access arguments' => array('administer'),
            'file' => 'topics.inc',
        ),

        // MANAGE EBMS TOPIC GROUPS
        'admin/topic-groups' => array(
            'title' => 'EBMS Topic Groups',
            'page callback' => 'pdq_ebms_topic_groups',
            'access arguments' => array('administer'),
            'file' => 'topics.inc',
        ),

        // MANAGE EBMS SUBGROUPS
        'admin/subgroups' => array(
            'title' => 'EBMS Subgroups',
            'page callback' => 'pdq_ebms_subgroups',
            'access arguments' => array('administer'),
            'file' => 'subgroups.inc',
        ),

        // MANAGE EBMS BOARDS
        'admin/boards' => array(
            'title' => 'EBMS Boards',
            'page callback' => 'pdq_ebms_boards',
            'access arguments' => array('administer'),
            'file' => 'subgroups.inc',
        ),

        // MANAGE RELATED ARTICLE LINK TYPES
        'admin/article-link-types' => array(
            'title' => 'Article Link Types',
            'page callback' => 'pdq_ebms_article_link_types',
            'access arguments' => array('administer'),
            'file' => 'citations.inc',
        ),

        // TESTING FOR DAN
        'admin/ebms/enable' => array(
            'title' => 'EBMS Enable',
            'page callback' => 'ebms_enable_test',
            'file' => 'ebms.install',
            'access arguments' => array('administer modules'),
            //'menu_name' => 'main-menu',
            //'weight' => 20,
        ),

        // AJAX CALLBACK FOR THE NEW PASSWORD FORM.
        'account-email-status' => array(
            'page callback' => 'pdq_ebms_account_email_status',
            'access callback' => true,
            'type' => MENU_CALLBACK,
        ),

        // USED ONLY BY DEVELOPER.
        'upload-files' => array(
            'title' => 'Upload Files',
            'page callback' => 'pdq_ebms_upload_files',
            'access callback' => true,
            'type' => MENU_CALLBACK,
        ),

        // PLACEHOLDER DURING DEVELOPMENT
        'stub' => array(
            'title' => 'Place Holder',
            'page callback' => 'pdq_ebms_stub',
            'access callback' => true,
            'type' => MENU_CALLBACK,
        ),

        // TEMPLATE USED FOR PUTTING UP TEST FORMS
        'testform' => array(
            'title' => 'Test Form',
            'page callback' => 'pdq_ebms_testform',
            'access callback' => true,
            'type' => MENU_CALLBACK,
            'file' => 'testform.inc',
        ),

        // CLEAR THEME CACHE
        'clear-theme-cache' => array(
            'title' => 'Clear Theme Cache',
            'page callback' => 'pdq_ebms_clear_theme_cache',
            'access callback' => true,
            'type' => MENU_CALLBACK,
        ),

        // CLEAR ALL CACHES
        'clear-all-caches' => array(
            'title' => 'Clear Theme Cache',
            'page callback' => 'pdq_ebms_clear_all_caches',
            'access callback' => true,
            'type' => MENU_CALLBACK,
        ),

        // SUPPORT FOR QA TEAM'S AUTOMATED TESTING
        'get-article-id' => array(
            'page callback' => 'pdq_ebms_get_article_id_from_source_id',
            'access callback' => true,
            'type' => MENU_CALLBACK,
        ),

        // SUPPORT FOR REFRESHING PUBMED XML (OCEEBMS-87).
        'get-source-ids' => array(
            'page callback' => 'pdq_ebms_get_source_ids',
            'access callback' => true,
            'type' => MENU_CALLBACK,
        ),
        'update-source-mod' => array(
            'page callback' => 'pdq_ebms_update_source_mod',
            'access callback' => true,
            'type' => MENU_CALLBACK,
        ),
        'refresh-xml' => array(
            'page callback' => 'pdq_ebms_refresh_xml',
            'access callback' => true,
            'file' => 'import.inc',
            'type' => MENU_CALLBACK,
        ),

        // ACCOUNT INFORMATION
        'ebms-accounts' => array(
            'page callback' => 'pdq_ebms_account_info',
            'access callback' => true,
            'type' => MENU_CALLBACK,
        ),

        // LOG INFORMATION
        'log-tail' => array(
            'page callback' => 'pdq_ebms_log_tail',
            'access callback' => true,
            'type' => MENU_CALLBACK,
        ),

        // DUMP MESSAGE TYPES
        'dump-message-types' => array(
            'page callback' => 'pdq_ebms_dump_message_types',
            'access callback' => true,
            'type' => MENU_CALLBACK,
        ),

        // REFRESH XML FROM NLM (OCEEBMS-87).
        'admin/refresh-xml-from-nlm' => array(
            'title' => 'Refresh XML From NLM',
            'description' => 'Utility to update article XML from Pubmed.',
            'page callback' => 'pdq_ebms_refresh_xml',
            'access arguments' => array('administer ebms'),
            'file' => 'import.inc',
            'type' => MENU_CALLBACK,
        ),
        'admin/vars' => array(
            'title' => 'Drupal Variables',
            'page callback' => 'pdq_ebms_vars',
            'access arguments' => array('administer ebms'),
        ),
        'admin/df' => array(
            'title' => 'Disk Free',
            'page callback' => 'pdq_ebms_df',
            'access callback' => true,
        ),
        'admin/show-pubmed-results-files' => array(
            'title' => 'Show Pubmed Results Files',
            'page callback' => 'pdq_ebms_show_pubmed_results',
            'access callback' => true,
        ),
        'admin/clear-pubmed-results-files' => array(
            'title' => 'Clean Up Pubmed Results Files',
            'page callback' => 'pdq_ebms_clear_pubmed_results',
            'access callback' => true,
        ),
        'admin/truncate-debug-log' => array(
            'title' => 'Truncate Debug Log',
            'page callback' => 'pdq_ebms_truncate_debug_log',
            'access callback' => true,
        ),
    );
}

/**
 * Custom login instructions directing users to the NIH SSO or OpenID
 * authentication form.
 */
function pdq_ebms_login() {
//    pdq_ebms_debug('Invoking standard drupal login', '');
//    return drupal_get_form('user_login');

    // Attributes to present the NIH gateway link as if it were a button
    $options = array(
        'attributes' => array(
            'class' => array(
                'form-submit',
                'button',
            ),
        ),
    );

    // Link to NIH SSO gateway page
    $nih_login_link = l('Go to Login Page', 'ssologin', $options);

    // Body of the page
    $page = array(
        '#type' => 'container',
        '#attributes' => array('id' => 'login-wrapper'),
        'nih-login-link' => array(
            '#type' => 'markup',
            '#markup' => '<div id="ssopanel">' .
            $nih_login_link .
            '</div>
<div id="nci-login-instructions">
 <p>You need either a Google account or an NIH account to log into this system.</p>
 <p>Click GO TO LOGIN PAGE above to login to the system.  On the login page,
 select "HHS Login" if you have an NIH account or "Social Login/Open ID" if
 you have a Google account.</p>
 <p>If you need to log out of your currently active Google account in order
 to use the account associated with the EBMS, use
 <a href="https://mail.google.com/mail/logout?hl=en" target="_blank">this
 link</a>.
 <p>If you are a new user or have any problems logging in, please contact your
 PDQ Board manager.</p>
</div>',
        ),
    );
    return $page;
}

function ebms_form_alter(&$form, &$form_state, $form_id) {
    switch ($form_id) {
        case 'user_login':
            $url = 'https://iforgotmypassword.nih.gov/';
            $url = 'password';
            $id = 'forgot-password';
            unset($form['name']['#description']);
            unset($form['pass']['#description']);
            $form['actions']['submit']['#value'] = 'Login';
            $form['actions']['submit']['#prefix'] = '<div id="login-wrpr">';
            $form['actions']['submit']['#suffix'] = '</div>';
            break;
        case 'ebms_event_node_form':
            $form['actions']['submit']['#weight'] = 10;
            $form['actions']['preview']['#weight'] = 5;
            break;
    }
}
function pdq_ebms_home_redirect() {
    drupal_goto('home');
}
function ebms_menu_alter(&$items) {
    $items['user/%user']['page callback'] = 'pdq_ebms_home_redirect';
    $items['user/%user']['access callback'] = true;
}

/**
 * Custom login page.
 */
function pdq_ebms_login_form($form, &$form_state) {
    $url = 'password';
    $title = 'Forgot user name or password?';
    $id = 'forgot-password';
    $prompt = 'Can\'t access your account?';
    $pw_request = "<a href='$url' title='$title' id='$id'>$prompt</a>";
    return array(
        'name' => array(
            '#type' => 'textfield',
            '#title' => 'Username',
        ),
        'pass' => array(
            '#type' => 'password',
            '#title' => 'Password',
        ),
        'submit' => array(
            '#type' => 'submit',
            '#value' => 'LOGIN',
            '#suffix' => $pw_request,
            '#submit' => array('pdq_ebms_login_form_submit'),
        ),
        '#validate' => array('pdq_ebms_login_form_validate'),
    );
}

/**
 * Verify that the user credentials are present and valid.  Most of the
 * work done here is for thwarting hackers.
 */
function pdq_ebms_login_form_validate($form, &$form_state) {

    // Check for the simple stuff: empty user name and/or password field.
    $name = $form_state['values']['name'];
    $pass = $form_state['values']['pass'];
    $name_empty = empty($name);
    $pass_empty = empty($pass);
    if ($name_empty || $pass_empty) {
        if ($name_empty)
            form_set_error('name', 'Username field is required.');
        if ($pass_empty)
            form_set_error('pass', 'Password field is required.');
        return;
    }

    // Make sure the user hasn't been blocked.
    if (user_is_blocked($name)) {
        form_set_error('name', 'User account is blocked');
        return;
    }

    // Prevent flooding attacks from this IP address.
    $new_password_url = url('user/password');
    $new_password_text = 'request a new password';
    $new_password_link = "<a href='$new_password_url'>$new_password_text</a>";
    $try_later = "Please try again later or $new_password_link.";
    $attack_name = 'failed_login_attempt_ip';
    $limit = variable_get('user_failed_login_ip_limit', 50);
    $window = variable_get('user_failed_login_ip_window', 3600);
    if (!flood_is_allowed($attack_name, $limit, $window)) {
        $form_state['flood_control_triggered'] = 'ip';
        flood_register_event($attack_name, $window);
        $msg = 'Sorry, too many failed login attempts from this location.';
        form_set_error('name', "$msg $try_later.");
        return;
    }

    // Verify that this user name is valid.
    $pass = trim($pass);
    $uid = db_select('users', 'u')
        ->fields('u', array('uid'))
        ->condition('u.name', $name)
        ->execute()
        ->fetchField();
    $error = 'YOUR USERNAME AND/OR PASSWORD IS INCORRECT.<br />' .
        'Please try again (make sure your caps lock is off).';
    if (!$uid) {
        form_set_error('name', $error);
        watchdog('user', "Login attempt failed for $name.");
        return;
    }

    // Prevent flooding attacks for this account.
    if (variable_get('user_failed_login_identifier_uid_only', false))
        $identifier = $uid;
    else
        $identifier = $uid . '-' . ip_address();
    $form_state['flood_control_user_identifier'] = $identifier;
    $attack_name = 'failed_login_attempt_user';
    $limit = variable_get('user_failed_login_user_limit', 5);
    $window = variable_get('user_failed_login_user_window', 21600);
    if (!flood_is_allowed($attack_name, $limit, $window, $identifier)) {
        $form_state['flood_control_triggered'] = 'user';
        flood_register_event($attack_name, $window, $identifier);
        $msg = 'Sorry, too many failed login attempts for this account.';
        form_set_error('name', "$msg $try_later.");
        return;
    }

    // Validate password against the DB.
    $form_state['uid'] = user_authenticate($name, $pass);
    if (!$form_state['uid']) {
        form_set_error('name', $error);
        watchdog('user', "Login attempt failed for $name.");
        return;
    }

    // Clear flood control for this user.
    flood_clear_event($attack_name, $identifier);
}

/**
 * Record the login action and make sure the user is dropped on the home
 * page.  By the time we get here, the validation callback has already
 * taken care of actually logging the user in.
 */
function pdq_ebms_login_form_submit($form, &$form_state) {
    global $user;
    $user = user_load($form_state['uid']);
    $form_state['redirect'] = 'home';
    watchdog('user', "Session opened for {$user->name}.");

    $user->login = REQUEST_TIME;
    db_update('users')
        ->fields(array('login' => $user->login))
        ->condition('uid', $user->uid)
        ->execute();
    drupal_session_regenerate();
}

/**
 * Put up a page for requesting a new password.  This will only be
 * invoked by users without Javascript enabled.  Normally the form
 * will be displayed in a popup window hidden inside the login
 * page.
 */
function pdq_ebms_password() {
    return drupal_get_form('pdq_ebms_password_form');
}

/**
 * Ask the user what she has forgotten, and get her account's email address.
 */
function pdq_ebms_password_form() {
    return array(
        'forgot' => array(
            '#type' => 'radios',
            '#options' => array(
                'username' => 'Username &nbsp; &nbsp;',
                'password' => 'Password &nbsp; &nbsp;',
                'both' => 'Both'),
            '#title' => 'Forgot My',
        ),
        'email' => array(
            '#type' => 'textfield',
            '#suffix' => '<p>Please enter the email address associated with ' .
            'your EBMS account.</p>',
        ),
        'submit' => array(
            '#type' => 'submit',
            '#value' => 'Submit',
        ),
    );
}

/**
 * Make sure the required fields have been taken care of, and that
 * the email address matches that of a current user.  On successful
 * validation, the account information will be loaded in the 'account'
 * value of the $form_state hash.
 */
function pdq_ebms_password_form_validate($form, &$form_state) {
    $address = $form_state['values']['email'];
    $form_state['account'] = null;
    $errors = 0;
    if (empty($form_state['values']['forgot'])) {
        form_set_error('forgot',
            'You must indicate which elements have been forgotten.');
        $errors++;
    }
    if (empty($address)) {
        form_set_error('email', 'Email address is required.');
        $errors++;
    } else {
        $account = user_load_by_mail($address);
        if (empty($account)) {
            form_set_error('email',
                'That email address is registered with no accounts.');
            $errors++;
        }
    }
    if (!$errors)
        $form_state['account'] = $account;
}

/**
 * Mail the user the information she has forgotten, replacing the old
 * password with a new one if the password was one of the things
 * forgotten.
 */
function pdq_ebms_password_form_submit($form, &$form_state) {
    global $language;
    $account = $form_state['account'];
    $forgot = $form_state['values']['forgot'];
    $subject = 'EBMS Account Information';
    $to = Ebms\Util::format_email_address($account->mail, $account->name);
    if ($forgot == 'username' || $forgot == 'both')
        $message = array("Your EBMS login name is {$account->name}.\n");
    if ($forgot == 'password' || $forgot == 'both') {
        $new_pw = user_password();
        $message[] = "Your new password is $new_pw.\n";
        $message[] = 'Please log in and change your password at your ';
        $message[] = "earliest convenience.\n";
        $user_id = $account->uid;
        user_save($account, array('pass' => $new_pw));
        $now = date('Y-m-d H:i:s');
        db_update('ebms_user')
            ->fields(array('password_changed' => $now))
            ->condition('user_id', $user_id)
            ->execute();
    }
    $message[] = url('login', array('absolute' => true)) . "\n";
    $message = array(implode($message));
    $params = array('body' => $message, 'subject' => $subject);
    $key = 'newpw';
    drupal_mail('ebms', $key, $to, $language, $params, Ebms\FROM);
    drupal_set_message('Further instructions have been mailed to you.');
    drupal_goto('login');
}

/**
 * Ajax callback to verify for the Javascript code that the email address
 * specified represents a valid, active account.
 */
function pdq_ebms_account_email_status() {
    $address = $_GET['email'];
    $name = 'nobody';
    $status = 'missing';
    if (!empty($address)) {
        $account = user_load_by_mail($address);
        if (!empty($account)) {
            if ($account->status != 1)
                $status = "blocked";
            else {
                $name = $account->name;
                $status = 'valid';
            }
        }
    }
    drupal_json_output(array('name' => $name, 'status' => $status));
}

/**
 * Our module's implementation of hook_mail().
 */
function ebms_mail($key, &$message, $params) {
    $message['subject'] = $params['subject'];
    $message['body'] = $params['body'];
    if (isset($params['reply-to']))
        $message['headers']['Reply-to'] = $params['reply-to'];
    if (isset($params['boundary'])) {
        $boundary = $params['boundary'];
        $message['headers']['MIME-Version'] = '1.0';
        $message['headers']['Content-Type'] =
            "multipart/alternative; boundary=\"$boundary\"";
        $message['headers']['Content-Transfer-Encoding'] = '8Bit';
        $message['headers']['X-Mailer'] = 'Drupal Mailer';
    }
}

/**
 * Custom page for pages the user isn't allowed to see.
 */
function pdq_ebms_403() {
    global $user;
    if (!user_is_logged_in()) {
        drupal_set_title('Please Log In');
        return drupal_get_form('pdq_ebms_login_form');
    }
    return '<p>Sorry, you are not authorized to visit this page.</p>';
}

/**
 * Message we show when a request comes in for a page that doesn't exist.
 */
function pdq_ebms_404() {
    global $user;
    if (!user_is_logged_in()) {
        drupal_set_title('Please Log In');
        return drupal_get_form('pdq_ebms_login_form');
    }
    return '<p>You have requested a page which does not exist.</p>';
}

/**
 * Register our callback to perform custom theming of the
 * data structures used to build our main menu and submenus.
 *
 * Implements hook_theme().
 */
function ebms_theme() {
    return array(
        'ebms_menu_item_list' => array(
            'variables' => array(
                'items' => array(),
                'attributes' => array(),
            ),
        ),
        'pdq_ebms_profile_email_form' => array(
            'render element' => 'form',
        ),
        'stripped' => array(
            'variables' => array('page' => array()),
            'template' => 'stripped', // stripped.tpl.php in the module directory
        ),
    );
}

/**
 * Custom theming of the menu items.  Most of the work
 * is to enable the jQuery Superfish package to show
 * submenus dynamically.  This callback is registered
 * in ebms_theme() above.
 */
function theme_ebms_menu_item_list($variables) {
    $markup = array();
    $items = $variables['items'];
    if (!empty($items)) {
        if (!empty($variables['level']))
            $variables['attributes']['class'][] = 'ebms-submenu';
        $attributes = drupal_attributes($variables['attributes']);
        $num_items = count($items);
        $markup[] = "<ul$attributes>";
        foreach ($items as $i => $item) {
            $attributes = array();
            $children = array();
            $data = '';
            if (is_array($item)) {
                foreach ($item as $key => $value) {
                    switch ($key) {
                        case 'data':
                            $data = $value;
                            break;
                        case 'children':
                            $children = $value;
                            break;
                        default:
                            $attributes[$key] = $value;
                            break;
                    }
                }
            }
            else
                $data = $item;
            if (empty($variables['level'])) {
                $data = "<div class='firefox-bug-63895'>$data</div>";
                $data .= '<div class="ebms-menu-left-divider"></div>';
                $data .= '<div class="ebms-menu-right-divider"></div>';
            }
            if (count($children) > 0) {
                $data .= '<div class="ebms-menu-border-blur"></div>';
                //$data .= '<div class="ebms-menu-restore-pixel"></div>';
                $data .= theme_ebms_menu_item_list(
                    array(
                            'items' => $children,
                            'attributes' => $attributes,
                            'level' => 'child',
                    )
                );
            }
            if ($i == 0)
                $attributes['class'][] = 'first';
            if ($i == $num_items - 1)
                $attributes['class'][] = 'last';
            $attributes = drupal_attributes($attributes);
            $markup[] = "<li$attributes>$data</li>";
        }
        $markup[] = "</ul>";
    }
    $markup = implode($markup);
    return $markup;
}

/**
 * Populate the ebms_menu block.  See note above in the
 * comments for our implementation of hook_menu about
 * why we do this.
 */
function ebms_page_build(&$page) {
    $menus = Ebms\Menu::menus();
    $items = array();
    foreach ($menus as $m) $items[] = $m->render_array();
    $count_class = 'menu-items-' . count($items);
    $page['ebms_menu'] = array(
            '#attributes' => array(
                'class' => array('sf-menu', $count_class),
                'id' => 'ebms-menu',
            ),
            '#theme' => 'ebms_menu_item_list',
            '#items' => $items,
    );

    return;
}

/**
 * Load the libraries we'll need for advanced display
 * functionality, and populate the $user object with
 * information specific to the EBMS (i.e., board and
 * subgroup membership).
 *
 * Implementation of hook_init().
 */
function ebms_init() {

    // For now, back out E_STRICT reporting level introduced by PHP upgrade.
    // See https://tracker.nci.nih.gov/browse/OCEDRUPAL-420.
    error_reporting(error_reporting() & ~(E_STRICT | E_WARNING));

    if (isset($_SERVER['HTTP_USER_AGENT']) &&
        (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== false))
        drupal_add_http_header('X-UA-Compatible', 'IE=edge,chrome=1');
    $exploded = explode('/', $_GET['q']);
    if ($exploded) {
        $ok = array(
            'get-article-id',
            'get-source-ids',
            'update-source-mod',
            'refresh-xml',
            'ebms-accounts',
            'log-tail',
            'df',
            'clear-pubmed-results-files',
            'truncate-debug-log'
        );
        if (in_array($exploded[0], $ok)) {
            return;
        }
    }
    global $user;

    // Pages (urls) that are allowed if user is not yet logged in
    $allowed = array('login', 'user', 'password',
                     'account-email-status', 'ssologin');
    if (!user_is_logged_in() && !in_array($_GET['q'], $allowed)) {
        if (!function_exists('drush_main'))
            drupal_goto('login');
    }

    $sflib = libraries_get_path('superfish');
    drupal_add_js("$sflib/superfish.js");
    drupal_add_js("$sflib/supersubs.js");
    drupal_add_js(Ebms\JS_DIR . '/ebms.js');
    drupal_add_css("$sflib/css/superfish.css");

    // Going for the side effect of bringing the cycle table up to date.
    $default_cycle = Ebms\Util::get_default_cycle();

    // Add EBMS-specific information to the $user object.
    if ($user->uid)
        ebms_user_load(array($user->uid => $user));
}

/**
 * Add EBMS-specific information to the $user objects.  Implements
 * hook_user_load().  WARNING: The Drupal documentation doesn't say
 * this, but this hook isn't used when loading the global $user object.
 * It only happens when user_load($uid) is invoked directly!
 */
function ebms_user_load($users) {
    foreach ($users as $uid => $user) {
        $users[$uid]->password_changed = null;
        $boards = db_select('ebms_board_member', 'm')
            ->fields('m', array('board_id'))
            ->condition('m.user_id', $uid)
            ->execute()
            ->fetchCol();
        $users[$uid]->boards = $boards;

        $topics = db_select('ebms_topic', 't')
            ->fields('t', array('topic_id'))
            ->condition('t.nci_reviewer', $uid)
            ->condition('t.active_status', 'A')
            ->execute()
            ->fetchCol();
        //$topics = array();
        //foreach ($tresults as $result) $topics[] = $result->board_id;
        $users[$uid]->topics = $topics;

        // select all subgroups to which the member explicitly belongs
        $sgMemberQuery = db_select('ebms_subgroup_member', 'm')
            ->fields('m', array('sg_id'))
            ->condition('m.user_id', $uid);

        // also select all subgroups based on the user's boards -
        // this will allow the user to see all nodes that specify
        // a subgroup belonging to one of the user's boards without regard
        // to if the user actually belongs to those subgroups.
        // (this is a specific requirement)
        // 2013-04-10 (RMK): That was a misunderstanding of the
        // requirement (TIR 2385).  Board members should not see
        // subgroup content for subgroups of which they are not
        // members.
        $is_board_member = in_array('board member', $user->roles);
        if (!$is_board_member && !empty($boards))
        {
            $sgBoardQuery = db_select('ebms_subgroup', 's')
                ->condition('s.board_id', $boards, 'IN')
                ->fields('s', array('sg_id'));

            // union the queries and eliminate duplicates
            $sgMemberQuery->union($sgBoardQuery)
                ->distinct();
        }
        $users[$uid]->subgroups = $sgMemberQuery->execute()->fetchCol();

        $adhocgroups = db_select('ebms_ad_hoc_group_member', 'm')
            ->fields('m', array('group_id'))
            ->condition('m.user_id', $uid)
            ->execute()
            ->fetchCol();
        $users[$uid]->adhocgroups = $adhocgroups;
    }

    $results = db_select('ebms_user', 'u')
        ->fields('u', array('user_id', 'password_changed'))
        ->condition('u.user_id', array_keys($users), 'IN')
        ->execute();
    foreach ($results as $r)
        $users[$r->user_id]->password_changed = $r->password_changed;
}

/**
 * Added to restrict access to full text retrieval queue to Bonnie (see
 * bug report #2128).
 */
function pdq_ebms_is_admin_assistant() {
    global $user;
    return in_array('admin assistant', $user->roles);
}

/**
 * Syncs up the ebms_journal table with the latest information at the
 * National Library of Medicine.
 */
function pdq_ebms_refresh_journals() {
    $result = Ebms\Journal::refresh();
    $report = array();
    foreach ($result as $action => $count)
            $report[] = "$count journals $action";
    drupal_set_message('Refreshed: ' .
        variable_get('ebms_journals_refreshed'));
    return '<p>' . implode('; ', $report) . '</p>';
}

/**
 * List/set Drupal variables. Ignores complex values.
 */
function pdq_ebms_vars($action='', $name='') {
    $base_url = 'admin/vars';
    $skip = array('drupal_private_key', 'ldap_servers_encrypt_key');
    switch ($action) {
        case 'edit':
            if (in_array($name, $skip)) {
                drupal_set_message("$name not editable", 'error');
                break;
            }
            return drupal_get_form('pdq_ebms_vars_form', $name);
        case 'add':
            return drupal_get_form('pdq_ebms_vars_form');
    }
    $rows = array();
    $names = db_select('variable', 'v')->fields('v', array('name'))
        ->orderBy('v.name')
        ->execute()->fetchCol();
    foreach ($names as $name) {
        if (!in_array($name, $skip)) {
            $val = variable_get($name);
            if (!is_array($val)) {
                $url = "$base_url/edit/$name";
                $link = l($name, $url);
                $rows[] = array($link, $val);
            }
        }
    }
    $attrs = array('attributes' => array('class' => 'button'));
    $button = l('Add New Variable', "$base_url/add", $attrs);
    return array(
        'title' => array('#markup' => '<h2>Variables</h2>' . $button),
        'table' => array(
            '#theme' => 'table',
            '#rows' => $rows,
            '#header' => array('Name', 'Value'),
        ),
    );
}

function pdq_ebms_vars_form($form, &$form_state, $name='') {
    $val = '';
    if ($name) {
        $val = variable_get($name);
        if (is_array($val))
            $val = 'THE CURRENT VALUE OF THIS VARIABLE IS AN ARRAY. ' .
                'MODIFY WITH CAUTION!';
    }
    return array(
        'name' => array(
            '#type' => 'textfield',
            '#disabled' => !empty($name),
            '#default_value' => $name,
            '#required' => true,
        ),
        'value' => array(
            '#type' => 'textfield',
            '#default_value' => $val,
        ),
        'submit' => array(
            '#type' => 'submit',
            '#value' => 'Submit',
        ),
        'cancel' => array(
            '#type' => 'submit',
            '#value' => 'Cancel',
        ),
    );
}

function pdq_ebms_vars_form_submit($form, &$form_state) {
    $values = $form_state['values'];
    if ($form_state['values']['op'] == 'Submit') {
        $name = $values['name'];
        $value = $values['value'];
        $val = variable_get($name);
        if (is_int($val) || is_null($val) && ctype_digit($value))
                $value = (int)$value;
        variable_set($name, $value);
    }
    drupal_goto('admin/vars');
}

/**
 * Maintain list of core journals. Users said they didn't want this page,
 * but I've implemented it for myself, so I don't have to go to CBIIT
 * when they need the list adjusted.
 */
function pdq_ebms_core_journals($action='show', $jrnl_id='', $source='Pubmed') {
    //drupal_set_message("action=$action; jrnl_id=$jrnl_id; source=$source");
    $base_url = 'admin/core-journals';
    $brief_title = '';
    if (in_array($action, array('add', 'drop', 'delete'))) {
        if (!$jrnl_id || !$source) {
            drupal_set_message('Both source and source ID are required',
                               'error');
            drupal_goto($base_url);
        }
        else {
            $results = db_select('ebms_journal', 'j')
                ->fields('j', array('brf_jrnl_title'))
                ->condition('j.source', $source)
                ->condition('j.source_jrnl_id', $jrnl_id)
                ->execute();
            $brief_title = '';
            foreach ($results as $result)
                $brief_title = $result->brf_jrnl_title;
            if (!$brief_title) {
                drupal_set_message("Can't find journal $source $jrnl_id", 'error');
                drupal_goto($base_url);
            }
        }
    }
    if ($action == 'add') {
        try {
            db_insert('ebms_core_journal')
                ->fields(
                    array(
                        'source'=>$source,
                        'source_jrnl_id' => $jrnl_id,
                    )
                )
                ->execute();
            drupal_set_message("Added $brief_title to core set");
        }
        catch (\Exception $e) {
            $message = "$e";
            watchdog('EBMS - core journals', $message);
            $expected = 'Integrity constraint violation';
            if (strpos($message, $expected) !== false)
                $message = "$source journal $jrnl_id ($brief_title) already in core set";
            else
                $message = 'Unexepected failure - consult logs';
            drupal_set_message($message, 'error');
        }
        drupal_goto($base_url);
    }
    if (in_array($action, array('drop', 'delete'))) {
        $result = db_delete('ebms_core_journal')
            ->condition('source', $source)
            ->condition('source_jrnl_id', $jrnl_id)
            ->execute();
        if ($result == 1)
            drupal_set_message("Dropped $brief_title from core set");
        else
            drupal_set_message("$source journal $jrnl_id ($brief_title) wasn't in the core set", 'error');
        drupal_goto($base_url);
    }
    $query = db_select('ebms_journal', 'j')->fields('j');
    $query->join('ebms_core_journal', 'c',
                 'c.source = j.source AND ' .
                 'c.source_jrnl_id = j.source_jrnl_id');
    $query->orderBy('j.brf_jrnl_title');
    $query->orderBy('j.jrnl_title');
    $results = $query->execute()->fetchAll();
    $headers = array('Brief Title', 'Title', 'Source', 'ID', 'Actions');
    $rows = array();
    foreach ($results as $result) {
        $url = "$base_url/drop/$result->source_jrnl_id/$result->source";
        $rows[] = array(
            $result->brf_jrnl_title,
            $result->jrnl_title,
            $result->source,
            $result->source_jrnl_id,
            l('Drop', $url),
        );
    }
    return array(
        'title' => array('#markup' => '<h2>Core Journals</h2>'),
        'table' => array(
            '#theme' => 'table',
            '#rows' => $rows,
            '#header' => $headers,
        ),
    );
}

/**
 * Write debugging information to a file in the /tmp directory.  Only
 * does anything on the development and QA system.  Each log entry is
 * date/time stamped.
 *
 *  @param  string  $where  Label used at the top of the debug log
 *                          entry
 *  @param  any     $what   Arbitrary value, possibly an object or
 *                          structured array, to be dumped as part
 *                          of the log entry in human-readable format
 *  @param  string  $fname  Optional name of output file.  Enables different
 *                          users to separate out their own debug data when
 *                          desired.
 */
function pdq_ebms_debug($where, $what, $fname='/tmp/ebms.debug') {
    if (Ebms\DEV || Ebms\QA) {
        $now = date('c');
        file_put_contents($fname,
                "$now $where\n" . print_r($what, TRUE) . "\n", FILE_APPEND);
        drupal_chmod($fname, 0664);
    }
}

function ebms_node_info() {
    global $ebms_event_nodes;

    $nodes = array();

    $nodes += $ebms_event_nodes;

    return $nodes;
}

/**
 * Implements hook_views_api().
 */
function ebms_views_api() {
    return array('api' => '3.0');
}

/**
 * Implementation of the Views query alter hook.
 *
 * @param type $view  The view object about to be processed.
 * @param type $query An object describing the query.
 */
function ebms_views_query_alter(&$view, &$query) {
    switch ($view->name) {
        case 'event_calendar':
        case 'recent_activity': //Using the same function - same functionality
            require_once 'calendar.inc';
            _calendar_query_alter($view, $query);
            break;
    }

    return;
}

function ebms_form_node_form_alter(&$form, &$form_state, $form_id) {
    if ($form_id == 'ebms_event_node_form') {
        require_once 'calendar.inc';
        calendar_node_form_alter($form, $form_state);
        return;
    }

    // add 'cancel' button that redirects back to the originating node
    if (isset($form['#node']->nid)) {
        $nid = $form['#node']->nid;
        $options = array(
            'attributes' => array(
                'class' => array(
                    'form-submit',
                    'button',
                ),
            ),
        );

        $url = l('Cancel', "node/$nid", $options);
        $form['actions']['cancel'] = array(
            '#markup' => $url,
            '#weight' => 30,
        );
    }

    return;
}

/**
 * Allowed values callback function for the EBMS Board Field.
 *
 * @param type $field The field this is controlling.
 */
function ebms_board_allowed_values_callback($field) {
    // This leverages the existing dictionary of Boards as return by the Util static function.
    $boards = Ebms\Util::boards();
    return $boards;
}

/**
 * Allowed values callback function for the EBMS Subgroup Field.
 *
 * @param type $field The field this is controlling.
 */
function ebms_subgroup_allowed_values_callback($field) {
    $results = db_select('ebms_subgroup', 'sg')
        ->fields('sg', array('sg_id', 'sg_name'))
        ->orderBy('sg.sg_name')
        ->execute();
    $subgroups = array();
    foreach ($results as $result) $subgroups[$result->sg_id] = $result->sg_name;
    return $subgroups;
}

/**
 * Allowed values callback function for the EBMS Ad-Hoc Group Field.
 *
 * @param type $field The field this is controlling.
 */
function ebms_ad_hoc_group_allowed_values_callback($field) {
    $results = db_select('ebms_ad_hoc_group', 'g')
        ->fields('g', array('group_id', 'group_name'))
        ->orderBy('g.group_name')
        ->execute();
    $groups = array();
    foreach ($results as $result)
            $groups[$result->group_id] = $result->group_name;
    return $groups;
}

/**
 * Allowed values callback function for the EBMS Individuals Field.
 *
 * @param type $field The field this is controlling.
 */
function ebms_individuals_allowed_values_callback($field) {

    // collect all non-anonymous users
    // TODO: prevent other roles from appearing as well?
    $roles = array();
    $roles[] = user_role_load_by_name('anonymous user')->rid;
    $roles[] = user_role_load_by_name('administrator')->rid;
    $roleResult = db_select('users_roles', 'ur')
            ->fields('ur', array('uid'))
            ->condition('rid', $roles, 'NOT IN')
            ->execute()->fetchCol();

    // use the UIDs to limit the query
    $query = new EntityFieldQuery();
    $uidResult = $query->entityCondition('entity_type', 'user')
        ->propertyCondition('status', '1')
        ->propertyCondition('uid', $roleResult)
        ->execute();

    if (isset($uidResult['user'])) {
        $users = user_load_multiple(array_keys($uidResult['user']));

        $userOptions = array();
        foreach ($users as $key => $user) {
            $userOptions[$key] = $user->name;
        }
        natcasesort($userOptions);
        return $userOptions;
    }

    return array();
}

/**
 * Implementation of hook_node_insert. Add notification messages for new
 * events. See OCEEBMS-296. Add the notifications for new events here
 * instead of in the node_presave hook, because we need the node ID, and
 * the presave hook doesn't have it (because it doesn't exist when that
 * hook is invoked).
 */
function ebms_node_insert($node) {

    if ($node->type == 'ebms_event' && $node->status) {

        // This gets passed to the methods which create the notification
        // messages.
        $nodeWrapper = entity_metadata_wrapper('node', $node);

        // if the node is published, notify the user.
        $event_status = $nodeWrapper->field_event_status->value();
        if ($event_status == 'scheduled')
            \Ebms\Util::activityEventPublished($nodeWrapper);

        // if the agenda is published, add a notification for that, too.
        if ($nodeWrapper->field_agenda_status->value() == 1)
            \Ebms\Util::activityAgendaPublished($nodeWrapper);
    }

    return;
}

/**
 * Implementation of hook_node_presave.  Triggers appropriate recent activity
 * messages based on changes to event nodes.
 *
 * OCEEBMS-296: add event_id so we can link from the notification to
 * the page for the event. Leave the work for the node_insert hook for
 * new events, because we won't have the node ID until then.
 *
 * @param node $node the node about to be saved
 */
function ebms_node_presave($node) {

    // if a published ebms_event (don't generate any activity from unpublished
    // nodes)
    if ($node->type == 'ebms_event' && $node->status && !$node->is_new) {

        $nodeWrapper = entity_metadata_wrapper('node', $node);
        $originalWrapper = FALSE;

        // retrieve the event status
        $event_status = $nodeWrapper->field_event_status->value();

        $original_status = null;
        $original_agenda_status = null;
        $original_event_type = null;
        if (isset($node->original)) {
            $originalWrapper = entity_metadata_wrapper('node', $node->original);
            $original_status = $originalWrapper->field_event_status->value();
            $original_agenda_status = $originalWrapper->field_agenda_status->value();
            $original_event_type = $originalWrapper->field_event_type->value();
        }

        // if the node is published and was previously unpublished
        if ($event_status == 'scheduled' && $original_status == 'cancelled') {
            // note the publish activity
            \Ebms\Util::activityEventPublished($nodeWrapper);
        }

        // vice versa, if the node was previously published
        else if ($event_status == 'cancelled' && $original_status == 'scheduled') {
            // note the unpublish activity
            \Ebms\Util::activityEventCancelled($nodeWrapper);
        }

        // if the event's time has changed
        if ($event_status == 'scheduled' && $original_status == 'scheduled') {
            // compare the two dates
            $origDate = field_get_items('node', $node->original,
                'field_datespan');
            $currentDate = field_get_items('node', $node, 'field_datespan');

            $diff = array_diff($origDate[0], $currentDate[0]);

            if (!empty($diff))
                \Ebms\Util::activityEventChanged($nodeWrapper);
        }

        // if the agenda is published and was not previously published
        $curr_agenda_status = $nodeWrapper->field_agenda_status->value();
        if ($curr_agenda_status == 1 && $original_agenda_status == 0) {
            // note the agenda publish activity
            \Ebms\Util::activityAgendaPublished($nodeWrapper);
        }

        // if the previous type exists and the current and past event types
        // don't match
        $curr_event_type = $nodeWrapper->field_event_type->value();
        if ($original_event_type && $curr_event_type != $original_event_type) {
            // note the type changed activity
            \Ebms\Util::activityEventType($nodeWrapper);

        }
    }

    return;
}

function ebms_date_formats() {
    return array(
            array(
                    'format' => 'F j, Y',
                    'type' => 'ebms_date',
                    'locales' => array(),
            ),
            array(
                    'format' => 'g:i A',
                    'type' => 'ebms_time',
                    'locale' => array(),
            )
    );
}

function ebms_date_format_types() {
    $format_type = array();
    $format_type['ebms_date'] = t('Date Only');
    $format_type['ebms_time'] = t('Time Only');

    return $format_type;
}

function ebms_query_event_filter_alter(SelectQuery $query) {
    global $user;
    $account = user_load($user->uid);

    //If the user is UID 1 or an EBMS administrator, there is no filtering of
    //events
    if (user_access("administer ebms")) {
        return;
    }

    //Initialize an OR conditional for selects
    $or_conditions = db_or();

    //Boards:
    if ($account->boards) {
        //Add table to query
        $query->leftJoin('field_data_field_boards', 'b',
            'node.nid = b.entity_id AND b.bundle = :event AND b.deleted = 0',
            array(':event' => "ebms_event"));

        //Add where condition
        $or_conditions->condition('b.field_boards_value', $account->boards,
            'IN');
    }

    //Subgroups:
    if ($account->subgroups) {
        //Add table to query
        $query->leftJoin('field_data_field_subgroups', 's',
            'node.nid = s.entity_id AND s.bundle = :event AND s.deleted = 0',
            array(':event' => "ebms_event"));

        //Add where condition
        $or_conditions->condition('s.field_subgroups_value',
            $account->subgroups, 'IN');
    }
    //Ad hoc groups:
    if ($account->adhocgroups) {
        //Add table to query
        $query->leftJoin('field_data_field_ad_hoc_groups', 'g',
            'node.nid = g.entity_id AND g.bundle = :event AND g.deleted = 0',
            array(':event' => "ebms_event"));

        //Add where condition
        $or_conditions->condition('g.field_ad_hoc_groups_value',
            $account->adhocgroups, 'IN');
    }

    //Individual Users:
    //Add table to query
    $query->leftJoin('field_data_field_individuals', 'i',
        'node.nid = i.entity_id AND i.bundle = :event AND i.deleted = 0',
        array(':event' => "ebms_event"));

    //Add where condition
    $or_conditions->condition('i.field_individuals_value', array($user->uid),
        'IN'); //Note the use of array here.  IN must have an array

    $query->condition($or_conditions);

    return;
}

 function ebms_calendar_event_validate($form, &$form_state) {
    // retrieve value of each timestamp
    $startValue = $form_state['values']['field_datespan']['und']['0']['value'];
    $endValue = $form_state['values']['field_datespan']['und']['0']['value2'];

    $startSplit = explode(' ', $startValue);
    $endSplit = explode(' ', $endValue);

    if (sizeof($startSplit) > 1)
        $startDate = $startSplit[0];
    else $startDate = date('Ymd', $startValue);
    if (sizeof($endSplit) > 1)
        $endDate = $endSplit[0];
    else $endDate = date('Ymd', $endValue);

    if ($startDate != $endDate)
        form_set_error('field_datespan',
            'Please ensure that the event is scheduled for a single day only.');

    return;
}

function ebms_redirect_handler($form, &$form_state) {
    // if the user won't be able to view the node after saving...
    $node = $form_state['node'];
    global $user;
    if (!user_access('bypass content access control') &&
        $node->status == 0 && $node->uid != $user->uid) {
        if ($node->type == 'ebms_event') {
            $form_state['redirect'] = 'calendar';
        } else {
            $form_state['redirect'] = '/';
        }
    }

    return;
}

function ebms_date_combo_process_alter(&$element, &$form_state, $context){
    $element['value']['#title'] = 'from:';
}

/**
 * Declare the path types handled by the module.
 *
 * @return
 *   An array of the types handled by the module.
 *   Each value is either a type name or a sub-array with the following
 *   attributes:
 *    - 'type'
 *         The type name. Required.
 *    - 'file'
 *         A file that will be included before other hooks are invoked.
 *         The file should be relative to the implementing module's directory.
 */
function ebms_ckeditor_link_types() {
  return array(
        'ebms_file',
  );
}

/**
 * Implementation of hook_ckeditor_<link-type>_autocomplete().
 */
function ebms_ckeditor_link_ebms_file_autocomplete($string) {
    $links = array();

    $ascii_string = Ebms\Util::indexify($string, true);
    $articleQuery = db_select('ebms_article', 'a')
        ->condition('a.active_status', 'A')
        ->condition('a.article_title', "%$ascii_string%", 'LIKE')
        ->isNotNull('a.full_text_id')
        ->fields('a', array('full_text_id', 'article_title'))
        ->orderBy('a.article_title')
        ->orderBy('a.published_date', 'DESC');

    $articles = $articleQuery->execute()
        ->fetchAllKeyed();

    foreach ($articles as $fileId => $desc) {
        $file = file_load($fileId);
        $files_dir = file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath();
        $fileUri = "$files_dir/$file->filename";
        $links[$fileUri] = $desc;
    }

    $documents = db_select('ebms_doc', 'd')
        ->condition('d.drop_flag', 0)
        ->condition('d.description', "%$string%", 'LIKE')
        ->fields('d', array('file_id', 'description'))
        ->execute()
        ->fetchAllKeyed();

    foreach($documents as $fileId => $desc){
        $file = file_load($fileId);
        $files_dir = file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath();
        $fileUri = "$files_dir/$file->filename";
        $links[$fileUri] = $desc;
    }
    asort($links);

    return $links;
}

/**
 * Alter types.
 *
 * @param $types
 *   The types returned by hook_ckeditor_link_types(). The types are keyed by
 *   'MODULE.TYPE' for easy lookup.
 *
 * @see hook_ckeditor_link_types()
 */
function ebms_ckeditor_link_types_alter(&$types) {
    // override all other types
    $types = array('ebms_ebms_file' => array(
        'type' => 'ebms_file',
        'module' => 'ebms',
    ));

    return;
}

/**
 * Modify available WYSIWYG buttons.
 *
 * TIR #2416 / JIRA::OCEEBMS-11
 *
 * @see hook_wysiwyg_editor_settings_alter
 */
function ebms_wysiwyg_editor_settings_alter(&$settings, $context) {
    if ($context['profile']->editor == 'ckeditor') {
        $settings['height'] = 300;
        $settings['customConfig'] = base_path() .
            drupal_get_path('module', 'ebms') . '/js/ckeditor.config.js';
        return;
        $settings['toolbar'] = array(
            array('Bold', 'Italic', 'Underline', 'Superscript', 'Subscript'),
            array('JustifyLeft', 'JustifyCenter', 'JustifyRight'),
            array('BulletedList', 'NumberedList'),
            array('Outdent', 'Indent'),
            array('Undo', 'Redo'),
            array('Link', 'Unlink'),
            array('Image'),
            array('Blockquote'),
            array('Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord'),
            array('ShowBlocks', 'RemoveFormat'),
            array('SelectAll'),
            array('SpellChecker', 'Scayt'),
            array('linkit'),
        );
    }

    return;
}

/**
 * Convert a string time to UTC/GMT in iCalendar format in order to
 * workaround what appears to be failure of Microsoft Outlook to accept
 * a standard iCal datetime that already incorporates daylight savings.
 *
 *  @param string $strTime     Datetime string, e.g., "20130515T133000"
 *                              for 1:30 pm, May 15, 2013.
 *                              Any datetime string recognized by PHP's
 *                              strtotime() is acceptable.
 *                              If "now", use the current datetime.
 *  @param string $timezone    Timezone string, e.g., "America/Chicago",
 *                              default = timezone where NCI offices in
 *                              Maryland.
 *
 *  @return                    Same string, set to Greenwich Mean Time, in
 *                              iCal format e.g., "20130515T173000Z" for
 *                              above example datetime.
 *
 *  @throws Exception          If the input $strTime is not a recognized
 *                              datetime format.
 */
function getUTC($strTime="now", $timeZone="America/New_York") {

    // Set timezone for conversion UNIX time.
    date_default_timezone_set($timeZone);
    $unixTime = strtotime($strTime);

    // Check - this should never fail.  If it does we have a bug
    if (!$unixTime) {
        throw new \Exception(
              "Cannot recognize \"$strTime\" as a standard datetime format." .
              "  Please inform programming support staff.");
    }

    // Back to iCal, but using Greenwich Mean Time (UTC)
    date_default_timezone_set("UTC");
    $utc = date("Ymd\THis\Z", $unixTime);

    return $utc;
}

function pdq_ebms_account_info() {
    drupal_add_http_header('Content-type', 'text/plain');
    $results = db_select('users', 'u')
        ->fields('u', array('uid', 'name', 'created', 'login', 'status'))
        ->execute();
    $accounts = array();
    foreach ($results as $result)
        $accounts[] = $result;
    print drupal_json_encode($accounts);
    exit(0);
}

function pdq_ebms_get_article_id_from_source_id($source=null, $source_id=0) {
    drupal_add_http_header('Content-type', 'text/plain');
    $article_id = db_select('ebms_article', 'a')
        ->fields('a', array('article_id'))
        ->condition('a.source', $source)
        ->condition('a.source_id', $source_id)
        ->execute()
        ->fetchField();
    print $article_id;
    exit(0);
}

function pdq_ebms_update_source_mod() {
    $source = $_POST['source'];
    $date = $_POST['date'];
    $ids = explode("\t", $_POST['ids']);
    $updated = db_update('ebms_article')
        ->fields(array('data_mod' => $date))
        ->condition('source', $source)
        ->condition('source_id', $ids, 'IN')
        ->execute();
    drupal_add_http_header('Content-type', 'text/plain');
    print "Updated data_mod column in $updated rows for $date\n";
    exit(0);
}
function pdq_ebms_get_source_ids($source) {
    drupal_add_http_header('Content-type', 'text/plain');
    $results = db_select('ebms_article', 'a')
        ->fields('a', array('source_id', 'import_date', 'update_date',
                'data_mod', 'data_checked'))
        ->condition('a.source', $source)
        ->execute();
    foreach ($results as $result) {
        $source_id = trim(preg_replace('/\s+/', ' ', $result->source_id));
        if (!$source_id)
            continue;
        $latest = $result->import_date;
        if ($result->update_date && $result->update_date > $latest)
            $latest = $result->update_date;
        if ($result->data_checked && $result->data_checked > $latest)
            $latest = $result->data_checked;
        $latest = substr($latest, 0, 10);
        $mod = $result->data_mod;
        echo "$source_id\t$latest\t$mod\n";
    }
    exit(0);
}
function pdq_ebms_log_tail() {
    if (!user_access('access site reports'))
        drupal_goto('home');
    try {
        $p = $_GET['p']; // path
        $s = $_GET['s']; // start
        $c = $_GET['c']; // count
        $r = $_GET['r']; // raw (binary)?
        if (!$p)
            $p = '/tmp/ebms.debug';
        if (preg_match('/[*?]/', $p)) {
            drupal_add_http_header('Content-type', 'text/plain');
            foreach (glob($p) as $n) {
                $size = filesize($n);
                $time = date('Y-m-d H:i:s', filemtime($n));
                printf("%s %10d %s\n", $time, $size, $n);
            }
            exit(0);
        }
        $stat = stat($p);
        if (!$stat) {
            drupal_add_http_header('Content-type', 'text/plain');
            echo "$p not found\n";
            exit(0);
        }
        $size = $stat['size'];
        $time = date('Y-m-d Y:i:s', $stat['mtime']);
        if (!strcmp($c, 'all'))
            $c = $size;
        $count = is_numeric($c) ? intval($c) : 100000;
        $start = is_numeric($s) ? intval($s) : 0;
        if ($c < 0)
            $c = 0;
        if (!$start && strcmp('0', $s)) {
            if (!$count)
                $count = 200000;
            if ($count > $size)
                $count = $size;
            else
                $start = $size - $count;
        }
        else {
            if ($start < 0)
                $start = abs($start) > $size ? 0 : $size + $start;
            elseif ($start > $size)
                $start = $size;
            $available = $size - $start;
            if ($count > $available)
                $count = $available;
        }
        if ($count) {
            $fp = fopen($p, 'rb');
            if ($start)
                fseek($fp, $start);
            $bytes = fread($fp, $count);
            if (!$r) {
                $first = $start + 1;
                $last = $start + $count;
                drupal_add_http_header('Content-type', 'text/plain');
                print "$p $size bytes ($time) $first-$last\n";
                $ascii = preg_replace_callback(
                    '/[\x80-\xff%]/',
                    function ($m) {
                        return sprintf('%%%02X', ord($m[0]));
                    },
                    $bytes);
                print $bytes;
            }
            else {
                $name = basename($p);
                drupal_add_http_header('Content-type',
                    'application/octet-stream');
                drupal_add_http_header('Content-disposition',
                    "attachment;filename=$name");
                print $bytes;
            }
        }
        else {
            drupal_add_http_header('Content-type', 'text/plain');
            echo "No bytes for $p\n";
        }
        exit(0);
    }
    catch (Exception $e) {
        drupal_add_http_header('Content-type', 'text/plain');
        echo "log-tail failure: $e\n";
        exit(0);
    }
}

function ebms_date_popup_process_alter(&$element) {
    if (strpos($element['#name'], 'field_datespan') === 0) {
        $element['#datepicker_options'] = array(
            'changeYear' => false,
            'changeMonth' => false,
        );
    }
    else
        $element['#element_validate'] = array('pdq_ebms_date_validate');

    return;
}

/**
 * We have a more lenient approach to date validation than is used
 * by the stock Drupal date field.  Our requirements ask us to accept
 * partially-specified dates, provide no less granular components are
 * omitted when more granular components are specified.  For example,
 * it is not permitted to specify a month and day, but fail to
 * specify the year, whereas it is OK to give the year without
 * specifying the month or day.
 */
function pdq_ebms_date_validate($element, &$form_state, $form) {
    if (count($element['#value']) == 3) {
        $y = $element['#value']['year'];
        $m = $element['#value']['month'];
        $d = $element['#value']['day'];
    }
    else {
        $y = $m = $d = 0;
        $pieces = explode('-', $element['#value']['date']);
        if (!empty($pieces[0]))
            $y = $pieces[0];
        if (!empty($pieces[1]))
            $m = $pieces[1];
        if (!empty($pieces[2]))
            $d = $pieces[2];
    }
    if ($d) {
        if (!$y || !$m)
            form_error($element, 'Day cannot be specified without full date');
        elseif (!checkdate($m, $d, $y))
            form_error($element, 'The specified date is invalid');
    }
    elseif ($m && !$y)
        form_error($element, 'Month cannot be specified without year');

    return;
}

/*
 * Implementation of hook_default_message_type().
 */
function ebms_default_message_type() {
    require 'includes/ebms.message_types.inc';
    $types = array();
    foreach ($pdq_ebms_recent_activity_message_types as $name => $export) {
        $types[$name] = entity_import('message_type', $export);
    }
    return $types;
}

/*
 * Show pubmed-results files.
 */
function pdq_ebms_show_pubmed_results($id=0) {
    if ($id) {
        drupal_add_http_header('Content-type', 'text/plain');
        $results = db_select('ebms_pubmed_results', 'r')
            ->fields('r', array('results_file'))
            ->condition('results_id', $id)
            ->execute()
            ->fetchField();
        echo $results;
        exit(0);
    }
    $results = db_query('
SELECT results_id, when_submitted, LENGTH(results_file) AS len
  FROM ebms_pubmed_results
 ORDER BY when_submitted DESC')->fetchAll();
    $items = array();
    foreach ($results as $r) {
        $label = $r->when_submitted . ' (' . $r->len . ' bytes)';
        $link = l($label, 'admin/show-pubmed-results-files/' . $r->results_id);
        $items[] = $link;
    }
    if (empty($items))
        return '<p>Table empty.</p>';
    return array(
        '#items' => $items,
        '#theme' => 'item_list',
    );
}

/*
 * Clean up older pubmed-results files from /tmp.
 * OCEEBMS-313.
 */
function pdq_ebms_clear_pubmed_results($cutoff='') {
    drupal_add_http_header('Content-type', 'text/plain');
    if (!$cutoff) {
        $now = new DateTime();
        $then = $now->sub(new DateInterval('P1M'));
        $cutoff = $then->format('Y-m-d');
    }
    $pattern = '/^2\d\d\d(-\d\d(-\d\d( \d\d:\d\d(:\d\d)?)?)?)?$/';
    if (!preg_match($pattern, $cutoff)) {
        echo "invalid cutoff $cutoff ";
        echo "(expected YYYY[-MM[-DD [HH:MM[:SS]]]])\n";
    }
    else {
        echo "using cutoff $cutoff\n";
        $result = db_delete('ebms_pubmed_results')
            ->condition('when_submitted', $cutoff, '<')
            ->execute();
        echo "dropped $result rows\n";
    }
    exit(0);
}

/*
 * Truncate the debug log.
 * OCEEBMS-313.
 */
function pdq_ebms_truncate_debug_log($maxsize=10*1024.0*1024.0) {
    drupal_add_http_header('Content-type', 'text/plain');
    $size = filesize('/tmp/ebms.debug');
    if ($size > $maxsize * 1.0) {
        $fh = fopen('/tmp/ebms.debug', 'r+');
        if (!$fh) {
            echo "unable to open /tmp/ebms.debug for writing\n";
            print_r(error_get_last());
        }
        else {
            fseek($fh, -$maxsize, SEEK_END);
            $drop = fgets($fh);
            $offset = ftell($fh);
            $chunk_size = 1024 * 1024;
            for ($n = 0; $n < $maxsize; $n += $chunk_size) {
                fseek($fh, $n + $offset);
                $chunk = fread($fh, $chunk_size);
                fseek($fh, $n);
                fwrite($fh, $chunk);
            }
            $new_size = $maxsize - strlen($drop);
            rewind($fh);
            $ok = ftruncate($fh, $new_size);
            fclose($fh);
            if ($ok)
                echo "/tmp/ebms.debug truncated to $new_size bytes\n";
            else {
                $error = error_get_last();
                echo "unable to truncate /tmp/ebms.debug\n";
                print_r($error);
            }
        }
    }
    else
        echo "$size is already less than max of $maxsize\n";
    exit(0);
}

/*
 * Show how much disk space is free in the two file systems we use.
 * OCEEBMS-313.
 */
function pdq_ebms_df() {
    drupal_add_http_header('Content-type', 'text/plain');
    $paths = array('/tmp', '/local');
    foreach ($paths as $path) {
        $bytes = disk_free_space($path);
        $gb = round($bytes / (1024.0 * 1024.0 * 1024.0), 2);
        echo "$path: $bytes ($gb GB)\n";
    }
    exit(0);
}

/*
 * Show what the file includes/ebms.message_types.inc looks like.
 */
function pdq_ebms_dump_message_types() {
    $output = array(
        '<?php',
        '',
        '// Use https://ebms.nci.nih.gov/dump-message-types to generate ' .
        'current definitions.',
        '$pdq_ebms_recent_activity_message_types = array('
    );
    $definitions = array();
    require 'includes/ebms.message_types.inc';
    foreach ($pdq_ebms_recent_activity_message_types as $name => $export) {
        $message_type = message_type_load($name);
        $export = entity_export('message_type', $message_type, '  ');
        $definitions[] = "  '$name' => '$export'";
    }
    $output[] = implode(",\n", $definitions);
    $output[] = ");\n";
    $output = implode("\n", $output);
    drupal_add_http_header('Content-type', 'text/plain');
    echo $output;
    exit(0);
}

/**
 * This is an awkward solution to the problem posed by OCEEBMS-296.
 * We've been asked to modify the event notifications on the home page
 * to link to the events to which the notifications refer, but the
 * notification messages are frozen at the time the event was created
 * (or modified), so for a while we'll have messages which don't have an
 * an event ID. The display of the notification is controlled in a very
 * roundabout way by the messages module, using placeholders for the
 * message fields. For the old notifications, that module will be
 * displaying links which have /event/ as the href, without any event ID.
 * If we had used /node/[message:event_id] in the display string for the
 * event messages, the old notifications would have linked to the most
 * recent content node on the site (as far as I can tell), which would
 * have been not so helpful. Hence this kludge.
 */
function pdq_ebms_event_link($event_id=null) {
    if ($event_id && is_numeric($event_id))
        drupal_goto("node/$event_id");
    else
        drupal_goto("calendar");
}

/**
 * Route a link from a "Literature Activity" home page notification to
 * the appropriate packet page. We can't know when the notification is
 * created where the packet's page is going to be when the notification
 * is displayed, because that changes over time based on the state of
 * the packet. So we have to figure it out on the fly.
 * See https://tracker.nci.nih.gov/browse/OCEEBMS-296.
 */
function pdq_ebms_packet_link($packet_id=null) {
    global $user;
    if ($packet_id && is_numeric($packet_id)) {
        require_once 'review.inc';
        $query = db_select('ebms_packet_reviewer', 'r')
            ->condition('r.packet_id', $packet_id)
            ->condition('r.reviewer_id', $user->uid);
        $count = $query->countQuery()->execute()->fetchField();
        if ($count == 0)
            drupal_goto("review/fyi/$packet_id");
        elseif (EbmsReview::packet_fully_completed($packet_id))
            drupal_goto("review/completed/$packet_id");
        else
            drupal_goto('review',
                array('query' => array('packet' => $packet_id)));
    }
    else
        drupal_goto('review');

}
