<?php

// $Id$

/**
 *
 * @file
 *
 * Portal for PDQ Board members.
 *
 * "Editorial Board Management Site" (EBMS).
 *
 * Supported functionality includes:
 *   - literature review
 *   - calendar of events
 *   - meeting support information
 *   - announcements
 *   - threaded discussions
 *   - rosters and other reports
 *   - request forms (e.g., hotel reservations, reimbursements)
 */

require_once('common.inc');

/**
 * Permissions granted to EBMS users.  Implementation of hook_permission().
 */
function ebms_permission() {
    return array(
        'administer' => array(
            'title' => t('Perform Administrative Tasks'),
            'description' =>
            t('Post documents, manage groups, send messages, etc.'),
        ),
        'manage citations' => array(
            'title' => t('Manage Citations'),
            'description' =>
            t('Import and screen journal articles, and set their statuses'),
        ),
        'manage boards' => array(
            'title' => t('Manage Boards'),
            'description' =>
            t('Make final determination of status for journal articles, ' .
                'and assign literature for review'),
        ),
        'review literature' => array(
            'title' => t('Review Literature'),
            'description' =>
            t('Review journal articles on cancer and make recommendations ' .
                'for incorporation information from those articles into ' .
                'PDQ Cancer Summaries'),
        ),
    );
}

/**
 *
 * Implements hook_menu.
 *
 * Creates our custom menus and other addressable pages.
 *
 * The Drupal Menu API is only being used for routing and the first
 * layer of permission checking.  We are unable to use that API
 * for construction of the rendered menu itself.  This is because
 * we are required to implement fly-out dynamic submenus, and the
 * contributed Drupal module generally used for this functionality
 * has a bug which prevents it from honoring the permissions
 * callback function registered with the API.  In the end it
 * turned out to be more efficient to handle menu building in our
 * own Menu class, implemented in common.inc.  As it turned out,
 * is was less trouble to wrap the jquery Superfish package with
 * our own theming, so we were able to dispense with the use of
 * the Drupal Superfish module altogether.
 */
function ebms_menu() {
    return array(

        // CUSTOM LOGIN PAGE
        'login' => array(
            'page callback' => 'pdq_ebms_login',
            'access callback' => true,
            'type' => MENU_CALLBACK,
        ),

        // REQUEST FOR NEW PASSWORD
        'password' => array(
            'page callback' => 'pdq_ebms_password',
            'access callback' => true,
            'type' => MENU_CALLBACK,
        ),

        // FORM FOR MANAGING USER'S PROFILE
        'profile' => array(
            'page callback' => 'pdq_ebms_profile',
            'access callback' => true,
            'type' => MENU_CALLBACK,
        ),

        // LANDING PAGE
        'home' => array(
            'page callback' => 'pdq_ebms_home',
            'file' => 'home.inc',
            'access callback' => true,
            'type' => MENU_CALLBACK,
        ),

        // CITATION MANAGEMENT
        'citations' => array(
            'page callback' => 'pdq_ebms_citations',
            'file' => 'citations.inc',
            'access arguments' => array('manage citations'),
            'type' => MENU_CALLBACK,
        ),

        // SEARCH DATABASE
        'citations/search' => array(
            'page callback' => 'pdq_ebms_citations',
            'file' => 'citations.inc',
            'access arguments' => array('manage citations'),
            'type' => MENU_CALLBACK,
        ),

        // SEARCH DATABASE
        'citations/review' => array(
            'page callback' => 'pdq_ebms_citations',
            'file' => 'citations.inc',
            'access arguments' => array('manage citations'),
            'type' => MENU_CALLBACK,
        ),

        // SEARCH DATABASE
        'citations/add' => array(
            'page callback' => 'pdq_ebms_citations',
            'file' => 'citations.inc',
            'access arguments' => array('manage citations'),
            'type' => MENU_CALLBACK,
        ),

        // SYSTEM HELP
        'citations/help' => array(
            'page callback' => 'pdq_ebms_citations',
            'file' => 'citations.inc',
            'access arguments' => array('manage citations'),
            'type' => MENU_CALLBACK,
        ),

        // CITATIONS ADMIN
        'citations/admin' => array(
            'page callback' => 'pdq_ebms_citations',
            'file' => 'citations.inc',
            'access arguments' => array('manage citations'),
            'type' => MENU_CALLBACK,
        ),

        // CALENDAR
        'calendar' => array(
            'page callback' => 'pdq_ebms_calendar',
            'file' => 'calendar.inc',
            'access callback' => 'user_is_logged_in',
            'type' => MENU_CALLBACK,
        ),

        // VIEW CALENDAR
        'calendar/view' => array(
            'page callback' => 'pdq_ebms_calendar',
            'file' => 'calendar.inc',
            'access arguments' => array('manage citations'),
            'type' => MENU_CALLBACK,
        ),

        // CREATE EVENT
        'calendar/create' => array(
            'page callback' => 'pdq_ebms_calendar',
            'file' => 'calendar.inc',
            'access arguments' => array('manage citations'),
            'type' => MENU_CALLBACK,
        ),

        // LITERATURE REVIEW
        'review' => array(
            'page callback' => 'pdq_ebms_review',
            'file' => 'review.inc',
            'access callback' => 'user_is_logged_in',
            'type' => MENU_CALLBACK,
        ),

        // ASSIGNED PACKETS
        'review/assigned' => array(
            'page callback' => 'pdq_ebms_review',
            'file' => 'review.inc',
            'access callback' => 'user_is_logged_in',
            'type' => MENU_CALLBACK,
        ),

        // CREATE PACKET
        'review/create' => array(
            'page callback' => 'pdq_ebms_review',
            'file' => 'review.inc',
            'access arguments' => array('manage citations'),
            'type' => MENU_CALLBACK,
        ),

        // SUMMARIES
        'summaries' => array(
            'page callback' => 'pdq_ebms_summaries',
            'file' => 'summaries.inc',
            'access callback' => 'user_is_logged_in',
            'type' => MENU_CALLBACK,
        ),

        // TRAVEL
        'travel' => array(
            'page callback' => 'pdq_ebms_travel',
            'file' => 'travel.inc',
            'access callback' => 'user_is_logged_in',
            'type' => MENU_CALLBACK,
        ),

        // TRAVEL INFO
        'travel/info' => array(
            'page callback' => 'pdq_ebms_travel',
            'file' => 'travel.inc',
            'access callback' => 'user_is_logged_in',
            'type' => MENU_CALLBACK,
        ),

        // HOTEL REQUEST
        'travel/hotel' => array(
            'page callback' => 'pdq_ebms_travel',
            'file' => 'travel.inc',
            'access callback' => 'user_is_logged_in',
            'type' => MENU_CALLBACK,
        ),

        // REIMBURSEMENT REQUEST
        'travel/reimbursement' => array(
            'page callback' => 'pdq_ebms_travel',
            'file' => 'travel.inc',
            'access callback' => 'user_is_logged_in',
            'type' => MENU_CALLBACK,
        ),

        // TRAVEL REPORTS
        'travel/reports' => array(
            'page callback' => 'pdq_ebms_travel',
            'file' => 'travel.inc',
            'access arguments' => array('manage citations'),
            'type' => MENU_CALLBACK,
        ),

        // FORUMS
        'discussion' => array(
            'page callback' => 'pdq_ebms_forum',
            'file' => 'forum.inc',
            'access callback' => 'user_is_logged_in',
            'type' => MENU_CALLBACK,
        ),

        // ABOUT
        'about' => array(
            'page callback' => 'pdq_ebms_about',
            'file' => 'about.inc',
            'access callback' => 'user_is_logged_in',
            'type' => MENU_CALLBACK,
        ),

        // GENERAL INFORMATION ABOUT EBMS
        'about/info' => array(
            'page callback' => 'pdq_ebms_about',
            'file' => 'about.inc',
            'access callback' => 'user_is_logged_in',
            'type' => MENU_CALLBACK,
        ),

        // Information on PDQ Boards
        'about/boards' => array(
            'page callback' => 'pdq_ebms_about',
            'file' => 'about.inc',
            'access callback' => 'user_is_logged_in',
            'type' => MENU_CALLBACK,
        ),

        // POSTING DOCUMENTS
        'docs' => array(
            'page callback' => 'pdq_ebms_docs',
            'file' => 'docs.inc',
            'access arguments' => array('administer'),
            'type' => MENU_CALLBACK,
        ),

        // CITATION MANAGEMENT
        'reports' => array(
            'page callback' => 'pdq_ebms_reports',
            'file' => 'reports.inc',
            'access arguments' => array('administer'),
            'type' => MENU_CALLBACK,
        ),

        // CUSTOM 403 PAGE
        'access-denied' => array(
            'title' => 'Access Denied',
            'page callback' => 'pdq_ebms_403',
            'access callback' => true,
            'type' => MENU_CALLBACK,
        ),

        // CUSTOM 404 PAGE
        'not-found' => array(
            'title' => 'Page Not Found',
            'page callback' => 'pdq_ebms_404',
            'access callback' => true,
            'type' => MENU_CALLBACK,
        ),

        /*
        // TESTING ARTICLE SEARCH
        'articlesearch' => array(
            'title' => 'Search for Articles',
            'page callback' => 'pdq_ebms_artsearch',
            'file' => 'art_search.inc',
            'access callback' => 'user_is_logged_in',
            'menu_name' => 'main-menu',
            'weight' => 6,
        ),*/

        // TESTING FOR ALAN
        'alantest' => array(
            'title' => 'AlanTest',
            'page callback' => 'pdq_ebms_alantest',
            'file' => 'alan.inc',
            'access callback' => true,
            //'menu_name' => 'main-menu',
            //'weight' => 20,
        ),

        // AJAX CALLBACK FOR THE NEW PASSWORD FORM.
        'account-email-status' => array(
            'page callback' => 'pdq_ebms_account_email_status',
            'access callback' => true,
            'type' => MENU_CALLBACK,
        ),

        // USED ONLY BY DEVELOPER.
        'upload-files' => array(
            'title' => 'Upload Files',
            'page callback' => 'pdq_ebms_upload_files',
            'access callback' => true,
            'type' => MENU_CALLBACK,
        ),

        // PLACEHOLDER DURING DEVELOPMENT
        'stub' => array(
            'title' => 'Place Holder',
            'page callback' => 'pdq_ebms_stub',
            'access callback' => true,
            'type' => MENU_CALLBACK,
        ),

        // TEMPLATE USED FOR PUTTING UP TEST FORMS
        'testform' => array(
            'title' => 'Test Form',
            'page callback' => 'pdq_ebms_testform',
            'access callback' => true,
            'type' => MENU_CALLBACK,
            'file' => 'testform.inc',
        ),

        // CLEAR THEME CACHE
        'clear-theme-cache' => array(
            'title' => 'Clear Theme Cache',
            'page callback' => 'pdq_ebms_clear_theme_cache',
            'access callback' => true,
            'type' => MENU_CALLBACK,
        ),

        // CLEAR ALL CACHES
        'clear-all-caches' => array(
            'title' => 'Clear Theme Cache',
            'page callback' => 'pdq_ebms_clear_all_caches',
            'access callback' => true,
            'type' => MENU_CALLBACK,
        ),
    );
}

/**
 * Stub for page to manage one's own profile.
 */
function pdq_ebms_profile() {
    drupal_set_title('Profile');
    return '<p>Stub for user profile form page</p>';
}

/**
 * Custom login page.  Page gets a second form for requesting a new
 * password.  This second form is hidden and is only displayed when
 * the user explicitly requests it (and only if Javascript is enabled).
 */
function pdq_ebms_login() {

    // First assemble the basic login form.
    $form = drupal_get_form('pdq_ebms_login_form');

    // Then fold in the hidden form for the password reset dialog.
    drupal_add_library('system', 'ui.dialog');
    $dialog = drupal_get_form('pdq_ebms_password_form');
    $dialog['#prefix'] = '<div id="forgot-password-form-js">';
    $dialog['#suffix'] = '</div>';
    $page = array('form' => $form, 'hidden-form' => $dialog);
    return $page;
}

/**
 * Custom login page.
 */
function pdq_ebms_login_form($form, &$form_state) {
    $url = 'password';
    $title = 'Forgot user name or password?';
    $id = 'forgot-password';
    $prompt = 'Can\'t access your account?';
    $pw_request = "<a href='$url' title='$title' id='$id'>$prompt</a>";
    return array(
        'name' => array(
            '#type' => 'textfield',
            '#title' => 'Username',
        ),
        'pass' => array(
            '#type' => 'password',
            '#title' => 'Password',
        ),
        'submit' => array(
            '#type' => 'submit',
            '#value' => 'LOGIN',
            '#suffix' => $pw_request,
            '#submit' => array('pdq_ebms_login_form_submit'),
        ),
        '#validate' => array('pdq_ebms_login_form_validate'),
    );
}

/**
 * Verify that the user credentials are present and valid.  Most of the
 * work done here is for thwarting hackers.
 */
function pdq_ebms_login_form_validate($form, &$form_state) {

    // Check for the simple stuff: empty user name and/or password field.
    $name = $form_state['values']['name'];
    $pass = $form_state['values']['pass'];
    $name_empty = empty($name);
    $pass_empty = empty($pass);
    if ($name_empty || $pass_empty) {
        if ($name_empty)
            form_set_error('name', 'Username field is required.');
        if ($pass_empty)
            form_set_error('pass', 'Password field is required.');
        return;
    }

    // Make sure the user hasn't been blocked.
    if (user_is_blocked($name)) {
        form_set_error('name', 'User account is blocked');
        return;
    }

    // Prevent flooding attacks from this IP address.
    $new_password_url = url('user/password');
    $new_password_text = 'request a new password';
    $new_password_link = "<a href='$new_password_url'>$new_password_text</a>";
    $try_later = "Please try again later or $new_password_link.";
    $attack_name = 'failed_login_attempt_ip';
    $limit = variable_get('user_failed_login_ip_limit', 50);
    $window = variable_get('user_failed_login_ip_window', 3600);
    if (!flood_is_allowed($attack_name, $limit, $window)) {
        $form_state['flood_control_triggered'] = 'ip';
        flood_register_event($attack_name, $window);
        $msg = 'Sorry, too many failed login attempts from this location.';
        form_set_error('name', "$msg $try_later.");
        return;
    }

    // Verify that this user name is valid.
    $pass = trim($pass);
    $uid = db_select('users', 'u')
        ->fields('u', array('uid'))
        ->condition('u.name', $name)
        ->execute()
        ->fetchField();
    $error = 'YOUR USERNAME AND/OR PASSWORD IS INCORRECT.<br />' .
        'Please try again (make sure your caps lock is off).';
    if (!$uid) {
        form_set_error('name', $error);
        watchdog('user', "Login attempt failed for $name.");
        return;
    }

    // Prevent flooding attacks for this account.
    if (variable_get('user_failed_login_identifier_uid_only', false))
        $identifier = $uid;
    else
        $identifier = $uid . '-' . ip_address();
    $form_state['flood_control_user_identifier'] = $identifier;
    $attack_name = 'failed_login_attempt_user';
    $limit = variable_get('user_failed_login_user_limit', 5);
    $window = variable_get('user_failed_login_user_window', 21600);
    if (!flood_is_allowed($attack_name, $limit, $window, $identifier)) {
        $form_state['flood_control_triggered'] = 'user';
        flood_register_event($attack_name, $window, $identifier);
        $msg = 'Sorry, too many failed login attempts for this account.';
        form_set_error('name', "$msg $try_later.");
        return;
    }

    // Validate password against the DB.
    $form_state['uid'] = user_authenticate($name, $pass);
    if (!$form_state['uid']) {
        form_set_error('name', $error);
        watchdog('user', "Login attempt failed for $name.");
        return;
    }

    // Clear flood control for this user.
    flood_clear_event($attack_name, $identifier);
}

/**
 * Record the login action and make sure the user is dropped on the home
 * page.  By the time we get here, the validation callback has already
 * taken care of actually logging the user in.
 */
function pdq_ebms_login_form_submit($form, &$form_state) {
    global $user;
    $user = user_load($form_state['uid']);
    $form_state['redirect'] = 'home';
    watchdog('user', "Session opened for {$user->name}.");

    $user->login = REQUEST_TIME;
    db_update('users')
        ->fields(array('login' => $user->login))
        ->condition('uid', $user->uid)
        ->execute();
    drupal_session_regenerate();
}

/**
 * Put up a page for requesting a new password.  This will only be
 * invoked by users without Javascript enabled.  Normally the form
 * will be displayed in a popup window hidden inside the login
 * page.
 */
function pdq_ebms_password() {
    return drupal_get_form('pdq_ebms_password_form');
}

/**
 * Ask the user what she has forgotten, and get her account's email address.
 */
function pdq_ebms_password_form() {
    return array(
        'forgot' => array(
            '#type' => 'radios',
            '#options' => array(
                'username' => 'Username',
                'password' => 'Password',
                'both' => 'Both'),
            '#title' => 'Forgot My',
        ),
        'email' => array(
            '#type' => 'textfield',
            '#suffix' => '<p>Please enter the email address associated with ' .
            'your EBMS account.</p>',
        ),
        'submit' => array(
            '#type' => 'submit',
            '#value' => 'Submit',
        ),
    );
}

/**
 * Make sure the required fields have been taken care of, and that
 * the email address matches that of a current user.  On successful
 * validation, the account information will be loaded in the 'account'
 * value of the $form_state hash.
 */
function pdq_ebms_password_form_validate($form, &$form_state) {
    $address = $form_state['values']['email'];
    $form_state['account'] = null;
    $errors = 0;
    if (empty($form_state['values']['forgot'])) {
        form_set_error('forgot',
            'You must indicate which elements have been forgotten.');
        $errors++;
    }
    if (empty($address)) {
        form_set_error('email', 'Email address is required.');
        $errors++;
    }
    else {
        $account = user_load_by_mail($address);
        if (empty($account)) {
            form_set_error('email',
                'That email address is registered with no accounts.');
            $errors++;
        }
    }
    if (!$errors)
        $form_state['account'] = $account;
}

/**
 * Mail the user the information she has forgotten, replacing the old
 * password with a new one if the password was one of the things
 * forgotten.
 */
function pdq_ebms_password_form_submit($form, &$form_state) {
    global $language;
    $account = $form_state['account'];
    $forgot = $form_state['values']['forgot'];
    $subject = 'EBMS Account Information';
    $to = Ebms\Util::format_email_address($account->mail, $account->name);
    if ($forgot == 'username' || $forgot == 'both')
        $message = array("Your EBMS login name is {$account->name}.\n");
    if ($forgot == 'password' || $forgot == 'both') {
        $new_pw = user_password();
        $message[] = "Your new password is $new_pw.\n";
        $message[] = 'Please log in and change your password at your ';
        $message[] = "earliest convenience.\n";
        # user_save($account, array('pass' => $new_pw);
    }
    $message[] = url('login', array('absolute' => true)) . "\n";
    $message = array(implode($message));
    $params = array('body' => $message, 'subject' => $subject);
    $key = 'newpw';
    drupal_mail('ebms', $key, $to, $language, $params, Ebms\FROM);
    drupal_set_message('Further instructions have been mailed to you.');
    drupal_goto('login');
}

/**
 * Ajax callback to verify for the Javascript code that the email address
 * specified represents a valid, active account.
 */
function pdq_ebms_account_email_status() {
    $address = $_GET['email'];
    $name = 'nobody';
    $status = 'missing';
    if (!empty($address)) {
        $account = user_load_by_mail($address);
        if (!empty($account)) {
            if ($account->status != 1)
                $status = "blocked";
            else {
                $name = $account->name;
                $status = 'valid';
            }
        }
    }
    drupal_json_output(array('name' => $name, 'status' => $status));
}

/**
 * Our module's implementation of hook_mail().
 */
function ebms_mail($key, &$message, $params) {
    $message['subject'] = $params['subject'];
    $message['body'] = $params['body'];
    if (isset($params['reply-to']))
        $message['headers']['Reply-to'] = $params['reply-to'];
    if (isset($params['boundary'])) {
        $boundary = $params['boundary'];
        $message['headers']['MIME-Version'] = '1.0';
        $message['headers']['Content-Type'] =
            "multipart/alternative; boundary=\"$boundary\"";
        $message['headers']['Content-Transfer-Encoding'] = '8Bit';
        $message['headers']['X-Mailer'] = 'Drupal Mailer';
    }
}

/**
 * Custom page for pages the user isn't allowed to see.
 */
function pdq_ebms_403() {
    global $user;
    if (!user_is_logged_in()) {
        drupal_set_title('Please Log In');
        return drupal_get_form('pdq_ebms_login_form');
    }
    return '<p>Sorry, you are not authorized to visit this page.</p>';
}

/**
 * Message we show when a request comes in for a page that doesn't exist.
 */
function pdq_ebms_404() {
    global $user;
    if (!user_is_logged_in()) {
        drupal_set_title('Please Log In');
        return drupal_get_form('pdq_ebms_login_form');
    }
    return '<p>You have requested a page which does not exist.</p>';
}

/**
 * Register our callback to perform custom theming of the
 * data structures used to build our main menu and submenus.
 *
 * Implements hook_theme().
 */
function ebms_theme() {
    return array(
        'ebms_menu_item_list' => array(
            'variables' => array(
                'items' => array(),
                'attributes' => array(),
            ),
        ),
    );
}

/**
 * Custom theming of the menu items.  Most of the work
 * is to enable the jQuery Superfish package to show
 * submenus dynamically.  This callback is registered
 * in ebms_theme() above.
 */
function theme_ebms_menu_item_list($variables) {
    $markup = array();
    $items = $variables['items'];
    if (!empty($items)) {
        if (!empty($variables['level']))
            $variables['attributes']['class'][] = 'ebms-submenu';
        $attributes = drupal_attributes($variables['attributes']);
        $num_items = count($items);
        $markup[] = "<ul$attributes>";
        foreach ($items as $i => $item) {
            $attributes = array();
            $children = array();
            $data = '';
            if (is_array($item)) {
                foreach ($item as $key => $value) {
                    switch ($key) {
                        case 'data':
                            $data = $value;
                            break;
                        case 'children':
                            $children = $value;
                            break;
                        default:
                            $attributes[$key] = $value;
                            break;
                    }
                }
            }
            else
                $data = $item;
            if (empty($variables['level'])) {
                $data .= '<div class="ebms-menu-left-divider"></div>';
                $data .= '<div class="ebms-menu-right-divider"></div>';
            }
            if (count($children) > 0) {
                $data .= '<div class="ebms-menu-border-blur"></div>';
                $data .= '<div class="ebms-menu-restore-pixel"></div>';
                $data .= theme_ebms_menu_item_list(
                    array(
                        'items' => $children,
                        'attributes' => $attributes,
                        'level' => 'child',
                    )
                );
            }
            if ($i == 0)
                $attributes['class'][] = 'first';
            if ($i == $num_items - 1)
                $attributes['class'][] = 'last';
            $attributes = drupal_attributes($attributes);
            $markup[] = "<li$attributes>$data</li>";
        }
        $markup[] = "</ul>";
    }
    $markup = implode($markup);
    return $markup;
}

/**
 * Populate the ebms_menu block.  See note above in the
 * comments for our implementation of hook_menu about
 * why we do this.
 */
function ebms_page_build(&$page) {
    $menus = Ebms\Menu::menus();
    $items = array();
    foreach ($menus as $m)
        $items[] = $m->render_array();
    $page['ebms_menu'] = array(
        '#attributes' => array(
            'class' => array('sf-menu'),
            'id' => 'ebms-menu',
        ),
        '#theme' => 'ebms_menu_item_list',
        '#items' => $items,
    );
}

/**
 * Load the libraries we'll need for advanced display
 * functionality, and populate the $user object with
 * information specific to the EBMS (i.e., board and
 * subgroup membership).
 *
 * Implementation of hook_init().
 */
function ebms_init() {
    global $user;
    $sflib = libraries_get_path('superfish');
    drupal_add_js("$sflib/superfish.js");
    drupal_add_js("$sflib/supersubs.js");
    drupal_add_js(Ebms\JS_DIR . '/ebms.js');
    drupal_add_css("$sflib/css/superfish.css");
    if ($user->uid) {
        $result = db_select('ebms_board_member', 'm')
            ->fields('m', array('board_id'))
            ->condition('m.user_id', $user->uid)
            ->execute();
        $user->ebms_boards = array();
        foreach ($result as $record)
            $user->ebms_boards[] = $record->board_id;
        $result = db_select('ebms_subgroup_member', 'm')
            ->fields('m', array('sg_id'))
            ->condition('m.user_id', $user->uid)
            ->execute();
        $user->ebms_subgroups = array();
        foreach ($result as $record)
            $user->ebms_subgroups[] = $record->sg_id;
    }
}
/**
 * XXX Everything below here will be jettisoned once we're in production.
 */
class EbmsUploadFile extends stdClass {
    function EbmsUploadFile($path, $mimetype, $uid) {
        $this->uid = $uid;
        $this->uri = $path; //'public://' . $path;
        $this->filename = basename($path);
        $this->filesize = filesize($path);
        $this->timestamp = time();
        $this->status = 1;
        $this->filemime = $mimetype;
    }
}

function pdq_ebms_upload_files() {
    return '<p>Already done</p>';
    global $user;
    $files = file('/tmp/upload-file-list');
    $html = array('<ul>');
    foreach ($files as $line) {
        $line = trim($line);
        $list = explode(' ', $line, 2);
        $mimetype = $list[0];
        $path = $list[1];
        $f = new EbmsUploadFile($path, $mimetype, $user->uid);
        $html[] = '<li>' . $path . ' (' . $mimetype . ')</li>';
        file_copy($f, 'public://' . $f->filename);
    }
    return '<p>Uploaded:</p>' . implode('', $html);
}

function pdq_ebms_debug($where, $what) {
    $now = date('c');
    file_put_contents('/tmp/ebms.debug',
                      "$now $where\n" . print_r($what, TRUE) .
                      "\n", FILE_APPEND);
}

function pdq_ebms_stub() {
    return '<h2>Placeholder</h2>' .
        '<p>Stub used while functionality is being developed!</p>';
    return drupal_get_form('pdq_ebms_demo_form_1',
        array(
            'foo' => 1234,
            'bar' => array(
                'buzz' => 'lightyear',
                'prince' => 'hamlet',
            ),
        )
    );
}

/**
 * Form template for Alan.
 */
function pdq_ebms_demo_form_1($form, &$form_state, $extra) {
    return array(
        'name' => array(
            '#title' => 'Name',
            '#type' => 'textfield',
            '#description' => 'Use the format <i>Surname, First Names(s)</i>',
        ),
        'desc' => array(
            '#title' => 'Notes',
            '#type' => 'textarea',
            '#description' => 'Tell me everything you know about him/her.',
        ),
        'gender' => array(
            '#title' => 'Gender',
            '#type' => 'checkboxes',
            '#options' => array('Male', 'Female', 'Other'),
            '#description' => 'Check all that apply',
        ),
        'submit' => array(
            '#type' => 'submit',
            '#value' => 'Initiate Test',
            '#submit' => array('pdq_ebms_demo_form_1_submit'),
        ),
        '#validate' => array('testform_validation'),
        'foo' => array(
            '#type' => 'hidden',
            '#value' => $extra['bar']['prince'],
        ),
    );
}

function pdq_ebms_demo_form_1_submit($form, $form_state) {
    drupal_set_message('wrong name', 'error');
    return '<p>Your test failed.</p>';
}
function testform_validation($form, &$form_state) {
    form_set_error('desc', $form_state['values']['name'] . ' is bad.');
    drupal_set_message(print_r($form_state, true));
}

/**
 * We won't need this in production, but it certainly
 * comes in handy during development.  Hooked in temporarily
 * to a link in the footer.
 */
function pdq_ebms_clear_theme_cache() {
    drupal_theme_rebuild();
    return '<p>Theme cache cleared ' . date('c') . '.</p>';
}

/**
 * We won't need this in production, but it certainly
 * comes in handy during development.  Hooked in temporarily
 * to a link in the footer.
 */
function pdq_ebms_rebuild_menus() {
    menu_rebuild();
    return '<p>Caches cleared ' . date('c') . '.</p>';
}

/**
 * We won't need this in production, but it certainly
 * comes in handy during development.  Hooked in temporarily
 * to a link in the footer.
 */
function pdq_ebms_clear_all_caches() {
    cache_clear_all();
    return '<p>Caches cleared ' . date('c') . '.</p>';
}
